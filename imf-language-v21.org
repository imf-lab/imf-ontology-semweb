#+TITLE: IMF Language v2.1
#+DATE: Editor: Martin G. Skj√¶veland
#+AUTHOR:
#+EMAIL:

#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport QA update old
#+EXPORT_FILE_NAME: index.html

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \usepackage{fullpage,parskip,times}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage[zerostyle=d]{newtxtt} %% Various versions of zeros available. See documentation for details
 

* Introduction                                                       :update:
** TODO IMF IT Document Overview

*** Version 2

#+BEGIN_SRC dot :file out/img/overview-specifications-v2.png :exports results :noweb yes
digraph {
 rankdir = TB;
 newrank=true;
 
 <<graphviz-style>>

 IMF_Manual ->  Vocabulary, Grammar, Semantics;

 DataModel, Vocabulary -> OWL;
 DataModel, Grammar -> SHACL;
 Semantics -> ISO15926_14;

 DataModel -> OTTR -> RDFdata;

 OWL, SHACL -> RDFdata [dir=back];

 OTTR -> SHACLtypes, OWLclasses;

 SHACLtypes -> RDFdata [dir=back, constraint=false];
 OWLclasses -> RDFdata [dir=back, constraint=false, style=dotted];

 ISO15926_14 -> OWLclasses;

}

#+END_SRC

#+RESULTS:
[[file:out/img/overview-specifications-v2.png]]

*** Version 1

Todos:
 - collapse data and types whereever approprioate

/This is loosely inspired by the OWL 2 Web Ontology Language Document Overview [[https://www.w3.org/TR/2012/REC-owl2-overview-20121211/]]./


This document defines the following:

 - A structural specification of IMF, or IMF datamodel, including IMF
   Data (2) and IMF Types (3) based on the formal abstract
   specification of IMF (1).
 - The IMF Vocabulary (9) and IMF Grammar (10) are an implementation
   of (parts of) the Structural specification (2+3).
 - IMF Data (2) is represented in different forms:
   - The IMF Data exchange format (7) is RDF as specified by the IMF
     grammar (10), specified in the form of a set of SHACL shapes, and
     uses the IMF vocabulary (9), specified in the form of an OWL
     ontology.
   - OTTR templates represent an implementation of the structural
     specification of IMF Data, and may be used to generate the IMF
     Data exchange format (7) and OWL instances as according to the
     ISO 15926-14 ontology (11).
 - IMF types (3) are represented in different formats:
   - An exchange format for IMF types (6) should be specified.
   - SHACL shapes (8) capture the constraint nature of IMF types and
     may be used validate the IMF Data Exchange format (7).
   - OWL class definitions (12) following the ISO 15926-14 OWL ontology
     capture the semantics of the types and may be used for semantic
     validation of the types and their instances.
   - OTTR templates (5) represent an implementation of the structural
     specification of types, and allow for a succinct definition of
     the translation into SHACL shapes (8) and OWL class definitions
     (12).
   - It should be possible to define a grammar (10b) for IMF Type
     SHACL constraints, in the form of a subset or dialect of the
     SHACL standard.

 The (generated) diagram below illustrates the main relations between
 the parts of the specification. Green boxes indicates a single
 "schematic" specifications. Blue boxes indicate specification of
 multiple multiple occurrences.

#+BEGIN_SRC dot :file out/img/overview-specifications-v1.png :exports results :noweb yes
digraph {
 rankdir = BT;
 newrank=true;
 
 <<graphviz-style>>

     IMFdataAbsSpec [label="IMF (1)\nAbstract spec.", fillcolor=lightyellow]

     IMFdataAbsSpec -> IMFdataSpec;
     IMFdataAbsSpec -> IMFtypeSpec [style=dashed];

     IMFdataSpec [label="IMF Data (2)\nStructural spec.", fillcolor=pink]
     IMFtypeSpec [label="IMF Type (3)\nStructural spec.", fillcolor=pink]

     IMFdataSpec -> data [arrowhead=none, constraint=false, color=gray];
     IMFdataSpec -> data_patterns [arrowhead=none, color=gray];
     IMFdataSpec -> p14_data [arrowhead=none, constraint=false, color=gray] ;

     IMFdataSpec -> IMFtypeSpec [constraint=false];

     IMFtypeSpec -> types [arrowhead=none, constraint=false, color=gray];
     IMFtypeSpec -> type_patterns [arrowhead=none, color=gray];
     IMFtypeSpec -> type_syntax [arrowhead=none, color=gray];
     IMFtypeSpec -> p14_types [arrowhead=none, constraint=false, color=gray];

    { rank="same"
    voc [label="IMF Vocabulary (9)\nOWL", fillcolor=darkseagreen2];
    grammar [label="IMF Grammar (10)\nSHACL", fillcolor=darkseagreen2];
    typegrammar [style="dashed,filled", label="IMF Type Grammar (10b)\nSHACL", fillcolor=darkseagreen];
    }

    { rank="same"
    data [label="IMF Data (7)\nExchange format\nRDF",fillcolor=darkslategray2];
    types [label="IMF Types (8)\nConstraints\nSHACL",fillcolor=darkslategray2];
    }

     types -> grammar [style="dashed", label="\"restricts\""];
     data -> voc [label = "uses"];
     grammar -> voc [label = "uses", constraint=false];
     typegrammar -> types [label = "validates", constraint=false];

     data -> grammar [dir="back", label = "validates"];
     data -> types [dir="back", constraint=false, label="validates"];


    { rank="same"
    data_patterns [label="IMF Data (4)\nTemplate\nOTTR", fillcolor=darkseagreen2];
    type_patterns [label="IMF Type (5)\nTemplate\nOTTR", fillcolor=darkseagreen2];
    type_syntax [style="filled,dashed", label="IMF Type (6)\nExchange format\n??", fillcolor=darkseagreen];
    }

    type_patterns -> data_patterns [style=dotted, arrowhead=none, constraint=false];

 
  subgraph cluster_p14 {

    p14 [label="ISO 15926-14 (14)\nOWL"]
    rdl [label="PCA RDL (13)\nOWL"]
    p14_types [label="IMF Types (12)\nSemantics\nOWL classes", fillcolor=darkslategray3];
    p14_data [label="IMF Data (11)\nSemantics\nOWL instances", fillcolor=darkslategray3];

   rdl -> p14;
  }


 ##### edges

 data_patterns -> data  [label="expands"];
 type_patterns -> types [label="expands"];

 type_patterns -> p14_types [label="expands", constraint=false];
 data_patterns -> p14_data  [label="expands", constraint=false];

 p14_data -> p14_types [label="inst. of"];
 p14_types -> rdl;
 #types -> rdl [style="dashed", constraint=false];
 p14_types -> IMFtypeSpec [constraint=false, label = "verifiy"];


}
#+END_SRC

#+RESULTS:
[[file:out/img/overview-specifications.png]]

** TODO W3C technology

[Explain and motivate the use of semantic technologies?]

*** RDF

RDF is an abstract data model defined as an open standard by the W3C.

RDF may be serialised in different serialisation formats such as
RDF/XML (based on XML), JSON-LD (based on JSON), Turtle (a favorite
amongst many familiar with RDF due to its ease of reading and
writing), or N-Triples (a very simple format only appropriate for
software).


* Namespace and identifiers and filenames                            :update:
* IMF Ontology
** Design                                                          :noexport:
*** Diagram legend

The specification consists of a series of partially overlapping
diagrams. The combined diagram is presented in Figure ...

The diagrams are UML class diagrams are drawn using [[https://plantuml.com/][PlantUML]]
restricted to the following elements:

 - Classes, marked with the icon "C". Classes may have "fields" that
   can hold values, fields are not used to represent relationships.
 - Abstract classes, marked with an icon "A", are classes that are not
   intended to be instantiated.
 - Enumerations, marked with the icon "E", are used to represent UML
   classes with a limited list of instantiations and where the
   instantiations are defined in the IMF language.
 - Stereotypes, marked with an icon "S" are used to represent a class
   structure that is not intended to be explictly represented in the
   language, but represents a tag and a convenient repetative
   structure. Classes that use stereotypes indicate this with ~<<
   stereotype >>~ above the class name.
 - Subclass relationships between classes, which are drawn using
   directed relations with an open arrow.
 - Directed associations (relations) between classes, which are marked
   with a name and possibly a cardinality. If no cardinality is given,
   then the cardinality is 0--many.
 - Composition relations, drawn with a filled diamond as arrow,
   indicates a strong dependency to the target of the relationship;
   the target is considered as a part of the source and cannot exist
   independently of the source of the relationship.
 - Composition relations, drawn with a open diamond as arrow,
   indicates a weak dependency to the target of the relationship than
   to that of a composition relation, the target is considered as part
   of the sourec but can exist independently of the source of the
   relationship.

 Here is an example:

#+NAME: overview-diagram-legend
#+BEGIN_SRC plantuml :noweb yes :file out/img/plantuml-legend.png
<<plantuml-style>>

abstract class AbstractConcept1

class Concept2 {
 field1
 field2
}

AbstractConcept1 <|-- Concept2
Concept2 <|-- SubConcept3

Concept2 -left-> Concept4 : 1..* hasRelationA

enum EnumeratedConcept5 {
 element1
 element2
}

Concept2 -right-> EnumeratedConcept5 : 1 hasRelationB

Concept4 --o SubConcept3

Concept4 --> Item

class Item << RDL >>
#+END_SRC

#+RESULTS: overview-diagram-legend
[[file:out/img/plantuml-legend.png]]

Note: The structural specification is described by a series of
diagrams, each focus on a specific part. In the case that a class is
used in multiple diagrams, only one diagram contains the full
specification of the class, while the other diagrams only contain the
class name. The diagram that contains the complete specification
combines all diagrams and contains all information.


** Ontology header

#+NAME: owl-imf-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/imf.owl.wottr.ttl :mkdirp yes
<<prefixes>>

<http://ns.imfid.org/imf> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20230630/imf> ;
    owl:versionInfo "0.2.0" ;
    owl:priorVersion <https://ns.imfid.org/20221118/imf> ;
    skos:prefLabel "Information Modelling Framework Ontology" ;
    skos:altLabel "The IMF Ontology" ;
    vann:namespacePrefix "imf" ;
    vann:namespaceURI <http://ns.imfid.org/imf#> ;
    pav:createdOn "2023-06-30T00:00:00"^^xsd:dateTime ;
    pav:createdBy _:mgs ;
    pav:contributedBy _:mgs, _:aw, _:ef ;
    foaf:depiction <imf-overview.png> ;
    skos:changeNote 
      """0.2.0 :: Change summary:
- Change: minor naming adjustments to some IRIs. 
- Added metadata descriptions, including definitions and statuses.

Generated changelog that only checks the occurrence of IRIs in the IMF namespace between this and the previous version of the ontology:

<<py_iri_rdf_diff(v2="out/owl/imf.owl.ttl", v1="https://ns.imfid.org/20221118/imf-vocabulary.owl.ttl")>>

""" ;
    # cc:licence 
    # skos:scopeNote ## add description of ontology

    skos:editorialNote 
      "On versioning. Versions of this ontology and other semantic web resources are published an URL following this schema:  http://ns.imfid.org/[yyyy-mm-dd]/[resource-name]" ,
      "On statuses. All terms in the ontology are given a status using the 'term_status' property from the 'Term-centric Semantic Web Vocabulary Annotations' vocabulary (https://www.w3.org/2003/06/sw-vocab-status/note.html), and one of the values 'unstable', 'testing', 'stable' and 'archaic'. In this version of the ontology the highest status is 'testing'. Terms that are 'unstable' contain also this word in their label." ,
      """References to external vocabularies used by this ontology:
- SKOS: https://www.w3.org/TR/skos-primer/ ;
- VANN: https://vocab.org/vann/ ;
- PAV: https://pav-ontology.github.io/pav/ ;
""" ,
      """On naming conventions. 
- Classes use UpperCamelCase;
- Properties use lowerCamelCase, where
   - object properties between IMF Classes usually start with a verb, e.g., 'has',
   - object properties for reified properties start with 'the',
   - object properties to external libraries, datatype properties, and annotation properties do not start with a verb;
 - Individuals use lowerCamelCase.
""" ,
      "On definitions. When referring to terms in the ontology, the following format is used: [prefLabel], where prefLabel is set by the property skos:prefLabel." ;

    skos:editorialNote """
<<sh_jena_shacl_validate(shapes="http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl", data="out/owl/imf.owl.ttl")>>
    """

    .

_:mgs foaf:name "Martin G. Skj√¶veland" .
_:aw  foaf:name "Arild Waaler" .
_:ef  foaf:name "Erlend Fj√∏sna" .

<<owl-imf-ontology-all-includes>>
#+END_SRC

#+RESULTS: owl-imf-ontology
#+begin_example
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .

@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix vs:     <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix vann:   <http://purl.org/vocab/vann/> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .

@prefix imf:	<http://ns.imfid.org/imf#> .
@prefix ex:	<http://example.com#> .

@prefix p14:    <http://example.com/P14#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs:       <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .

@prefix o-imf:	     <http://ns.imfid.org/templates/> .
@prefix o-imf-t-s:   <http://ns.imfid.org/templates/type/shacl/> .
@prefix o-imf-t-o:   <http://ns.imfid.org/templates/type/owl/> .


<http://ns.imfid.org/imf> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20230630/imf> ;
    owl:versionInfo "0.2.0" ;
    owl:priorVersion <https://ns.imfid.org/20221118/imf> ;
    skos:prefLabel "Information Modelling Framework Ontology" ;
    skos:altLabel "The IMF Ontology" ;
    vann:namespacePrefix "imf" ;
    vann:namespaceURI <http://ns.imfid.org/imf#> ;
    pav:createdOn "2023-06-30T00:00:00"^^xsd:dateTime ;
    pav:createdBy _:mgs ;
    pav:contributedBy _:mgs, _:aw, _:ef ;
    skos:changeNote 
      """0.2.0 :: Change summary:
- Change: minor naming adjustments to some IRIs. 
- Added metadata descriptions, including definitinos and statuses.

Generated changelog that only checks the occurrence of IRIs in the IMF namespace between this and the previous version of the ontology:

 - IRIs present in both versions :: ns1:imf, imf:Aspect, imf:AspectElement, imf:Block, imf:FunctionBlock, imf:FunctionTerminal, imf:InputTerminal, imf:InstalledBlock, imf:InstalledTerminal, imf:LocationBlock, imf:LocationTerminal, imf:OutputTerminal, imf:ProductBlock, imf:ProductTerminal, imf:Terminal, imf:associativeRelation, imf:color, imf:hasAspect, imf:hasInputTerminal, imf:hasOutputTerminal, imf:hasPart, imf:hasTerminal, imf:hierarchicalRelation, imf:interAspectRelation, imf:intraAspectRelation, imf:prefix, imf:theInput, imf:theOutput

 - IRIs present only in this version :: ns2:imf, imf:, imf:Attribute, imf:AttributeQualifier, imf:BreakdownPoint, imf:ConnectionPoint, imf:Element, imf:FunctionElement, imf:InstalledElement, imf:LocationElement, imf:ProductElement, imf:ProvenanceQualifier, imf:RangeQualifier, imf:RegularityQualifier, imf:ScopeQualifier, imf:TerminalQualifier, imf:absoluteQualifier, imf:asFunction, imf:asInstalled, imf:asLocation, imf:asProduct, imf:averageQualifier, imf:calculatedQualifier, imf:classifier, imf:connectedTo, imf:continuousQualifier, imf:designQualifier, imf:externalReference, imf:functionAspect, imf:hasAttribute, imf:hasAttributeQualifier, imf:hasTerminalQualifier, imf:hierachicalRelation, imf:inputFlow, imf:installedAspect, imf:locationAspect, imf:maximumQualifier, imf:measuredQualifier, imf:medium, imf:minimumQualifier, imf:nominalQualifier, imf:normalQualifier, imf:operatingQualifier, imf:outputFlow, imf:partOf, imf:productAspect, imf:property, imf:specifiedQualifier, imf:symbol, imf:theConnected, imf:thePart, imf:theWhole, imf:uom, imf:value

 - IRIs present only in previous version :: ns3:imf-vocabulary, imf:FunctionAspect, imf:FunctionAspectElement, imf:FunctionInterfacePoint, imf:InstalledAspect, imf:InstalledAspectElement, imf:InstalledInterfacePoint, imf:InterAspectRelation, imf:InterfacePoint, imf:LocationAspect, imf:LocationAspectElement, imf:LocationInterfacePoint, imf:ProductAspect, imf:ProductAspectElement, imf:ProductInterfacePoint, imf:System, imf:SystemElement, imf:fulfilledBy, imf:fulfills, imf:isConnectedTo, imf:isPartOf, imf:memberOf

""" ;
    # cc:licence 
    # skos:scopeNote ## add description of ontology

    skos:editorialNote 
      "On versioning. Versions of this ontology and other semantic web resources are published an URL following this schema:  http://ns.imfid.org/[yyyy-mm-dd]/[resource-name]" ,
      "On statuses. All terms in the ontology are given a status using the 'term_status' property from the 'Term-centric Semantic Web Vocabulary Annotations' vocabulary (https://www.w3.org/2003/06/sw-vocab-status/note.html), and one of the values 'unstable', 'testing', 'stable' and 'archaic'. In this version of the ontology the highest status is 'testing'. Terms that are 'unstable' contain also this word in their label." ,
      """References to external vocabularies used by this ontology:
- SKOS: https://www.w3.org/TR/skos-primer/ ;
- VANN: https://vocab.org/vann/ ;
- PAV: https://pav-ontology.github.io/pav/ ;
""" ,
      """On naming conventions. 
- Classes use UpperCamelCase;
- Properties use lowerCamelCase, where
   - object properties between IMF Classes usually start with a verb, e.g., ~has~,
   - object properties for reified properties start with ~the~,
   - object properties to external libraries, datatype properties, and annotation properties do not start with a verb;
 - Individuals use lowerCamelCase.
""" ,
      "On definitions. When referring to terms in the ontology, the following format is used: [prefLabel], where prefLabel is set by the property skos:prefLabel."

    skos:editoralNote """Automatic validation:

Result of validating RDF data <out/owl/imf.owl.ttl> against SHACL shape <http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl>:

Conforms


    """

    .

_:mgs foaf:name "Martin G. Skj√¶veland" .
_:aw  foaf:name "Arild Waaler" .
_:ef  foaf:name "Erlend Fj√∏sna" .


imf:externalReference a owl:ObjectProperty ;
    skos:prefLabel "external reference" ;
    vs:term_status "testing" ;
    skos:definition "[external reference] is a generic relation that relates a resource *X* to a resource in an external ontology or reference data library for added semantic description of *X*." ;
    skos:changeNote 
      "0.2.0 :: Added" ;
    vann:termGroup "generic relations" ;
.

imf:hierarchicalRelation a owl:ObjectProperty ;
    skos:prefLabel "hierarchical relation";
    vs:term_status "testing" ;
    skos:definition "[hierarchical relation] is a generic relation that relates resources in a hierarchical or tree-shaped structure." ;
    rdfs:seeAlso <https://en.wikipedia.org/wiki/Tree_(data_structure)> ;
    skos:changeNote 
      "0.1.0 :: Added" ;
    vann:termGroup "generic relations" ;
    a owl:IrreflexiveProperty ;
    rdfs:subPropertyOf skos:semanticRelation ;
    
    .

imf:associativeRelation a owl:ObjectProperty ;
    skos:prefLabel "associative relation";
    vs:term_status "testing" ;
    skos:definition "[associative relation] is a generic relation that relates resources in an associative (or non-hierarchical) structure." ;
    skos:changeNote 
      "0.1.0 :: Added" ;
    vann:termGroup "generic relations" ;
    rdfs:subPropertyOf skos:related ;
    owl:propertyDisjointWith imf:hierachicalRelation ;
    
    .

imf:Element a owl:Class ;
  skos:prefLabel "Element" ;
  vs:term_status "testing" ;
  skos:definition "An [Element] represents an abstraction over a system or a system element as per ISO/IEC/IEEE 15288." ;
  skos:scopeNote "Avoid direct instantiation of [Element], use instead one of its subclasses." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
. 

# In anticipation of more direct subclasses, this is commented out:
#[] ottr:of o-owl-ma:ClassPartition ;
#   ottr:values ( imf:Element ( imf:Block imf:Terminal ) ) .

imf:Block a owl:Class ;
  skos:prefLabel "Block" ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  skos:definition "A [block] is an [element] that ???"
  .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values (imf:Block imf:partOf imf:Block) .

imf:Terminal a owl:Class ;
  skos:prefLabel "Terminal" ;
  skos:altLabel "Port", "Channel", "Input/Output" ;
  vs:term_status "testing" ;
  skos:definition "A [Terminal] is an [Element] that represents a point of interaction or communication for a given [Block] (through the relation [has terminal]), and hence specifies an input and/or output that the [Block] produces and/or receives." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values (imf:Terminal imf:partOf imf:Terminal) .

imf:hasTerminal a owl:ObjectProperty ;
  skos:prefLabel "has terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has terminal] is an [associative relation] and an [intra-aspect relation] that relates a [Block] *B* to a [Terminal] *T* to specify that *T* is a terminal of, or belongs to, *B*. [has terminal] is an inverse functional property which means that a [Terminal] may only belong to one [Block]." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:InverseFunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  rdfs:domain imf:Block ;
  rdfs:range imf:Terminal ;
  .

[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values (imf:Terminal [ owl:inverseOf imf:hasTerminal ] imf:Block ) .

imf:TerminalQualifier a owl:Class ;
  skos:prefLabel "Terminal Qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[Terminal Qualifier] is a feature or characteristic of a [Terminal]." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  .

imf:inputFlow a owl:NamedIndividual, imf:TerminalQualifier ;
  skos:prefLabel "input flow" ;
  vs:term_status "testing" ;
  skos:definition "[input flow] is a [Terminal Qualifier] that indicates that the flow is incoming to the [Terminal] it qualifies." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
.

imf:outputFlow a owl:NamedIndividual, imf:TerminalQualifier ;
  skos:prefLabel "output flow" ;
  vs:term_status "testing" ;
  skos:definition "[output flow] is a [Terminal Qualifier] that indicates that the flow is outgoing from the [Terminal] it qualifies." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  .

[] ottr:of o-owl-ax:DifferentIndividuals ;
   ottr:values ( ( imf:inputFlow imf:outputFlow ) ) .

imf:hasTerminalQualifier a owl:ObjectProperty ;
  skos:prefLabel "has terminal qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[has terminal qualifier] relates a [Terminal] *T* to a [Terminal Qualifier] *Q* to specify that *T* has the qualifier *Q*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:domain imf:Terminal ;
  rdfs:range imf:TerminalQualifier .

imf:InputTerminal a owl:Class ;
  skos:prefLabel "Input Terminal" ;
  skos:altLabel "Input" ;
  vs:term_status "testing" ;
  skos:definition "An [Input Terminal] is a [Terminal] that accepts input (and not output)." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Terminal ;
  .

[] ottr:of o-owl-ax:EquivHasValue ;
   ottr:values ( imf:InputTerminal imf:hasTerminalQualifier imf:inputFlow ) .

imf:OutputTerminal a owl:Class ;
  skos:prefLabel "Output Terminal" ;
  skos:altLabel "Output" ;
  vs:term_status "testing" ;
  skos:definition "An [Output Terminal] is a [Terminal] that accepts output (and not input)." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Terminal ;
  .

[] ottr:of o-owl-ax:EquivHasValue ;
   ottr:values ( imf:OutputTerminal imf:hasTerminalQualifier imf:outputFlow ) .

imf:hasInputTerminal a owl:ObjectProperty ;
  skos:prefLabel "has input terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has input terminal] specialises the [has terminal] property to relate [Block]s to [InputTerminal]s." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:hasTerminal ;
  rdfs:range imf:InputTerminal ;
  .

imf:hasOutputTerminal a owl:ObjectProperty ;
  skos:prefLabel "has output terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has output terminal] specialises the [has terminal] property to relate [Block]s to [Output Terminal]s." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:hasTerminal ;
  rdfs:range imf:OutputTerminal ;
  .

skos:notation a owl:DatatypeProperty ;
  skos:scopeNote "From the SKOS reference: 'A notation is a string of characters such as \"T58.5\" or \"303.4833\" used to uniquely identify a concept within the scope of a given concept scheme.' Use skos:notation to set a RDS string."
  .

imf:symbol a owl:AnnotationProperty ;
  skos:prefLabel "symbol" ;
  vs:term_status "testing" ;
  skos:definition "[symbol] associates a resource *X* with a typical graphical representation of *X*." ;
  skos:changeNote "0.2.0 :: Added" ;
  vann:termGroup "aspects" ;
  .

imf:partOf a owl:ObjectProperty;
  skos:prefLabel "part of" ;
  skos:altLabel "has parent" ;
  vs:term_status "testing" ;
  skos:definition "[part of] is a [hierarchical relation] and an [intra-aspect relation] that relates an [Element] *E1* and an [Element] *E2* to specify that *E1* is part of *E2*, or equivalently that *E2* has *E1* as a part. [part of] is used to specify a breakdown hierarchy of [Element]s." ;
  skos:scopeNote "\"An [Element] may only have one 'parent'\": [part of] is functional and irreflexive property which means that any [Element] may only be part of one other [Element], that is: an [Element] may not be part of multiple [Element]s and it may not be part of itself." ; 
  skos:changeNote 
    "0.1.0 :: Added" ,
    "0.2.0 :: Changed: IRI from imf:isPartOf to imf:partOf." ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  a owl:IrreflexiveProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:broader ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  .

imf:hasPart a owl:ObjectProperty ;
  skos:prefLabel "has part";
  skos:altLabel "has child";
  vs:term_status "testing" ;
  skos:definition "[has part] is a [hierarchical relation] and an [intra-aspect relation] that is the inverse relation of [part of]." ;
  skos:scopeNote "Use [has part] when you want to specify the [Element]s that are part of an [Element] *E* \"on *E*\", rather than using the inverse property [part of] to state that the [part of] relationship to *E* for every [Element] that is part of *E*." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:narrower ;
  owl:inverseOf imf:partOf ;
  .

imf:connectedTo a owl:ObjectProperty ;
  skos:prefLabel "connected to" ;
  vs:term_status "testing" ;
  skos:definition "[connected to] is an [associative relation] and an [intra-aspect relation] that relates a [Terminal] *T1* to a [Terminal] *T2* to specify that *T1* is connected to *T2*. [connected to] specifies a topology of [Element]s by relating the [Terminal]s of [Block]s and hence describes how [Block]s are interconnected and indicates how they interact." ;
  skos:scopeNote "[connected to] is a 1-1 relationship: a [Terminal] may only be [connected to] one other [Terminal], that is, a [Terminal] may not be [connected to] multiple [Terminal]s and it may not be [connected to] itself." ;
  skos:changeNote 
    "0.1.0 :: Added" ,
    "0.2.0 :: Changed IRI from imf:isConnectedTo to imf:connectedTo." ;
  skos:editorialNote "Should connectedTo be symmetric?" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  a owl:InverseFunctionalProperty ;
  a owl:IrreflexiveProperty ; 
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  rdfs:domain imf:Terminal ;
  rdfs:range imf:Terminal ;
  .

imf:classifier a owl:ObjectProperty ;
  skos:prefLabel "classifier" ;
  vs:term_status "testing" ;
  skos:definition "[classifier] is an [external reference] that relates an [Element] *E* to a resource *X* in an external ontology or reference data library such that *X* classifies *E* -- or equivalently, *E* is an instance of *X*." ;
  skos:example "[classifier] is used to relate a [Block] that is specified to perform a pumping function to the external resource PUMPING <https://data.posccaesar.org/rdl/RDS9657917>. We then say that the [Block] is classified by PUMPING, or that the [Block] is an instance of PUMPING." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:externalReference ;
  .

imf:medium a owl:ObjectProperty  ;
  skos:prefLabel "medium" ;
  vs:term_status "testing" ;
  skos:definition "[medium] is an [external reference] that relates a [Terminal] *T* to a resource *X* to specify that *X* is the medium that flows through *T*." ;
  skos:example """[medium] is typically used to relate a [Terminal] to an resource that specifies one of the following:
 Material (Fluid, Solids),
 Energy (Mechanical, Electrical, Thermal),
 Force (Mechanical),
 Information(Electrical, Optical, Wireless)
""" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Terminal ;
  .


imf:BreakdownPoint a owl:Class ;
  skos:prefLabel "Breakdown Point (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

imf:thePart a owl:ObjectProperty ;
  skos:prefLabel "the part (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  skos:editorialNote "Is [thePart] and [theWhole] associative, hierachical or none?" ; 
  rdfs:domain imf:BreakdownPoint ;
  rdfs:range imf:Element .

imf:theWhole a owl:ObjectProperty ;
  skos:prefLabel "the whole (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  rdfs:domain imf:BreakdownPoint ;
  rdfs:range imf:Element .

[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values ( imf:BreakdownPoint imf:thePart imf:Element ) .
[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values ( imf:BreakdownPoint imf:theWhole imf:Element ) .

### Problem: gives non-simple property
#imf:partOf a owl:ObjectProperty ;
#  owl:propertyChainAxiom ( [ owl:inverseOf imf:thePart ] imf:theWhole ) .


imf:ConnectionPoint a owl:Class ;
  skos:prefLabel "Connection Point (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

imf:theConnected a owl:ObjectProperty ;
  skos:prefLabel "the connected (unstable)" ;
  vs:term_status "unstable" ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:domain imf:ConnectionPoint ;
  rdfs:range imf:Terminal . 

[] ottr:of o-owl-ax:SubObjectExactCardinality ;
   ottr:values( imf:ConnectionPoint "2"^^xsd:nonNegativeInteger imf:theConnected imf:Element ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values( imf:ConnectionPoint "1"^^xsd:nonNegativeInteger imf:theInput imf:Element ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values( imf:ConnectionPoint "1"^^xsd:nonNegativeInteger imf:theOutput imf:Element ) .

imf:theInput a owl:ObjectProperty ;
  skos:prefLabel "the input (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:theConnected ;
  rdfs:range imf:OutputTerminal . 

imf:theOutput a owl:ObjectProperty ;
  skos:prefLabel "the output (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:theConnected ;
  rdfs:range imf:InputTerminal .

### Problem: gives non-simple property
#imf:connectedTo a owl:ObjectProperty ;
#  owl:propertyChainAxiom ( imf:theOutput [ owl:inverseOf imf:theInput ] ) .

imf:AspectElement a owl:Class ;
  skos:prefLabel "Aspect Element";
  skos:definition "An [Aspect Element] is an [Element] that has exactly one [Aspect]." ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;

  # an aspect element is an element with an aspect:
  owl:equivalentClass [
    rdf:type owl:Class ;
    owl:intersectionOf ( 
      imf:Element
      [ rdf:type owl:Restriction ;
        owl:onProperty imf:hasAspect ;
        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onClass imf:Aspect 
      ]
  ) ] 
  .

imf:hasAspect a owl:ObjectProperty ;
  skos:prefLabel "has aspect" ;
  vs:term_status "testing" ;
  skos:definition "[has aspect] is a relation from an [Element] *E* to an [Aspect] *A* that specfies that *E* has the [Aspect] *A*." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Aspect .

imf:Aspect a owl:Class ;
  skos:prefLabel "Aspect" ;
  vs:term_status "testing" ;
  skos:definition """
  An [Aspect] describes a context for interpreting [Element]s. An [Aspect] specifies a /perspective/, an /interest/, and a /modality/. 
  /Perspective/ refers to from which viewpoint the [Element] is interpreted.
  /Interest/ refers to the scope for which the information is intended used.
  /Modality/ refers to the form in which information is recorded.
""" ;
  skos:scopeNote "Aspect is a core concept of ISO/IEC 81346 and the IMF ontology includes aspects that are found in ISO/IEC 81346: function, location and product. We anticipate that more aspects will be added to support future modelling needs." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  .

imf:prefix a owl:AnnotationProperty ;
  skos:prefLabel "prefix" ;
  vs:term_status "testing" ;
  skos:definition "[prefix] is a relation from an [Aspect] *A* to a string *s* to specify that *s* is the prefix associated with *A*. Such prefix strings are typically used for identifying the aspect when constructing reference designation system (RDS) identifiers." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Aspect ;
  rdfs:range xsd:string ;
  .

imf:color a owl:AnnotationProperty ;
  skos:prefLabel "color" ;
  vs:term_status "testing" ;
  skos:definition "[color] is a relation from a resource *X* to a string identifying a hexadecimal color *c* to specify that the *c* is a color that is associated with *A*.";
  skos:scopeNote "[Aspect]s are often associated with a distinct color, which is used in graphical presentations of IMF models." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:range xsd:string
  .


[] ottr:of o-imf:Aspect ;
   ottr:values( imf:functionAspect 'function' '=' '#FFFF00' '[function aspect] is an [Aspect] about the intended activity of [Element]s, i.e., the activity an [Element] perfoms or is designed to bring about. [function aspect] has /perspective/ \"Activity\", /interest/ \"System design\", and /modality/ \"Specification\".' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:locationAspect 'location' '+' '#FF00FF' '[location aspect] is an [Aspect] about the spatial envelope (e.g., geometry, size and shape) of [Element]s. [location aspect] has /perspective/ \"Location\", /interest/ \"Geometry and Position\", and /modality/ \"Specification\".' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:productAspect 'product' '-' '#00FFFF' '[product aspect] is an [Aspect] about the specification of a (physical) solution/implementation of [Element]s. [product aspect] has /perspective/ \"Artefact\", /interest/ \"Built\", and /modality/ \"Specification\".' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:installedAspect 'installed' '::' '#0000FF' '[installed aspect] is an [Aspect] about the information of [element] instances. [installed aspect] has /perspective/ \"Artefact\", /interest/ \"Built\", and /modality/ \"Description of individual\".' ) . 

[] ottr:of o-owl-ax:DifferentIndividuals ;
   ottr:values( ( imf:functionAspect imf:locationAspect imf:productAspect imf:installedAspect ) ) . 

[] ottr:of o-imf:AspectClass ;
   ottr:values( imf:FunctionElement imf:functionAspect ) . 
[] ottr:of o-imf:AspectClass ;
   ottr:values( imf:LocationElement imf:locationAspect ) . 
[] ottr:of o-imf:AspectClass ;
   ottr:values( imf:ProductElement imf:productAspect ) . 
[] ottr:of o-imf:AspectClass ;
   ottr:values( imf:InstalledElement imf:installedAspect ) . 

[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:FunctionBlock imf:FunctionElement imf:Block ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:FunctionTerminal imf:FunctionElement imf:Terminal ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:LocationBlock imf:LocationElement imf:Block ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:LocationTerminal imf:LocationElement imf:Terminal ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:ProductBlock imf:ProductElement imf:Block ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:ProductTerminal imf:ProductElement imf:Terminal ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:InstalledBlock imf:InstalledElement imf:Block ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:InstalledTerminal imf:InstalledElement imf:Terminal ) . 

[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:asFunction imf:FunctionElement ) . 
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:asLocation imf:LocationElement ) . 
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:asProduct imf:ProductElement ) . 
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:asInstalled imf:InstalledElement ) . 



imf:intraAspectRelation a owl:ObjectProperty ;
  skos:prefLabel "intra-aspect relation" ;
  skos:definition "[intra-aspect relation] a generic relation between [Element]s *E1* and *E2* such that *E1* and *E2* share at least one [Aspect]." ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  .

#[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
#   ottr:values ( imf:AspectElement imf:intraAspectRelation imf:AspectElement ) .

imf:interAspectRelation a owl:ObjectProperty ;
  skos:prefLabel "inter-aspect relation" ;
  skos:definition "[inter-aspect relation] a generic relation between [Element]s *E1* and *E2* such that *E1* and *E2* do not share any [Aspect]s." ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  owl:propertyDisjointWith imf:intraAspectRelation ;
  .

imf:Attribute a owl:Class ;
  skos:prefLabel "Attribute" ;
  vs:term_status "testing" ;
  skos:definition "An [Attribute] describes a quality or characteristic of a resource by setting a [property], a [value], and optionally a [unit of measure]." ;
  skos:example "Color: red" , "Weight: 1250 kg" , "Maximum ambient operating temperature: 120 K" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  .

imf:hasAttribute a owl:ObjectProperty ;
  skos:prefLabel "has attribute" ;
  vs:term_status "testing" ;
  skos:definition "[has attribute] is a relation between an [Element] *E* and an [Attribute] *A* that specifies that *E* has the attribute *A*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Element ;
  rdfs:range  imf:Attribute .

imf:property a owl:ObjectProperty ;
  skos:prefLabel "property" ;
  vs:term_status "testing" ;
  skos:definition "[property] is an [external reference] that relates an [Attribute] *A* to a resource *X* to specify that *A* has the property *X*." ;
  skos:example "The [property] of an [Attribute] \"Weight: 1250 kg\" could be specified as WEIGTH <http://data.posccaesar.org/rdl/RDS356894>." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Attribute .

imf:uom a owl:ObjectProperty ;
  skos:prefLabel "unit of measure" ;
  skos:altLabel "uom" ;
  vs:term_status "testing" ;
  skos:definition "[unit of measure] is an [external reference] that relates an [Attribute] *A* to a resource *X* to specify that *A* has the unit of measure *X*." ;
  skos:example "The [unit of measure] of an [Attribute] \"Weight: 1250 kg\" could be specified as KILOGRAM <http://data.posccaesar.org/rdl/RDS1328669>." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Attribute .

imf:value a owl:DatatypeProperty ;
  skos:prefLabel "value" ;
  vs:term_status "testing" ;
  skos:definition "[value] relates an [Attribute] *A* to literal value *v* to specify that *A* has the value *v*." ;
  skos:example "The [value] of an [Attribute] \"Weight: 1250 kg\" could be specified as the literal \"1250\"^^xsd:integer (or using a different appropriate literal datatype)." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Attribute 
.

#imf:AttributeGroup a owl:Class ;
#  skos:prefLabel "Attribute Group" ;
#  vs:term_status "testing" ;
#  skos:definition "An [Attribute Group] is a collection of [Attribute]s which are typically grouped for convenience as they describe closely related features or characteristics of a resource." ;
#  skos:example "The physical dimensions of a product, e.g., its length, width and height, could be grouped by an [Attribute Group]." ;
#  skos:editorialNote "Does an [Attribute Group] add any semantics? -- what is the difference from an [Attribute Group] and an [Element] with [Attribute]s?" ;
#  skos:changeNote 
#    "0.2.0 :: Added" ;
#  .
#
#imf:hasAttributeGroup a owl:ObjectProperty ;
#  skos:prefLabel "has attribute group" ;
#  vs:term_status "testing" ;
#  skos:definition "[has attribute group] is a relation between a resource *X* and an [Attribute Group] *A* that specifies that *X* has the attribute group *A*." ;
#  skos:editorialNote "See comment on [Attribute Group], does [has attribute group] represent a \"long-hand property\" meaning that attaching the Attributes of the Attribute Group directly is equivalent? Perhaps the functionality of [Attribute Group]s is best realised as aspect-less-types?" ;
#  skos:changeNote 
#    "0.2.0 :: Added" ;
#  rdfs:range imf:AttributeGroup .

imf:AttributeQualifier a owl:Class ;
  skos:prefLabel "Attribute Qualifier" ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  .

imf:hasAttributeQualifier a owl:ObjectProperty ;
  skos:prefLabel "has attribute qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[has attribute qualifier] is a relation between an [Attribute] *A* and an [Attribute Qualifier] *Q* to specify that *A* is qualified by *Q*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Attribute ;
  rdfs:range  imf:AttributeQualifier .

imf:ProvenanceQualifier a owl:Class ;
  skos:prefLabel "Provenance Qualifier" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:calculatedQualifier a owl:NamedIndividual ;
  skos:prefLabel "calculated" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:measuredQualifier a owl:NamedIndividual ;
  skos:prefLabel "measured" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:specifiedQualifier a owl:NamedIndividual ;
  skos:prefLabel "specified" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

[] ottr:of o-imf:AttributeQualifier ;
   ottr:values( imf:ProvenanceQualifier (imf:calculatedQualifier imf:measuredQualifier imf:specifiedQualifier) ) . 

imf:RangeQualifier a owl:Class ;
  skos:prefLabel "Range Qualifier" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:averageQualifier a owl:NamedIndividual ;
  skos:prefLabel "average" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:maximumQualifier a owl:NamedIndividual ;
  skos:prefLabel "maximum" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:minimumQualifier a owl:NamedIndividual ;
  skos:prefLabel "minimum" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:nominalQualifier a owl:NamedIndividual ;
  skos:prefLabel "nominal" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:normalQualifier a owl:NamedIndividual ;
  skos:prefLabel "normal" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

[] ottr:of o-imf:AttributeQualifier ;
   ottr:values( imf:RangeQualifier (imf:averageQualifier imf:maximumQualifier imf:minimumQualifier imf:nominalQualifier imf:normalQualifier) ) . 

imf:RegularityQualifier a owl:Class ;
  skos:prefLabel "Regularity Qualifier" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:absoluteQualifier a owl:NamedIndividual ;
  skos:prefLabel "absolute" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:continuousQualifier a owl:NamedIndividual ;
  skos:prefLabel "continuous" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

[] ottr:of o-imf:AttributeQualifier ;
   ottr:values( imf:RegularityQualifier (imf:absoluteQualifier imf:continuousQualifier) ) . 

imf:ScopeQualifier a owl:Class ;
  skos:prefLabel "Scope Qualifier" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:designQualifier a owl:NamedIndividual ;
  skos:prefLabel "design" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

imf:operatingQualifier a owl:NamedIndividual ;
  skos:prefLabel "operating" ;
  vs:term_status "testing" ;
  #skos:definition "";
  skos:changeNote
     "0.2.0 :: Added" ;
  vann:termGroup "attributes";
.

[] ottr:of o-imf:AttributeQualifier ;
   ottr:values( imf:ScopeQualifier (imf:designQualifier imf:operatingQualifier) ) . 


[] ottr:of o-owl-ax:DisjointClasses ;
   ottr:values( ( imf:ProvenanceQualifier imf:RangeQualifier imf:RegularityQualifier imf:ScopeQualifier ) ) . 

#+end_example

*** _includes                                                      :noexport:
#+NAME: owl-imf-ontology-all-includes
#+BEGIN_SRC ttl :noweb yes
<<owl-main-genericrelations>>

<<owl-elements-element>>

<<owl-elements-block>>

<<owl-elements-terminal>>

<<owl-elements-direction>>

<<owl-elements-inputoutputTerminal>>

<<owl-elements-annotations>>

<<owl-elements-relations-partof>>

<<owl-elements-relations-connectedTo>>

<<owl-elements-relations-classifier>>

<<owl-elements-relations-hasmedium>>

<<owl-elements-reifieds-breakdownpoint>>

<<owl-elements-reifieds-connectionpoint>>

<<owl-aspects-aspectelement>>

<<owl-aspects-aspect>>

<<py_aspect_ottr_instances_aspects()>>

<<owl-aspects-relations>>

<<owl-attributes-value>>

#<<owl-attributes-group>>

<<owl-attributes-qualifier>>

<<py_aspect_ottr_qualifiers()>>

#+END_SRC

** Model and Identified's                                              :todo:

#+NAME: overview-model-versioning
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-model-versioning.png
<<plantuml-style>>

stereotype Identified {
 id :
 name : string
 description : string
}

stereotype Metadata {
 version : string
 created : date
 createdBy : string
 lastUpdated : date
 updatedBy : string
}

class Model << Identified >>
abstract class Element << Identified >>

Model o--> "*" Element
#+END_SRC

*** Metadata properties

#+NAME: owl-elements-annotations
#+BEGIN_SRC ttl
skos:notation a owl:DatatypeProperty ;
  skos:scopeNote "From the SKOS reference: 'A notation is a string of characters such as \"T58.5\" or \"303.4833\" used to uniquely identify a concept within the scope of a given concept scheme.' Use skos:notation to set a RDS string."
  .

imf:symbol a owl:AnnotationProperty ;
  skos:prefLabel "symbol" ;
  vs:term_status "testing" ;
  skos:definition "[symbol] associates a resource *X* with a typical graphical representation of *X*." ;
  skos:changeNote "0.2.0 :: Added" ;
  vann:termGroup "aspects" ;
  .
#+END_SRC

#+NAME: shacl-elements-annotations
#+BEGIN_SRC ttl
imf:ElementShape a sh:NodeShape ;
  sh:targetClass imf:Element , imf:Block , imf:Terminal ;
  sh:property 
    [ sh:path skos:prefLabel ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "Element has no prefLabel" ] ,
    [ sh:path imf:classifier ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "Element has no classifier" ]
.
#+END_SRC


#+RESULTS: overview-model-versioning
[[file:out/img/imf-overview-model-versioning.png]]


** Structural relations

The following scope note is put on all following top-level relations:
#+NAME: owl-main-generitrelation-scope-note
#+BEGIN_SRC ttl
skos:scopeNote "This is a generic property that is not intended to be used directly, rather use one of its subproperties. Generic properites like this are introduced to add structure to the properties of the ontology, and to be able to express generic class constraints."
#+END_SRC

#+NAME: owl-main-genericrelations
#+BEGIN_SRC ttl :noweb strip-export

imf:externalReference a owl:ObjectProperty ;
    skos:prefLabel "external reference" ;
    vs:term_status "testing" ;
    skos:definition "[external reference] is a generic relation that relates a resource *X* to a resource in an external ontology or reference data library for added semantic description of *X*." ;
    skos:changeNote 
      "0.2.0 :: Added" ;
    vann:termGroup "generic relations" ;
.

imf:hierarchicalRelation a owl:ObjectProperty ;
    skos:prefLabel "hierarchical relation";
    vs:term_status "testing" ;
    skos:definition "[hierarchical relation] is a generic relation that relates resources in a hierarchical or tree-shaped structure." ;
    rdfs:seeAlso <https://en.wikipedia.org/wiki/Tree_(data_structure)> ;
    skos:changeNote 
      "0.1.0 :: Added" ;
    vann:termGroup "generic relations" ;
    a owl:IrreflexiveProperty ;
    rdfs:subPropertyOf skos:semanticRelation ;
    <<owl-top-toprelation-scope-note>>
    .

imf:associativeRelation a owl:ObjectProperty ;
    skos:prefLabel "associative relation";
    vs:term_status "testing" ;
    skos:definition "[associative relation] is a generic relation that relates resources in an associative (or non-hierarchical) structure." ;
    skos:changeNote 
      "0.1.0 :: Added" ;
    vann:termGroup "generic relations" ;
    rdfs:subPropertyOf skos:related ;
    owl:propertyDisjointWith imf:hierachicalRelation ;
    <<owl-top-toprelation-scope-note>>
    .
#+END_SRC

** Elements

#+NAME: overview-instances
#+BEGIN_SRC plantuml :noweb yes :file out/owl/imf-overview-elements.png
<<plantuml-style>>

abstract class Element << Identified >> {
  notation : 0..1 
  symbol : 0..1
}

class Block
class Terminal

class RDLItem << RDL >>
class Medium << RDL >>

enum TerminalQualifier {
 inputFlow
 outputFlow
}

Element "*" --> "*" RDLItem : classifier

' subclasses
Element <|-- Block
Element <|-- Terminal

' relations
Block "1" --> "*" Terminal : hasTerminal
Terminal "*" --> "0..1" Medium : medium
Terminal "*" --> "0..*" TerminalQualifier : hasTerminalQualifier

Element "1" <-- "*" Element : partOf
Terminal "1" --> "1" Terminal : connectedTo
#+END_SRC

#+ATTR_LATEX: :width 8cm
#+RESULTS: overview-instances
[[file:out/owl/imf-overview-elements.png]]

*** ~Element~

#+NAME: owl-elements-element
#+BEGIN_SRC ttl
imf:Element a owl:Class ;
  skos:prefLabel "Element" ;
  vs:term_status "testing" ;
  skos:definition "An [Element] represents an abstraction over a system or a system element as per ISO/IEC/IEEE 15288." ;
  skos:scopeNote "Avoid direct instantiation of [Element], use instead one of its subclasses." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  foaf:depiction <./imf-overview-elements.png> ;
. 

# In anticipation of more direct subclasses, this is commented out:
#[] ottr:of o-owl-ma:ClassPartition ;
#   ottr:values ( imf:Element ( imf:Block imf:Terminal ) ) .
#+END_SRC

*** ~partOf~ / ~hasPart~

#+NAME: owl-elements-relations-partof
#+BEGIN_SRC ttl
imf:partOf a owl:ObjectProperty;
  skos:prefLabel "part of" ;
  skos:altLabel "has parent" ;
  vs:term_status "testing" ;
  skos:definition "[part of] is a [hierarchical relation] and an [intra-aspect relation] that relates an [Element] *E1* and an [Element] *E2* to specify that *E1* is part of *E2*, or equivalently that *E2* has *E1* as a part. [part of] is used to specify a breakdown hierarchy of [Element]s." ;
  skos:scopeNote "\"An [Element] may only have one 'parent'\": [part of] is functional and irreflexive property which means that any [Element] may only be part of one other [Element], that is: an [Element] may not be part of multiple [Element]s and it may not be part of itself." ; 
  skos:changeNote 
    "0.1.0 :: Added" ,
    "0.2.0 :: Changed: IRI from imf:isPartOf to imf:partOf." ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  a owl:IrreflexiveProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:broader ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  .

imf:hasPart a owl:ObjectProperty ;
  skos:prefLabel "has part";
  skos:altLabel "has child";
  vs:term_status "testing" ;
  skos:definition "[has part] is a [hierarchical relation] and an [intra-aspect relation] that is the inverse relation of [part of]." ;
  skos:scopeNote "Use [has part] when you want to specify the [Element]s that are part of an [Element] *E* \"on *E*\", rather than using the inverse property [part of] to state that the [part of] relationship to *E* for every [Element] that is part of *E*." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:narrower ;
  owl:inverseOf imf:partOf ;
  .
#+END_SRC

*** ~classifier~

#+NAME: owl-elements-relations-classifier
#+BEGIN_SRC ttl
imf:classifier a owl:ObjectProperty ;
  skos:prefLabel "classifier" ;
  vs:term_status "testing" ;
  skos:definition "[classifier] is an [external reference] that relates an [Element] *E* to a resource *X* in an external ontology or reference data library such that *X* classifies *E* -- or equivalently, *E* is an instance of *X*." ;
  skos:example "[classifier] is used to relate a [Block] that is specified to perform a pumping function to the external resource PUMPING <https://data.posccaesar.org/rdl/RDS9657917>. We then say that the [Block] is classified by PUMPING, or that the [Block] is an instance of PUMPING." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:externalReference ;
  .
#+END_SRC

*** ~Block~

#+NAME: owl-elements-block
#+BEGIN_SRC ttl
imf:Block a owl:Class ;
  skos:prefLabel "Block" ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  skos:definition "A [block] is an [element] that ???"
  .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values (imf:Block imf:partOf imf:Block) .
#+END_SRC

#+NAME: shacl-elements-block
#+BEGIN_SRC ttl
imf:BlockShape a sh:NodeShape ;
  sh:targetClass imf:Block ;
  sh:targetSubjectsOf imf:hasTerminal ;
  sh:property 
    [ sh:path imf:hasTerminal ; sh:class imf:Terminal ] ,
    [ sh:path imf:hasTerminal ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "The Block has no Terminal." ] ,     
    [ sh:path imf:partOf ; sh:maxCount 1 ; sh:class imf:Block ]
.
#+END_SRC

*** ~Terminal~

#+NAME: owl-elements-terminal
#+BEGIN_SRC ttl
imf:Terminal a owl:Class ;
  skos:prefLabel "Terminal" ;
  skos:altLabel "Port", "Channel", "Input/Output" ;
  vs:term_status "testing" ;
  skos:definition "A [Terminal] is an [Element] that represents a point of interaction or communication for a given [Block] (through the relation [has terminal]), and hence specifies an input and/or output that the [Block] produces and/or receives." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values (imf:Terminal imf:partOf imf:Terminal) .

imf:hasTerminal a owl:ObjectProperty ;
  skos:prefLabel "has terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has terminal] is an [associative relation] and an [intra-aspect relation] that relates a [Block] *B* to a [Terminal] *T* to specify that *T* is a terminal of, or belongs to, *B*. [has terminal] is an inverse functional property which means that a [Terminal] may only belong to one [Block]." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:InverseFunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  rdfs:domain imf:Block ;
  rdfs:range imf:Terminal ;
  .

[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values (imf:Terminal [ owl:inverseOf imf:hasTerminal ] imf:Block ) .
#+END_SRC

#+NAME: shacl-elements-terminal
#+BEGIN_SRC ttl
imf:TerminalShape a sh:NodeShape ;
  sh:targetClass imf:Terminal , imf:InputTerminal , imf:OutputTerminal ;
  sh:targetSubjectsOf imf:connectedTo , imf:medium , imf:hasTerminalQualifier ;
  sh:targetObjectsOf imf:hasTerminal, imf:connectedTo ;
  sh:property 
    [ sh:path imf:partOf ; sh:maxCount 1 ; sh:class imf:Terminal ] ,
    [ sh:path imf:connectedTo ; sh:maxCount 1 ; sh:class imf:Terminal ] ,
    [ sh:path imf:connectedTo ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "The Terminal has no connection (to a different Terminal)." ] , 
    [ sh:path imf:hasTerminalQualifier ; sh:maxCount 1 ; sh:in ( imf:inputFlow imf:outputFlow ) ] ,
    [ sh:path imf:medium ; sh:maxCount 1 ]  ,
    [ sh:path imf:medium ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "The Terminal has no medium." ]
.
#+END_SRC

*** ~medium~

#+NAME: owl-elements-relations-hasmedium
#+BEGIN_SRC ttl
imf:medium a owl:ObjectProperty  ;
  skos:prefLabel "medium" ;
  vs:term_status "testing" ;
  skos:definition "[medium] is an [external reference] that relates a [Terminal] *T* to a resource *X* to specify that *X* is the medium that flows through *T*." ;
  skos:example """[medium] is typically used to relate a [Terminal] to an resource that specifies one of the following:
 Material (Fluid, Solids),
 Energy (Mechanical, Electrical, Thermal),
 Force (Mechanical),
 Information(Electrical, Optical, Wireless)
""" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Terminal ;
  .
#+END_SRC

*** ~connectedTo~

#+NAME: owl-elements-relations-connectedTo
#+BEGIN_SRC ttl
imf:connectedTo a owl:ObjectProperty ;
  skos:prefLabel "connected to" ;
  vs:term_status "testing" ;
  skos:definition "[connected to] is an [associative relation] and an [intra-aspect relation] that relates a [Terminal] *T1* to a [Terminal] *T2* to specify that *T1* is connected to *T2*. [connected to] specifies a topology of [Element]s by relating the [Terminal]s of [Block]s and hence describes how [Block]s are interconnected and indicates how they interact." ;
  skos:scopeNote "[connected to] is a 1-1 relationship: a [Terminal] may only be [connected to] one other [Terminal], that is, a [Terminal] may not be [connected to] multiple [Terminal]s and it may not be [connected to] itself." ;
  skos:changeNote 
    "0.1.0 :: Added" ,
    "0.2.0 :: Changed IRI from imf:isConnectedTo to imf:connectedTo." ;
  skos:editorialNote "Should connectedTo be symmetric?" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  a owl:InverseFunctionalProperty ;
  a owl:IrreflexiveProperty ; 
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  rdfs:domain imf:Terminal ;
  rdfs:range imf:Terminal ;
  .
#+END_SRC

*** TerminalQualifier

#+NAME: owl-elements-direction
#+BEGIN_SRC ttl
imf:TerminalQualifier a owl:Class ;
  skos:prefLabel "Terminal Qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[Terminal Qualifier] is a feature or characteristic of a [Terminal]." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  .

imf:inputFlow a owl:NamedIndividual, imf:TerminalQualifier ;
  skos:prefLabel "input flow" ;
  vs:term_status "testing" ;
  skos:definition "[input flow] is a [Terminal Qualifier] that indicates that the flow is incoming to the [Terminal] it qualifies." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
.

imf:outputFlow a owl:NamedIndividual, imf:TerminalQualifier ;
  skos:prefLabel "output flow" ;
  vs:term_status "testing" ;
  skos:definition "[output flow] is a [Terminal Qualifier] that indicates that the flow is outgoing from the [Terminal] it qualifies." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  .

[] ottr:of o-owl-ax:DifferentIndividuals ;
   ottr:values ( ( imf:inputFlow imf:outputFlow ) ) .

imf:hasTerminalQualifier a owl:ObjectProperty ;
  skos:prefLabel "has terminal qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[has terminal qualifier] relates a [Terminal] *T* to a [Terminal Qualifier] *Q* to specify that *T* has the qualifier *Q*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:domain imf:Terminal ;
  rdfs:range imf:TerminalQualifier .
#+END_SRC

*** ~Input/OutputTerminal~

#+NAME: owl-elements-inputoutputTerminal
#+BEGIN_SRC ttl
imf:InputTerminal a owl:Class ;
  skos:prefLabel "Input Terminal" ;
  skos:altLabel "Input" ;
  vs:term_status "testing" ;
  skos:definition "An [Input Terminal] is a [Terminal] that accepts input (and not output)." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Terminal ;
  .

[] ottr:of o-owl-ax:EquivHasValue ;
   ottr:values ( imf:InputTerminal imf:hasTerminalQualifier imf:inputFlow ) .

imf:OutputTerminal a owl:Class ;
  skos:prefLabel "Output Terminal" ;
  skos:altLabel "Output" ;
  vs:term_status "testing" ;
  skos:definition "An [Output Terminal] is a [Terminal] that accepts output (and not input)." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Terminal ;
  .

[] ottr:of o-owl-ax:EquivHasValue ;
   ottr:values ( imf:OutputTerminal imf:hasTerminalQualifier imf:outputFlow ) .

imf:hasInputTerminal a owl:ObjectProperty ;
  skos:prefLabel "has input terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has input terminal] specialises the [has terminal] property to relate [Block]s to [InputTerminal]s." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:hasTerminal ;
  rdfs:range imf:InputTerminal ;
  .

imf:hasOutputTerminal a owl:ObjectProperty ;
  skos:prefLabel "has output terminal" ;
  vs:term_status "testing" ;
  skos:definition "[has output terminal] specialises the [has terminal] property to relate [Block]s to [Output Terminal]s." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:hasTerminal ;
  rdfs:range imf:OutputTerminal ;
  .
#+END_SRC

*** Association Points
**** Overview

#+NAME: overview-instances-w-reified
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-instances-w-reified.png
<<overview-instances>>

' reified relations
class BreakdownPoint
(Element, Element) .. BreakdownPoint
Element "1" <-- "1" BreakdownPoint : thePart
Element "1" <-- "1" BreakdownPoint : theWhole

class ConnectionPoint
(Terminal, Terminal) .. ConnectionPoint
Terminal "1" <-- "1" ConnectionPoint : theInput
Terminal "1" <-- "1" ConnectionPoint : theOutput
#+END_SRC

#+RESULTS: overview-instances-w-reified
[[file:out/img/imf-overview-instances-w-reified.png]]

**** ~BreakdownPoint~

#+NAME: owl-elements-reifieds-breakdownpoint
#+BEGIN_SRC ttl

imf:BreakdownPoint a owl:Class ;
  skos:prefLabel "Breakdown Point (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

imf:thePart a owl:ObjectProperty ;
  skos:prefLabel "the part (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  skos:editorialNote "Is [thePart] and [theWhole] associative, hierachical or none?" ; 
  rdfs:domain imf:BreakdownPoint ;
  rdfs:range imf:Element .

imf:theWhole a owl:ObjectProperty ;
  skos:prefLabel "the whole (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  a owl:FunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  rdfs:domain imf:BreakdownPoint ;
  rdfs:range imf:Element .

[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values ( imf:BreakdownPoint imf:thePart imf:Element ) .
[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values ( imf:BreakdownPoint imf:theWhole imf:Element ) .

### Problem: gives non-simple property
#imf:partOf a owl:ObjectProperty ;
#  owl:propertyChainAxiom ( [ owl:inverseOf imf:thePart ] imf:theWhole ) .
#+END_SRC

#+NAME: shacl-elements-breakdownpoint
#+BEGIN_SRC ttl
imf:BreakdownPointShape a sh:NodeShape ;
  sh:targetClass imf:BreakdownPoint ;
  sh:targetSubjectsOf imf:thePart , imf:theWhole ;
  sh:property 
    [ sh:path imf:thePart  ; sh:minCount 1 ; sh:maxCount 1 ; sh:class imf:Element ] ,
    [ sh:path imf:theWhole ; sh:minCount 1 ; sh:maxCount 1 ; sh:class imf:Element ] 
.
#+END_SRC

**** ~ConnectionPoint~

#+NAME: owl-elements-reifieds-connectionpoint
#+BEGIN_SRC ttl

imf:ConnectionPoint a owl:Class ;
  skos:prefLabel "Connection Point (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subClassOf imf:Element ;
  .

imf:theConnected a owl:ObjectProperty ;
  skos:prefLabel "the connected (unstable)" ;
  vs:term_status "unstable" ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:associativeRelation ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:domain imf:ConnectionPoint ;
  rdfs:range imf:Terminal . 

[] ottr:of o-owl-ax:SubObjectExactCardinality ;
   ottr:values( imf:ConnectionPoint "2"^^xsd:nonNegativeInteger imf:theConnected imf:Element ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values( imf:ConnectionPoint "1"^^xsd:nonNegativeInteger imf:theInput imf:Element ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values( imf:ConnectionPoint "1"^^xsd:nonNegativeInteger imf:theOutput imf:Element ) .

imf:theInput a owl:ObjectProperty ;
  skos:prefLabel "the input (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:theConnected ;
  rdfs:range imf:OutputTerminal . 

imf:theOutput a owl:ObjectProperty ;
  skos:prefLabel "the output (unstable)" ;
  vs:term_status "unstable" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "elements" ;
  rdfs:subPropertyOf imf:theConnected ;
  rdfs:range imf:InputTerminal .

### Problem: gives non-simple property
#imf:connectedTo a owl:ObjectProperty ;
#  owl:propertyChainAxiom ( imf:theOutput [ owl:inverseOf imf:theInput ] ) .
#+END_SRC

#+NAME: shacl-elements-connectionpoint
#+BEGIN_SRC ttl
imf:ConnectionPointShape a sh:NodeShape ;
  sh:targetClass imf:ConnectionPoint ;
  sh:targetSubjectsOf imf:theConnected , imf:theInput , imf:theOutput ;
  sh:property 
    [ sh:path imf:theInput  ; sh:maxCount 1 ; sh:class imf:Element ] ,
    [ sh:path imf:theOutput ; sh:maxCount 1 ; sh:class imf:Element ] ,
    [ sh:path imf:theConnected ; sh:maxCount 2 ; sh:class imf:Element ] 
.
#+END_SRC

** Aspects

#+NAME: overview-aspect-element
#+BEGIN_SRC plantuml :noweb yes :file out/owl/imf-overview-aspects.png
<<plantuml-style>>

abstract class AspectElement
abstract class Element

Element <|-- AspectElement

enum Aspect {
  Function
  Location
  Product
  Installed
}

AspectElement "*" --> "1" Aspect : hasAspect

Element --> Element : intraAspectRelation
Element --> Element : interAspectRelation
#+END_SRC

#+ATTR_LATEX: :width 6cm
#+RESULTS: overview-aspect-element
[[file:out/owl/imf-overview-aspects.png]]

*** ~AspectElement~

#+NAME: owl-aspects-aspectelement
#+BEGIN_SRC ttl
imf:AspectElement a owl:Class ;
  skos:prefLabel "Aspect Element";
  skos:definition "An [Aspect Element] is an [Element] that has exactly one [Aspect]." ;
  vs:term_status "testing" ;
  foaf:depiction <./imf-overview-aspects.png> ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;

  # an aspect element is an element with an aspect:
  owl:equivalentClass [
    rdf:type owl:Class ;
    owl:intersectionOf ( 
      imf:Element
      [ rdf:type owl:Restriction ;
        owl:onProperty imf:hasAspect ;
        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onClass imf:Aspect 
      ]
  ) ] 
  .

imf:hasAspect a owl:ObjectProperty ;
  skos:prefLabel "has aspect" ;
  vs:term_status "testing" ;
  skos:definition "[has aspect] is a relation from an [Element] *E* to an [Aspect] *A* that specfies that *E* has the [Aspect] *A*." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Aspect .
#+END_SRC

#+NAME: shacl-aspect-aspectelement
#+BEGIN_SRC ttl
imf:AspectElementShape a sh:NodeShape ;
  sh:targetClass imf:AspectElement ;
  sh:targetSubjectsOf imf:hasAspect ;
  sh:property 
    [ sh:path imf:hasAspect ; sh:minCount 1 ; sh:maxCount 1 ; sh:class imf:Aspect ] 
.
#+END_SRC

*** ~Aspect~

#+NAME: owl-aspects-aspect
#+BEGIN_SRC ttl
imf:Aspect a owl:Class ;
  skos:prefLabel "Aspect" ;
  vs:term_status "testing" ;
  skos:definition """
  An [Aspect] describes a context for interpreting [Element]s. An [Aspect] specifies a /perspective/, an /interest/, and a /modality/. 
  /Perspective/ refers to from which viewpoint the [Element] is interpreted.
  /Interest/ refers to the scope for which the information is intended used.
  /Modality/ refers to the form in which information is recorded.
""" ;
  skos:scopeNote "Aspect is a core concept of ISO/IEC 81346 and the IMF ontology includes aspects that are found in ISO/IEC 81346: function, location and product. We anticipate that more aspects will be added to support future modelling needs." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  .

imf:prefix a owl:AnnotationProperty ;
  skos:prefLabel "prefix" ;
  vs:term_status "testing" ;
  skos:definition "[prefix] is a relation from an [Aspect] *A* to a string *s* to specify that *s* is the prefix associated with *A*. Such prefix strings are typically used for identifying the aspect when constructing reference designation system (RDS) identifiers." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Aspect ;
  rdfs:range xsd:string ;
  .

imf:color a owl:AnnotationProperty ;
  skos:prefLabel "color" ;
  vs:term_status "testing" ;
  skos:definition "[color] is a relation from a resource *X* to a string identifying a hexadecimal color *c* to specify that the *c* is a color that is associated with *A*.";
  skos:scopeNote "[Aspect]s are often associated with a distinct color, which is used in graphical presentations of IMF models." ;
  skos:example "For examples, see the instances of [Aspect] defined in this ontology." ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:range xsd:string
  .

#+END_SRC

#+NAME: owl-aspects-relations
#+BEGIN_SRC ttl
imf:intraAspectRelation a owl:ObjectProperty ;
  skos:prefLabel "intra-aspect relation" ;
  skos:definition "[intra-aspect relation] a generic relation between [Element]s *E1* and *E2* such that *E1* and *E2* share at least one [Aspect]." ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  .

#[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
#   ottr:values ( imf:AspectElement imf:intraAspectRelation imf:AspectElement ) .

imf:interAspectRelation a owl:ObjectProperty ;
  skos:prefLabel "inter-aspect relation" ;
  skos:definition "[inter-aspect relation] a generic relation between [Element]s *E1* and *E2* such that *E1* and *E2* do not share any [Aspect]s." ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.1.0 :: Added" ;
  vann:termGroup "aspects" ;
  rdfs:domain imf:Element ;
  rdfs:range imf:Element ;
  owl:propertyDisjointWith imf:intraAspectRelation ;
  .
#+END_SRC

*** Aspects

This is the current list of aspects:

#+NAME: tbl-aspects
| Aspect, IRIs        | Prefix, string | Color, string | Definition                                                                                                                                                                                                                                                 |
|---------------------+----------------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| imf:functionAspect  | '='            | '#FFFF00'     | '[function aspect] is an [Aspect] about the intended activity of [Element]s, i.e., the activity an [Element] perfoms or is designed to bring about. [function aspect] has /perspective/ \"Activity\", /interest/ \"System design\", and /modality/ \"Specification\".' |
| imf:locationAspect  | '+'            | '#FF00FF'     | '[location aspect] is an [Aspect] about the spatial envelope (e.g., geometry, size and shape) of [Element]s. [location aspect] has /perspective/ \"Location\", /interest/ \"Geometry and Position\", and /modality/ \"Specification\".'           |
| imf:productAspect   | '-'            | '#00FFFF'     | '[product aspect] is an [Aspect] about the specification of a (physical) solution/implementation of [Element]s. [product aspect] has /perspective/ \"Artefact\", /interest/ \"Built\", and /modality/ \"Specification\".'                          |
| imf:installedAspect | '::'           | '#0000FF'     | '[installed aspect] is an [Aspect] about the information of [element] instances. [installed aspect] has /perspective/ \"Artefact\", /interest/ \"Built\", and /modality/ \"Description of individual\".'                                         |

**** Processing                                                          :QA:

#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/imf/aspects.stottr :mkdirp yes
<<prefixes>>

## This creates an individual for each of the aspects in the table.
o-imf:Aspect [owl:NamedIndividual ?aspect, xsd:string ?label, xsd:string ?symbol, xsd:string ?color, xsd:string ?definition] :: {
  o-rdf:Type(?aspect, imf:Aspect) ,
  o-rdf:Type(?aspect, owl:NamedIndividual) ,
  ottr:Triple(?aspect, imf:prefix, ?symbol),
  ottr:Triple(?aspect, imf:color, ?color),
  ottr:Triple(?aspect, skos:prefLabel, ?label),
  ottr:Triple(?aspect, skos:definition, ?definition),
  ottr:Triple(?aspect, vs:term_status, "testing"),
  ottr:Triple(?aspect, skos:changeNote, "0.1.0 :: Added"),
  ottr:Triple(?aspect, skos:changeNote, "0.2.0 :: Changed: use lowerCamelCase for localname of IRI.")
  ottr:Triple(?aspect, vann:termGroup, "aspects")
} .

o-imf:AspectClass [owl:Class ?class, owl:NamedIndividual ?aspect] :: {
  o-owl-ax:SubClassOf(?class, imf:AspectElement),  
  o-owl-ax:EquivObjectHasValue(?class, imf:hasAspect, ?aspect),
  o-owl-ax:SubObjectAllValuesFrom(?class, imf:intraAspectRelation, ?class),
  o-imf:GeneratedNote(?class)
} .

o-imf:AspectElementClass [owl:Class ?class, owl:Class ?aspectClass, owl:Class ?elementClass] :: {
  o-owl-ax:EquivObjectIntersectionOf(?class, ( ?aspectClass, ?elementClass ) )
  o-owl-ax:SubClassOf(?class, ?aspectClass),
  o-owl-ax:SubClassOf(?class, ?elementClass),
  o-imf:GeneratedNote(?class)
} .

o-imf:InterAspectRelation [owl:ObjectProperty ?property, owl:Class ?aspectClass] :: {
  o-rdf:Type(?property, owl:ObjectProperty),
  o-owl-ax:SubPropertyOf(?property, imf:interAspectRelation),  
  o-rdfs:Range(?property, ?aspectClass),
  o-imf:GeneratedNote(?property)
} .

o-imf:GeneratedNote [ottr:IRI ?resource] :: {
  ottr:Triple(?resource, skos:note, "This resource is programatically generated. Please consult its defining resources for a textual descriptions."),
  ottr:Triple(?resource, vs:term_status, "testing"),
  ottr:Triple(?resource, vann:termGroup, "aspects")
} .
#+END_SRC

#+NAME: py_aspect_ottr_instances_aspects
#+BEGIN_SRC python :results raw :wrap src ttl :var table=tbl-aspects :exports none
output = ""

instance = "[] ottr:of {} ;\n   ottr:values( {} ) . \n"

## aspects
for row in table[0:]:
  aspectName = row[0].replace("imf:", "", ).replace('Aspect', '')
  row.insert(1, "'" + aspectName + "'")
  output += instance.format("o-imf:Aspect", " ".join(f'{w}' for w in row))

output += "\n"

all_aspects = list(zip(*table[0:]))[0]
all_systemelements = [ 'Block', 'Terminal' ]

## aspects are different
output += instance.format("o-owl-ax:DifferentIndividuals", "( " + " ".join(all_aspects) + " )")

output += "\n"

## Create a class that represents all elements of a given aspect
for aspect in all_aspects:
  aspectName = aspect.replace("imf:", "", ).replace('Aspect', '').capitalize()
  output += instance.format("o-imf:AspectClass", "imf:" + aspectName + "Element " + aspect)

output += "\n"

## create a class of each aspect, element type combination, e.g., FunctionBlock.
for aspect in all_aspects:
  for element in all_systemelements:
    aspectName = aspect.replace("imf:", "", ).replace('Aspect', '').capitalize()
    output += instance.format("o-imf:AspectElementClass", "imf:" + aspectName + element + " imf:" + aspectName  + "Element imf:" + element)

output += "\n"

## Create a object property for each aspect
for aspect in all_aspects:
  aspectName = aspect.replace("imf:", "", ).replace('Aspect', '').capitalize()
  output += instance.format("o-imf:InterAspectRelation", "imf:as" + aspectName + " imf:" + aspectName + "Element")

output += "\n"


return output
#+END_SRC

*** Inter-aspect Relations

#+NAME: overview-aspect-element-interaspect
#+BEGIN_SRC plantuml :noweb yes :file out/img/overview-aspect-element-interaspect.png
<<plantuml-style>>

<<py_aspectelement_interaspect_rels()>>
#+END_SRC

#+RESULTS: overview-aspect-element-interaspect
[[file:out/img/overview-aspect-element-interaspect.png]]


*** ~AspectElement~ specialisations

#+NAME: overview-aspect-element-subs
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-aspect-element-subs.png
<<plantuml-style>>

<<py_aspectelement_interaspect_rels()>>
<<py_aspectelement_subs()>>
#+END_SRC

#+RESULTS: overview-aspect-element-subs
[[file:out/img/imf-overview-aspect-element-subs.png]]

**** Processing                                                          :QA:

#+NAME: py_aspectelement_interaspect_rels
#+BEGIN_SRC python :var table=tbl-aspects :exports none
output = ""

for row in table:
  aspect = row[0].replace("imf:","").replace("Aspect", "").capitalize()
  color = row[2].replace("'","").replace("#","")

  ae = aspect + "Element"

  output += "class " + ae + " #back:" + color + "\n"
  output += "AspectElement --> " + ae + " : as" + aspect + "\n"
  output += "AspectElement <|-- " + ae + " \n"

return output
#+END_SRC

#+RESULTS: py_aspectelement_interaspect_rels
#+begin_example
class FunctionElement #back:FFFF00
AspectElement --> FunctionElement : asFunction
AspectElement <|-- FunctionElement 
class LocationElement #back:FF00FF
AspectElement --> LocationElement : asLocation
AspectElement <|-- LocationElement 
class ProductElement #back:00FFFF
AspectElement --> ProductElement : asProduct
AspectElement <|-- ProductElement 
class InstalledElement #back:0000FF
AspectElement --> InstalledElement : asInstalled
AspectElement <|-- InstalledElement
#+end_example


#+NAME: py_aspectelement_subs
#+BEGIN_SRC python :var table=tbl-aspects :exports none
output = ""

for row in table:
  aspect = row[0].replace("imf:","").replace("Aspect", "").capitalize()
  color = row[2].replace("'","").replace("#","")

  for element in ['Block', 'Terminal']:
    ae = aspect + element

    output += "class " + ae + " #back:" + color + "\n"
    output += element + " <|-- " + ae + "\n" 
    output += aspect + "Element <|-- " + ae + "\n" 

output += "\n"
return output
#+END_SRC

#+RESULTS: py_aspectelement_subs
#+begin_example
class FunctionBlock #back:FFFF00
Block <|-- FunctionBlock
FunctionElement <|-- FunctionBlock
class FunctionTerminal #back:FFFF00
Terminal <|-- FunctionTerminal
FunctionElement <|-- FunctionTerminal
class LocationBlock #back:FF00FF
Block <|-- LocationBlock
LocationElement <|-- LocationBlock
class LocationTerminal #back:FF00FF
Terminal <|-- LocationTerminal
LocationElement <|-- LocationTerminal
class ProductBlock #back:00FFFF
Block <|-- ProductBlock
ProductElement <|-- ProductBlock
class ProductTerminal #back:00FFFF
Terminal <|-- ProductTerminal
ProductElement <|-- ProductTerminal
class InstalledBlock #back:0000FF
Block <|-- InstalledBlock
InstalledElement <|-- InstalledBlock
class InstalledTerminal #back:0000FF
Terminal <|-- InstalledTerminal
InstalledElement <|-- InstalledTerminal
#+end_example

** Attributes
*** Overview

#+NAME: overview-attribute
#+BEGIN_SRC plantuml :noweb yes :file out/owl/imf-overview-attributes.png
<<plantuml-style>>

abstract class Element

Element *--> "*" Attribute : hasAttribute

'Element *--> "*" AttributeGroup : hasAttributeGroup

'AttributeGroup *--> "*" Attribute : hasAttribute

'
'class AttributeGroup {
' name : 0..1
' description : 0..1
'}


class Attribute {
 name : 0..1
 description : 0..1
 value : 1..*
}

class UoM << RDL >>
class RDLItem <<RDL >>

Attribute "*" --> "0..1" UoM : uom
Attribute "*" --> "1" RDLItem : property

Attribute "*" --> "0..1" Provenance : hasAttributeQualifier
Attribute "*" --> "0..1" Range : hasAttributeQualifier
Attribute "*" --> "0..1" Regularity : hasAttributeQualifier
Attribute "*" --> "0..1" Scope : hasAttributeQualifier

''' Qualifiers

class AttributeQualifier

AttributeQualifier <|-- Provenance
AttributeQualifier <|-- Range
AttributeQualifier <|-- Regularity
AttributeQualifier <|-- Scope

enum Provenance {
  calculated
  measured
  specified
}
enum Range {
  average
  maximum
  minimum
  nominal
  normal
}
enum Regularity {
  absolute
  continuous
}
enum Scope {
  design
  operating
}
#+END_SRC

#+ATTR_LATEX: :width 12cm
#+RESULTS: overview-attribute
[[file:out/owl/imf-overview-attribute.png]]

*** ~Attribute~

#+NAME: owl-attributes-value
#+BEGIN_SRC ttl
imf:Attribute a owl:Class ;
  skos:prefLabel "Attribute" ;
  vs:term_status "testing" ;
  skos:definition "An [Attribute] describes a quality or characteristic of a resource by setting a [property], a [value], and optionally a [unit of measure]." ;
  skos:example "Color: red" , "Weight: 1250 kg" , "Maximum ambient operating temperature: 120 K" ;
  foaf:depiction <./imf-overview-attributes.png> ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  .

imf:hasAttribute a owl:ObjectProperty ;
  skos:prefLabel "has attribute" ;
  vs:term_status "testing" ;
  skos:definition "[has attribute] is a relation between an [Element] *E* and an [Attribute] *A* that specifies that *E* has the attribute *A*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Element ;
  rdfs:range  imf:Attribute .

imf:property a owl:ObjectProperty ;
  skos:prefLabel "property" ;
  vs:term_status "testing" ;
  skos:definition "[property] is an [external reference] that relates an [Attribute] *A* to a resource *X* to specify that *A* has the property *X*." ;
  skos:example "The [property] of an [Attribute] \"Weight: 1250 kg\" could be specified as WEIGTH <http://data.posccaesar.org/rdl/RDS356894>." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Attribute .

imf:uom a owl:ObjectProperty ;
  skos:prefLabel "unit of measure" ;
  skos:altLabel "uom" ;
  vs:term_status "testing" ;
  skos:definition "[unit of measure] is an [external reference] that relates an [Attribute] *A* to a resource *X* to specify that *A* has the unit of measure *X*." ;
  skos:example "The [unit of measure] of an [Attribute] \"Weight: 1250 kg\" could be specified as KILOGRAM <http://data.posccaesar.org/rdl/RDS1328669>." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:subPropertyOf imf:externalReference ;
  rdfs:domain imf:Attribute .

imf:value a owl:DatatypeProperty ;
  skos:prefLabel "value" ;
  vs:term_status "testing" ;
  skos:definition "[value] relates an [Attribute] *A* to literal value *v* to specify that *A* has the value *v*." ;
  skos:example "The [value] of an [Attribute] \"Weight: 1250 kg\" could be specified as the literal \"1250\"^^xsd:integer (or using a different appropriate literal datatype)." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Attribute 
.
#+END_SRC

#+NAME: shacl-attributes-value
#+BEGIN_SRC ttl
imf:AttributeShape a sh:NodeShape ;
  sh:targetClass imf:Attribute ;
  sh:targetObjectsOf imf:hasAttribute ;
  sh:targetSubjectsOf imf:property, imf:uom, imf:hasAttributeQualifier ;
  sh:property 
    [ sh:path imf:property ; sh:minCount 1 ; sh:maxCount 1 ] ,
    [ sh:path imf:value ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "Attribute has no value." ] ,
    [ sh:path imf:uom ; sh:maxCount 1 ] , 
    [ sh:path imf:hasAttributeQualifier ; sh:maxCount 1 ; sh:class imf:RegularityQualifier ] , 
    [ sh:path imf:hasAttributeQualifier ; sh:maxCount 1 ; sh:class imf:RangeQualifier ] , 
    [ sh:path imf:hasAttributeQualifier ; sh:maxCount 1 ; sh:class imf:ProvenenceQualifier ] , 
    [ sh:path imf:hasAttributeQualifier ; sh:maxCount 1 ; sh:class imf:ScopeQualifier ] ,
    [ sh:path imf:hasAttributeQualifier ; sh:minCount 1 ; sh:severity sh:Warning ; sh:message "Attribute has no qualifier." ] 
.
#+END_SRC

*** ~AttributeGroup~                                               :noexport:

#+NAME: owl-attributes-group
#+BEGIN_SRC ttl
imf:AttributeGroup a owl:Class ;
  skos:prefLabel "Attribute Group" ;
  vs:term_status "testing" ;
  skos:definition "An [Attribute Group] is a collection of [Attribute]s which are typically grouped for convenience as they describe closely related features or characteristics of a resource." ;
  skos:example "The physical dimensions of a product, e.g., its length, width and height, could be grouped by an [Attribute Group]." ;
  skos:editorialNote "Does an [Attribute Group] add any semantics? -- what is the difference from an [Attribute Group] and an [Element] with [Attribute]s?" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  .

imf:hasAttributeGroup a owl:ObjectProperty ;
  skos:prefLabel "has attribute group" ;
  vs:term_status "testing" ;
  skos:definition "[has attribute group] is a relation between a resource *X* and an [Attribute Group] *A* that specifies that *X* has the attribute group *A*." ;
  skos:editorialNote "See comment on [Attribute Group], does [has attribute group] represent a \"long-hand property\" meaning that attaching the Attributes of the Attribute Group directly is equivalent? Perhaps the functionality of [Attribute Group]s is best realised as aspect-less-types?" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  rdfs:range imf:AttributeGroup .
#+END_SRC

#+NAME: shacl-attributes-group
#+BEGIN_SRC ttl
imf:AttributeGroupShape a sh:NodeShape ;
  sh:targetClass imf:AttributeGroup ;
  sh:targetObjectsOf imf:hasAttributeGroup ;
  sh:property 
    [ sh:path imf:hasAttribute ; sh:minCount 1 ; sh:message "AttributeGroup has no Attributes." ]
.
#+END_SRC


*** ~AttributeQualifier~

#+NAME: owl-attributes-qualifier
#+BEGIN_SRC ttl
imf:AttributeQualifier a owl:Class ;
  skos:prefLabel "Attribute Qualifier" ;
  vs:term_status "testing" ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  .

imf:hasAttributeQualifier a owl:ObjectProperty ;
  skos:prefLabel "has attribute qualifier" ;
  vs:term_status "testing" ;
  skos:definition "[has attribute qualifier] is a relation between an [Attribute] *A* and an [Attribute Qualifier] *Q* to specify that *A* is qualified by *Q*." ;
  skos:changeNote 
    "0.2.0 :: Added" ;
  vann:termGroup "attributes" ;
  rdfs:domain imf:Attribute ;
  rdfs:range  imf:AttributeQualifier .
#+END_SRC

*** Attribute Qualifiers

#+NAME: tbl-qualifiers
| Qualifier               | Instance                |
|-------------------------+-------------------------|
| imf:ProvenanceQualifier | imf:calculatedQualifier |
| imf:ProvenanceQualifier | imf:measuredQualifier   |
| imf:ProvenanceQualifier | imf:specifiedQualifier  |
| imf:RangeQualifier      | imf:averageQualifier    |
| imf:RangeQualifier      | imf:maximumQualifier    |
| imf:RangeQualifier      | imf:minimumQualifier    |
| imf:RangeQualifier      | imf:nominalQualifier    |
| imf:RangeQualifier      | imf:normalQualifier     |
| imf:RegularityQualifier | imf:absoluteQualifier   |
| imf:RegularityQualifier | imf:continuousQualifier |
| imf:ScopeQualifier      | imf:designQualifier     |
| imf:ScopeQualifier      | imf:operatingQualifier  |

**** Processing                                                          :QA:

#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/imf/attributes.stottr :mkdirp yes
<<prefixes>>

o-imf:AttributeQualifier [owl:Class ?qualifierClass, NEList<owl:NamedIndividual> ?qualifierInstances] :: {
  o-rdf:Type(?qualifierClass, owl:Class) ,
  o-owl-ax:SubClassOf(?qualifierClass, imf:AttributeQualifier) ,
  o-owl-ax:SubObjectMaxCardinality(imf:Attribute, "1"^^xsd:nonNegativeInteger, imf:hasAttributeQualifier, ?qualifierClass),
  cross | o-rdf:Type(++?qualifierInstances, ?qualifierClass),
  cross | o-rdf:Type(++?qualifierInstances, owl:NamedIndividual),
  o-owl-ax:EquivObjectOneOf(?qualifierClass, ?qualifierInstances),
  o-owl-ax:DifferentIndividuals(?qualifierInstances)
} .
#+END_SRC

#+NAME: py_aspect_ottr_qualifiers
#+BEGIN_SRC python :results raw :wrap src ttl :var table=tbl-qualifiers :exports none
output = ""
instance = "[] ottr:of {} ;\n   ottr:values( {} ) . \n"

qfc = '{} a owl:Class ;\n  skos:prefLabel "{}" ;\n  vs:term_status "testing" ;\n  #skos:definition "";\n  skos:changeNote\n     "0.2.0 :: Added" ;\n  vann:termGroup "attributes";\n.\n\n'
qf = '{} a owl:NamedIndividual ;\n  skos:prefLabel "{}" ;\n  vs:term_status "testing" ;\n  #skos:definition "";\n  skos:changeNote\n     "0.2.0 :: Added" ;\n  vann:termGroup "attributes";\n.\n\n'

qualifiers = list(set(list(zip(*table[0:]))[0]))
qualifiers.sort()

for qualifier in qualifiers:
  instances = []
  output += qfc.format(qualifier, qualifier.replace('imf:', '').replace('Qualifier', ' Qualifier'))
  for row in table[0:]:
    if row[0] == qualifier :
      instances.append(row[1])

  for i in instances :
      output += qf.format(i, i.replace('imf:', '').replace('Qualifier', ''))

  output += instance.format("o-imf:AttributeQualifier", qualifier + " (" + " ".join(instances) + ")")
  output += "\n"

output += "\n"

##all_qualifier_instances = list(zip(*table[0:]))[1]
output += instance.format("o-owl-ax:DisjointClasses", "( " + " ".join(qualifiers) + " )")

return output
#+END_SRC


** Summary
*** Overview

All diagrams combined.

#+BEGIN_SRC plantuml :noweb yes :file out/owl/imf-overview.png
<<plantuml-style>>

'<<overview-model-versioning>>

<<overview-aspect-element>>

'<<overview-instances>>
<<overview-instances-w-reified>>

<<overview-attribute>>

#+END_SRC

#+RESULTS:
[[file:out/img/imf-overview.png]]

*** Vocabulary

Report of the vocabulary used by the IMF ontology.

**** IMF Vocabulary

#+NAME: sparql_all_imf_iris
#+BEGIN_SRC ttl
SELECT DISTINCT ?iri ?label ?group ?type ?status ?definition ?scopeNote ?example ?ed
{
  { ?iri ?x1 ?x2 }
  UNION
  { ?x3 ?iri ?x4 }
  UNION
  { ?x5 ?x5 ?iri }
  FILTER(!isBlank(?iri))
  FILTER(STRSTARTS(STR(?iri), "http://ns.imfid.org"))


  ?iri a ?type 
  FILTER(?type IN (
      #owl:Ontology, 
      owl:Class, 
      owl:ObjectProperty,
      owl:DatatypeProperty,
      owl:AnnotationProperty,
      owl:NamedIndividual
      ))
  
  OPTIONAL {
    ?iri vann:termGroup ?group }
  OPTIONAL {
    ?iri skos:prefLabel ?label }
  OPTIONAL {
    ?iri vs:term_status ?status }
  OPTIONAL {
    ?iri skos:definition ?definition }
  OPTIONAL {
    ?iri skos:scopeNote ?scopeNote }
  OPTIONAL {
    ?iri skos:example ?example }
  OPTIONAL {
    ?iri skos:editorialNote ?ed }

}
ORDER BY ?group ?status ?type ?iri
#+END_SRC

#+CALL: py_run_sparql(query=sparql_all_imf_iris)


**** IRIs

#+NAME: sparql_all_iris
#+BEGIN_SRC ttl
SELECT DISTINCT ?iri ?type
{
  { ?iri ?x1 ?x2 }
  UNION
  { ?x3 ?iri ?x4 }
  UNION
  { ?x5 ?x5 ?iri }
  FILTER(!isBlank(?iri))

  OPTIONAL { 
    ?iri a ?type 
    FILTER(?type IN (
      owl:Ontology, 
      owl:Class, 
      owl:ObjectProperty,
      owl:DatatypeProperty,
      owl:AnnotationProperty,
      owl:NamedIndividual
      ))
  }
}
ORDER BY ?type ?iri
#+END_SRC

#+CALL: py_run_sparql(query=sparql_all_iris)

**** Classes

#+NAME: sparql_class
#+BEGIN_SRC ttl
SELECT ?class ?prefLabel ?superclasses
{
  ?class a owl:Class.
  FILTER (!isBlank(?class))

  OPTIONAL { ?class skos:prefLabel ?prefLabel }

  { SELECT ?class 
      (GROUP_CONCAT(?superclass; SEPARATOR=", ") AS ?superclasses) 
    {
      OPTIONAL { ?class rdfs:subClassOf ?superclass. FILTER (!isBlank(?superclass)) }
    } GROUP BY ?superclasses ?class
  }
}
ORDER BY ?superclasses ?class
#+END_SRC

#+CALL: py_run_sparql(query=sparql_class)

**** Properties

#+NAME: sparql_property
#+BEGIN_SRC ttl
SELECT ?type ?property ?prefLabel ?domain ?range ?characteristics ?superproperties
{
  ?property a ?type.
  FILTER (?type = owl:ObjectProperty || ?type = owl:DatatypeProperty || ?type = owl:AnnotationProperty )
  FILTER (!isBlank(?property))

  OPTIONAL { ?property skos:prefLabel ?prefLabel }
  OPTIONAL { ?property rdfs:domain ?domain }
  OPTIONAL { ?property rdfs:range ?range }

  { SELECT ?property 
      (GROUP_CONCAT(?superproperty; SEPARATOR=", ") AS ?superproperties) 
      (GROUP_CONCAT(?characteristic; SEPARATOR=", ") AS ?characteristics) 
    {
      OPTIONAL { ?property rdfs:subPropertyOf ?superproperty }
      OPTIONAL { ?property a ?characteristic .
          FILTER (?characteristic != owl:ObjectProperty && ?characteristic != owl:DatatypeProperty && ?characteristic != owl:AnnotationProperty )
      }
      OPTIONAL { ?property skos:altLabel ?altLabel }
    } GROUP BY ?property
  }
  
}
ORDER BY ?type ?property
#+END_SRC

#+CALL: py_run_sparql(query=sparql_property)


*** SHACL Shapes

All SHACL Shapes combined.

#+NAME: shacl-all
#+BEGIN_SRC ttl :noweb yes :tangle out/shacl/imf.shacl.wottr.ttl :mkdirp yes
<<prefixes>>

<<shacl-elements-annotations>>
<<shacl-elements-block>>
<<shacl-elements-terminal>>
<<shacl-elements-breakdownpoint>>
<<shacl-elements-connectionpoint>>
<<shacl-aspect-aspectelement>>
<<shacl-attributes-value>>
#<<shacl-attributes-group>>
#+END_SRC


**** Processing and QA                                                   :QA:
***** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/shacl/imf.shacl.wottr.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/shacl/imf.shacl.wottr.ttl : 0.20 sec : 116 Triples : 574.26 per second

***** Expand OTTR instances

#+CALL: lutra-expand(in="out/shacl/imf.shacl.wottr.ttl", out="out/shacl/imf.shacl.ttl")


***** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/shacl/imf.shacl.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/shacl/imf.shacl.ttl : 0.21 sec : 114 Triples : 553.40 per second

#+CALL: sh_jena_shacl_std_validate(data="out/shacl/imf.shacl.ttl")

#+RESULTS:
#+BEGIN_src ttl
Result of validating RDF data <out/shacl/imf.shacl.ttl> against SHACL shape <http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl>:

Conforms
#+END_src

***** Diagram

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/imf-aspects.owl.ttl", output="out/owl/imf-aspects-overview.svg")

#+RESULTS:

[[./out/owl/imf-aspects-overview.svg]]


** Compile and verify
*** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf.owl.wottr.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf.owl.wottr.ttl : 0.22 sec : 317 Triples : 1,454.13 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf.owl.wottr.ttl")

#+RESULTS:
#+BEGIN_src ttl
Conforms
#+END_src

*** Expand OTTR instances

#+CALL: lutra-expand(in="out/owl/imf.owl.wottr.ttl", out="out/owl/imf.owl.ttl")

*** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf.owl.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf.owl.ttl : 0.21 sec : 355 Triples : 1,674.53 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
Conforms
#+END_src

#+CALL: sh_jena_shacl_validate(shapes="out/shacl/imf-vocabulary-checks.shacl.ttl", data="out/owl/imf.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
Node=<http://ns.imfid.org/imf#continuousQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#minimumQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#RegularityQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#BreakdownPoint>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#theInput>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#measuredQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#normalQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#operatingQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#ProvenanceQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#theConnected>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#calculatedQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#specifiedQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#absoluteQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#averageQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#ConnectionPoint>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#RangeQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#nominalQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#ScopeQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#theWhole>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#designQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#thePart>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#theOutput>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#AttributeQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
Node=<http://ns.imfid.org/imf#maximumQualifier>
  Path=<http://www.w3.org/2004/02/skos/core#definition>
  Message: minCount[1]: Invalid cardinality: expected min 1: Got count = 0
#+END_src

*** Diagram
#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/imf.owl.wottr.ttl", output="out/owl/imf-overview.svg")

#+RESULTS:

[[./out/owl/imf-overview.svg]]


*** SHACL checks
**** SPARQL select

#+NAME: vocabulary-checks-select-query
#+BEGIN_SRC ttl
      PREFIX owl:   <http://www.w3.org/2002/07/owl#> 
      PREFIX skos:  <http://www.w3.org/2004/02/skos/core#>
      SELECT ?this { 
        ?this a ?type 
	FILTER (STRSTARTS(STR(?this), 'http://ns.imfid.org'))
        FILTER (isIRI(?this))
        #FILTER (?type IN ( owl:Class, owl:NamedIndividual, owl:ObjectProperty, owl:DatatypeProperty, owl:AnnotationProperty ))
        FILTER (?type != owl:Ontology)
        FILTER NOT EXISTS { 
	  ?this skos:note ?note .
	  FILTER (STRSTARTS(STR(?note), 'This resource is programatically generated.'))
	}
      }
      ## ORDER BY ?this
#+END_SRC

#+BEGIN_SRC ttl :noweb yes :tangle out/shacl/imf-vocabulary-checks.shacl.ttl :mkdirp yes
<<prefixes>>

_:allIRIs a sh:NodeShape ;
  sh:target [
    a sh:SPARQLTarget ;
    sh:prefixes owl: ;
    sh:select """
<<vocabulary-checks-select-query>>
      """ 
  ] ;
  sh:property 
    [ sh:path vs:term_status ; sh:minCount 1 ; sh:maxCount 1 ; sh:in ( "unstable" "testing" "stable" "archaic" ) ] ,
    [ sh:path vann:termGroup ; sh:minCount 1 ; sh:maxCount 1 ; sh:in ( "elements" "aspects" "attributes" "generic relations" "model" ) ] ,
    [ sh:path skos:prefLabel ; sh:minCount 1 ; sh:maxCount 1 ; sh:datatype xsd:string ] ,
    [ sh:path skos:definition ; sh:minCount 1 ; sh:maxCount 1 ; sh:datatype xsd:string  ] ,
    [ sh:path skos:changeNote ; sh:minCount 1 ; sh:pattern "^[0-9].[0-9].[0-9] :: [Added|Changed:]" ] 
.

#+END_SRC

#+CALL: sh_jena_sparql(query=vocabulary-checks-select-query, "out/owl/imf.owl.ttl")

* TODO Types

Types are represented as patterns heavily inspired by the SHACL
constaint languge for RDF.

A type is represented by instantiating a small set of these
patterns. The pattern instances, i.e., a Type specification, may in
turn be translated to different formats:

 1. a set of SHACL shape constraints with with instance of the Type
    may be validated
 2. a prototypical RDF graph that represents a minimal starting point
    for instantiating the type
 3. an OWL class which classifies the instances of the type

OTTR templates are used to specify the patterns and their translation
to the different formats.

** Overview type patterns

The diagram displays the type patterns. 

Some terms are prefixed with ~sh.~ to indicate that they refer to
terms that are defined in the SHACL standard:
https://www.w3.org/TR/shacl. This also indicates how the type pattern
instances are translated into SHACL.

#+NAME: overview-types
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-types.png
<<plantuml-style>>

metaclass sh.Shape {
  id: 1 iri
  sh.name: 0..1 string
  sh.description: 0..1 string
}

metaclass sh.NodeShape {
  sh.targetClass: 0..1 iri
}

metaclass sh.PropertyShape {
  sh.path: 1 iri
}

metaclass Type {
  typeClass: 1 iri
}

metaclass SimpleValue {
  sh.hasValue: 1
}

metaclass SimpleValues {
  sh.in: 0..*
  sh.class: 0..1 iri
  sh.minCount: 0..1 integer
  sh.maxCount: 0..1 integer
}

metaclass TypeReference {
  sh.minCount: 0..1 integer
  sh.maxCount: 0..1 integer
}

metaclass ComplexValues {
  sh.datatype: 0..1 iri

  sh.minExclusive: 0..1
  sh.minInclusive: 0..1
  sh.maxExclusive: 0..1
  sh.maxInclusive: 0..1

  sh.minLenght: 0..1 integer
  sh.maxLength: 0..1 integer
  sh.pattern: 0..1 string
  sh.flags: 0..1 string
}

sh.Shape <|-- sh.NodeShape
sh.Shape <|-- sh.PropertyShape

sh.NodeShape <|-- Type

sh.PropertyShape <|-- SimpleValue
sh.PropertyShape <|-- SimpleValues
sh.PropertyShape <|-- TypeReference

SimpleValues <|-- ComplexValues

sh.NodeShape "1" -right-> sh.PropertyShape : sh.property
TypeReference --> "1" sh.NodeShape : node

#+END_SRC

#+RESULTS: overview-types
[[file:out/img/imf-overview-types.png]]

*** Short description of the type patterns

 - Type :: specifies a collection Property shapes, i.e., a Type is a
           specification of relations to other types and
           properties. Used for specifying a BlockType, TerminalType,
           AttributeGroupType or AttributeType.
 - SimpleValue :: specifies a single value for a path. Used for
                  forcing one specific value.
 - SimpleValues :: specifies a range of simple values by listing
                   permissible values or giving a class, also possible
                   to set cardnality (min--max) number of values. Used
                   for specifying a range of values.
 - TypeReference :: specifies a reference to node shape with
              cardinality. Used for specifying, e.g., that a Block has
              3 Terminals of the same type.
 - ComplexValues :: specifies a value range with a complex set of
                    constraints. Used typically for specifying the
                    value for an Attribute.

** Suggested use of the type patterns

The diagram below displays a suggested use of the type patterns.

#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-type-patterns.png
<<plantuml-style>>

metaclass ElementType << Type >> {
  [metadata]
  aspect: SimpleValue
  notation: SimpleValue
  symbol: SimpleValue/s
}

metaclass BlockType << Type >>  {

}

metaclass TerminalType << Type >>  {
  direction: SimpleValue
  medium: SimpleValue/s
}

metaclass AttributeGroupType << Type >>  {

}

metaclass AttributeType << Type >>  {
  property : SimpleValue/s
  value : ComplexValues
  uom : SimpleValue/s
  qualifier : SimpleValues
}

ElementType <|-- BlockType
ElementType <|-- TerminalType

ElementType --> AttributeGroupType : TypeReference
ElementType --> AttributeType : TypeReference
BlockType --> TerminalType : TypeReference
AttributeGroupType --> AttributeType : TypeReference

circle element

element -left-> ElementType : instanceOf

#+END_SRC

#+RESULTS:
[[file:out/img/imf-overview-type-patterns.png]]

** Pattern representation to SHACL with OTTR Templates 

#+BEGIN_SRC ttl :noweb yes :tangle out/ottr/imf-types-shacl.stottr :mkdirp yes
<<prefixes>>

o-imf:ShaclShape[
  ottr:IRI ?id, 
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  ottr:Triple(?id, sh:name, ?name),
  ottr:Triple(?id, sh:description, ?description)
} .


o-imf:ShaclNodeShape[
  ottr:IRI ?id, 
  ? owl:Class ?targetClass,
  #? xsd:string ?targetSPARQLSelect
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclShape(?id, ?name, ?description),
  o-rdf:Type(?id, sh:NodeShape),
  ottr:Triple(?id, sh:targetClass, ?targetClass)

  #ottr:Triple(?id, sh:target, _:SHACLTarget),  
  #o-rdf:Type(_:SHACLTarget, sh:SHACLTarget),
  #ottr:Triple(_:SHACLTarget, sh:select, ?targetSPARQLSelect)
} .

o-imf:ShaclPropertyShape[
    ottr:IRI ?id,
    ottr:IRI ?nodeShape, 
    ottr:IRI ?path,
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclShape(?id, ?name, ?description),
  ottr:Triple(?nodeShape, sh:property, ?id),
  ottr:Triple(?id, sh:path, ?path)
} .

#######

o-imf-t-s:Type[
  ottr:IRI ?id, 
  owl:Class ?typeClass,
  ? owl:Class ?targetClass,
  #? xsd:string ?targetSPARQLSelect
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclNodeShape(?id, ?targetClass, ?name, ?description),
  o-rdf:Type(?id, ?typeClass)
} .

#######

o-imf-t-s:TypeReference[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeID, 
    ottr:IRI ?path, 
    ottr:IRI ?node,
    xsd:integer ?minCount = 1,
    xsd:integer ?maxCount = 1,
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclPropertyShape(?id, ?typeID, ?path, ?name, ?description),
  ottr:Triple(?id, sh:node, ?node),
  ottr:Triple(?id, sh:minCount, ?minCount),
  ottr:Triple(?id, sh:maxCount, ?maxCount)
} .

o-imf-t-s:SimpleValue[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeID, 
    ottr:IRI ?path, 
    rdfs:Resource ?value,
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclPropertyShape(?id, ?typeID, ?path, ?name, ?description),
  ottr:Triple(?id, sh:hasValue, ?value)
} .

o-imf-t-s:SimpleValues[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeID, 
    ottr:IRI ?path, 
  ? List<rdfs:Resource> ?in,
  ? owl:Class ?class,
    xsd:integer ?minCount, 
    xsd:integer ?maxCount,
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  o-imf:ShaclPropertyShape(?id, ?typeID, ?path, ?name, ?description),
  ottr:Triple(?id, sh:in, ?in),
  ottr:Triple(?id, sh:class, ?class),
  ottr:Triple(?id, sh:minCount, ?minCount),
  ottr:Triple(?id, sh:maxCount, ?maxCount)
} .


o-imf-t-s:ComplexValues[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeID, 
    ottr:IRI ?path, 
  #? xsd:string ?message,   ## add these to all patterns?
  #? ottr:IRI ?severity,
  #? rdfs:Resource ?value,
  ? List<rdfs:Resource> ?in,
  ? owl:Class ?class,
  ? ottr:IRI ?datatype,
    xsd:integer ?minCount = 1,
    xsd:integer ?maxCount = 1, 
  ? rdfs:Resource ?minInclusive,
  ? rdfs:Resource ?minExclusive,
  ? rdfs:Resource ?maxInclusive,
  ? rdfs:Resource ?maxExclusive,
  ? xsd:integer ?minLength,
  ? xsd:integer ?maxLength,
  ? xsd:string ?pattern,
  ? xsd:string ?flags,
  ? xsd:string ?name, 
  ? xsd:string ?description
] :: {
  #o-imf:ShaclPropertyShape(?typeID, ?id, ?path),
  #o-imf-t-s:SimpleValue(?id, ?typeID, ?path, ?value, ?name, ?description),
  o-imf-t-s:SimpleValues(?id, ?typeID, ?path, ?in, ?class, ?minCount, ?maxCount, ?name, ?description),
  #ottr:Triple(?id, sh:message, ?message),
  #ottr:Triple(?id, sh:severity, ?severity),
  ottr:Triple(?id, sh:datatype, ?datatype),
  ottr:Triple(?id, sh:minInclusive, ?minInclusive),
  ottr:Triple(?id, sh:minExclusive, ?minExclusive),
  ottr:Triple(?id, sh:maxInclusive, ?maxInclusive),
  ottr:Triple(?id, sh:maxExclusive, ?maxExclusive),
  ottr:Triple(?id, sh:minLength, ?minLength),
  ottr:Triple(?id, sh:maxLength, ?maxLength),
  ottr:Triple(?id, sh:pattern, ?pattern),
  ottr:Triple(?id, sh:flags, ?flags)
} .
#+END_SRC

** Translation to OWL ontology representation

*** OWL Classes

#+NAME: sparql_shaclClass
#+BEGIN_SRC ttl
SELECT 
  ?class 
  ?imfClass
  ?name
  ?description
  ?severity
  ?message
WHERE {
  OPTIONAL { ?n sh:targetClass ?class }
  OPTIONAL { ?n a ?imfTypeClass . 
             FILTER(STRSTARTS(STR(?imfTypeClass), "http://ns.imfid.org"))
             BIND(IRI(REPLACE(STR(?imfTypeClass), "Type", "")) AS ?imfClass)}
  OPTIONAL { ?n sh:name ?name }
  OPTIONAL { ?n sh:description ?description }
  OPTIONAL { ?n sh:severity ?severity }
  OPTIONAL { ?n sh:message ?message }
}
#+END_SRC

#+BEGIN_SRC ttl
o-imf-t-o:TypeClass[
  owl:Class ?id, 
  ? owl:Class ?imfClass,
  ? xsd:string ?name, 
  ? xsd:string ?description
  ? xsd:string ?severity, 
  ? xsd:string ?message
] :: {
  o-owl-dec:Class(?id, ?name, ?description, none, none),
  o-owl-ax:SubClassOf(?id, ?imfClass)
} .
#+END_SRC

*** OWL Class restrictions

SPARQL query

#+NAME: sparql_shaclClassRestriction 
#+BEGIN_SRC ttl
SELECT 
  ?class 
  ?path 
  ##?name
  ##?description
  ?minCount
  ?maxCount
  ?nodeTargetClass
  ?hasValue
  ?in
  ?datatype
  ?minExclusive
  ?minInclusive
  ?maxExclusive
  ?maxInclusive
  ?minLength
  ?maxLength
  ?pattern
  ?flags
WHERE {
  ?n sh:targetClass ?class .
  ?n sh:property ?p .
  ?p sh:path ?path .
  ##OPTIONAL { ?p sh:name ?name }
  ##OPTIONAL { ?p sh:description ?description }
  OPTIONAL { ?p sh:minCount ?minCount }
  OPTIONAL { ?p sh:maxCount ?maxCount }
  OPTIONAL { ?p sh:node [ sh:targetClass ?nodeTargetClass ] }
  OPTIONAL { ?p sh:class ?class }
  OPTIONAL { ?p sh:hasValue ?hasValue }
  OPTIONAL { ?p sh:in ?in }
  OPTIONAL { ?p sh:datatype ?datatype }
  OPTIONAL { ?p sh:minExclusive ?minExclusive }
  OPTIONAL { ?p sh:minInclusive ?minInclusive }
  OPTIONAL { ?p sh:maxExclusive ?maxExclusive }
  OPTIONAL { ?p sh:maxInclusive ?maxInclusive }
  OPTIONAL { ?p sh:minLength ?minLength }
  OPTIONAL { ?p sh:maxLength ?maxLength }
  OPTIONAL { ?p sh:pattern ?pattern }
  OPTIONAL { ?p sh:flags ?flags }
}
#+END_SRC


#+BEGIN_SRC ttl :noweb strip-export :XXXtangle out/ottr/imf-type-owl.stottr :mkdirp yes
<<prefixes>>

o-imf-t-o:TypeClassRestriction[
  owl:Class ?class, 
  ottr:IRI ?path,
  ? xsd:integer ?minCount,
  ? xsd:integer ?maxCount,
  ? ?hasValue
] :: {
  o-owl-ax:SubMaxCardinality(?class, ?maxCount, ?path),
  o-owl-ax:SubMinCardinality(?class, ?minCount, ?path),
  o-owl-ax:SubAllValuesFrom(?class, ?path, ?nodeTargetClass),
  o-owl-ax:SubHasValue(?class, ?path, ?hasValue)
} .


o-imf-t-o:TypeClassDataRestriction[
  owl:Class ?class, 
  ottr:IRI ?path,
  ? xsd:integer ?minCount,
  ? xsd:integer ?maxCount,
  # ? owl:Class ?nodeTargetClass,
  ? ?hasValue,
  ? List<rdfs:Resource> ?in,
  ? ottr:IRI ?datatype,
  ? ?minExclusive,
  ? ?minInclusive,
  ? ?maxExclusive,
  ? ?maxInclusive,
  ? xsd:integer ?minLength,
  ? xsd:integer ?maxLength,
  ? xsd:string ?pattern,
  ? xsd:string ?flags
] :: {
  o-imf-t-o:TypeClassRestriction(?class, ?path, ?minCount, ?maxCount, ?hasValue),
  #o-owl-ax:SubObjectOneOf(?class, ?path, ?in)
  zipMin | o-imf-t-o:SubDataAllValuesFromDatatypeFacet(?class, ?path, ?datatype, 
    ++(owl:minExclusive, owl:minInclusive, owl:maxExclusive, owl:maxInclusive, owl:minLength, owl:maxLength, owl:pattern),
    ++(?minExclusive, ?minInclusive, ?maxExclusive, ?maxInclusive, ?minLength, ?maxLength, ?pattern)
  )
} .

o-imf-t-o:TypeClassObjectRestriction[
  owl:Class ?class, 
  owl:ObjectProperty ?path,
  ? xsd:integer ?minCount,
  ? xsd:integer ?maxCount,
  ? owl:Class ?nodeTargetClass,
  ? ?hasValue,
  ? List<rdfs:Resource> ?in
] :: {
  o-imf-t-o:TypeClassRestriction(?class, ?path, ?minCount, ?maxCount, ?hasValue),
  o-owl-ax:SubObjectAllValuesFrom(?class, ?path, ?nodeTargetClass),
  o-owl-ax:SubObjectHasValue(?class, ?path, ?hasValue),
  o-owl-ax:SubObjectAllValuesFrom(?class, ?path, _:inClass),
  o-owl-ax:SubObjectOneOf(_:inClass, ?in)
} .


o-imf-t-o:SubDataAllValuesFromDatatypeFacet[
  ottr:Class ?class,
  ottr:DatatypeProperty ?prop,
  rdfs:Datatype ?datatype,
  ottr:IRI ?facet,
  ?value
] :: {
  o-owl-ax:SubDataAllValuesFrom(?class, ?prop, _:restriction),
  o-imf-t-o:DatatypeRestriction(_:restriction, ?datatype, ?facet, ?value)
} .

o-imf-t-o:DatatypeRestriction[
  ottr:IRI ?x,
  ottr:IRI ?datatype,
  ! ottr:IRI ?facet,
  ?value
] :: {
  o-rdf:Type(?x, rdfs:Datatype),
  ottr:Triple(?x, owl:onDatatype, ?datatype),
  ottr:Triple(?x, owl:withRestrictions, (_:facet)),
  ottr:Triple(_:facet, ?facet, ?value)
} .

#+END_SRC

https://stackoverflow.com/questions/36008786/proper-way-to-describe-string-literal-in-owl

* OLD types                                                        :noexport:
** Types

#+NAME: owl-types-type
#+BEGIN_SRC ttl
imf:Type a owl:Class ;
  skos:prefLabel "Type";
  .

imf:ElementType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Element Type";
  .

imf:BlockType a owl:Class ;
  rdfs:subClassOf imf:ElementType ;
  skos:prefLabel "Block Type";
  .

imf:TerminalType a owl:Class ;
  rdfs:subClassOf imf:ElementType ;
  skos:prefLabel "Terminal Type";
  .

imf:AttributeType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Attribute Type";
  .

imf:AttributeGroupType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Attribute Group Type";
  .

imf:hasTerminalType a owl:ObjectProperty ;
  rdfs:domain imf:BlockType ;
  rdfs:range imf:TerminalType ;
  .
#+END_SRC

** Type constraint

#+NAME: owl-types-typeconstraint
#+BEGIN_SRC ttl
imf:TypeConstraint a owl:Class .

[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:TypeConstraint "1"^^xsd:nonNegativeInteger imf:minCount xsd:integer ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:TypeConstraint "1"^^xsd:nonNegativeInteger imf:maxCount xsd:integer ) .

#+END_SRC

** Relation constraints

#+NAME: owl-types-relationconstraints
#+BEGIN_SRC ttl
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger imf:hasAspect imf:Aspect ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger skos:notation rdfs:Literal ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger imf:symbol rdfs:Literal ) .

[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:TerminalType "1"^^xsd:nonNegativeInteger imf:hasDirection imf:Direction ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:TerminalType "1"^^xsd:nonNegativeInteger imf:hasMedium owl:Thing ) .
#+END_SRC

** instanceOf

#+NAME: owl-types-instanceOf
#+BEGIN_SRC ttl

imf:instanceOf a owl:ObjectProperty ;
  skos:prefLabel "instance of" ;
  rdfs:range imf:Type .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Element imf:instanceOf imf:ElementType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Block imf:instanceOf imf:BlockType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Terminal imf:instanceOf imf:TerminalType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Attribute imf:instanceOf imf:AttributeType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:AttributeGroup imf:instanceOf imf:AttributeGroupType ) .
#+END_SRC



** Processing and QA                                                     :QA:
*** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf-types.owl.wottr.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-types.owl.wottr.ttl : 0.19 sec : 139 Triples : 747.31 per second

*** Expand OTTR instances

#+CALL: lutra-expand(in="out/owl/imf-types.owl.wottr.ttl", out="out/owl/imf-types.owl.ttl")

#+RESULTS:
#+begin_example
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-types.owl.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 108 triples
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix imf: <http://ns.imfid.org/imf#> .
@prefix pav: <http://purl.org/pav/> .
@prefix o-rdf: <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs: <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p14: <http://example.com/P14#> .
@prefix ex: <http://example.com#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix o-imf: <http://ns.imfid.org/templates/> .
@prefix ottr: <http://ns.ottr.xyz/0.4/> .
@prefix o-owl-ma: <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-ax: <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

imf:Aspect
    a owl:Class .

imf:AttributeGroup
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:allValuesFrom imf:AttributeGroupType ;
        owl:onProperty imf:instanceOf
    ] .

imf:AttributeGroupType
    a owl:Class ;
    rdfs:subClassOf imf:Type ;
    skos:prefLabel "Attribute Group Type" .

imf:AttributeType
    a owl:Class ;
    rdfs:subClassOf imf:Type ;
    skos:prefLabel "Attribute Type" .

imf:Attribute
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:allValuesFrom imf:AttributeType ;
        owl:onProperty imf:instanceOf
    ] .

imf:Block
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:allValuesFrom imf:BlockType ;
        owl:onProperty imf:instanceOf
    ] .

imf:BlockType
    a owl:Class ;
    rdfs:subClassOf imf:ElementType ;
    skos:prefLabel "Block Type" .

imf:Direction
    a owl:Class .

imf:Element
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:allValuesFrom imf:ElementType ;
        owl:onProperty imf:instanceOf
    ] .

imf:ElementType
    a owl:Class ;
    rdfs:subClassOf imf:Type, [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onDataRange rdfs:Literal ;
        owl:onProperty imf:symbol
    ], [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onClass imf:Aspect ;
        owl:onProperty imf:hasAspect
    ], [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onDataRange rdfs:Literal ;
        owl:onProperty skos:notation
    ] ;
    skos:prefLabel "Element Type" .

imf:Terminal
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:allValuesFrom imf:TerminalType ;
        owl:onProperty imf:instanceOf
    ] .

imf:TerminalType
    a owl:Class ;
    rdfs:subClassOf imf:ElementType, [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onClass imf:Direction ;
        owl:onProperty imf:hasDirection
    ], [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onClass owl:Thing ;
        owl:onProperty imf:hasMedium
    ] ;
    skos:prefLabel "Terminal Type" .

imf:Type
    a owl:Class ;
    skos:prefLabel "Type" .

imf:TypeConstraint
    a owl:Class ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onDataRange xsd:integer ;
        owl:onProperty imf:minCount
    ], [
        a owl:Restriction ;
        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
        owl:onDataRange xsd:integer ;
        owl:onProperty imf:maxCount
    ] .

imf:hasAspect
    a owl:ObjectProperty .

imf:hasDirection
    a owl:ObjectProperty .

imf:hasMedium
    a owl:ObjectProperty .

imf:hasTerminalType
    a owl:ObjectProperty ;
    rdfs:domain imf:BlockType ;
    rdfs:range imf:TerminalType .

imf:instanceOf
    a owl:ObjectProperty ;
    rdfs:range imf:Type ;
    skos:prefLabel "instance of" .

imf:maxCount
    a owl:DatatypeProperty .

imf:minCount
    a owl:DatatypeProperty .

imf:symbol
    a owl:DatatypeProperty .

<http://ns.imfid.org/imf-types>
    a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20230331/imf-types> ;
    skos:altLabel "IMF types ontology" ;
    skos:prefLabel "Information Modelling Framework Ontology: Types " ;
    skos:scopeNote """

    """ .

rdfs:Literal
    a rdfs:Datatype .

xsd:integer
    a rdfs:Datatype .

owl:Thing
    a owl:Class .

skos:notation
    a owl:DatatypeProperty .

#+end_example

*** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf-types.owl.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-types.owl.ttl : 0.20 sec : 96 Triples : 477.61 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf-types.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src

*** Diagram

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/imf-types.owl.ttl", output="out/owl/imf-types-overview.svg")

#+RESULTS:

[[./out/owl/imf-types-overview.svg]]

** OWL Ontology

#+NAME: owl-types-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/imf-types.owl.wottr.ttl :mkdirp yes
<<prefixes>>

<http://ns.imfid.org/imf-types> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20230331/imf-types> ;
    ## owl:imports <http://ns.imfid.org/20230331/imf-top> ;
    skos:prefLabel "Information Modelling Framework Ontology: Types " ;
    skos:altLabel "IMF types ontology" ;
    skos:scopeNote """

    """;
    .

<<owl-types-type>>
<<owl-types-instanceOf>>
<<owl-types-typeconstraint>>
<<owl-types-relationconstraints>>

#+END_SRC

#+RESULTS: owl-types-ontology
#+begin_example
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix ex:	<http://example.com#> .
@prefix imf:	<http://ns.imfid.org/imf#> .

@prefix p14:    <http://example.com/P14#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs:       <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-imf:	     <http://ns.imfid.org/templates/> .

<http://ns.imfid.org/imf-types> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20230331/imf-types> ;
    ## owl:imports <http://ns.imfid.org/20230331/imf-top> ;
    skos:prefLabel "Information Modelling Framework Ontology: Types " ;
    skos:altLabel "IMF types ontology" ;
    skos:scopeNote """

    """;
    .

imf:Type a owl:Class ;
  skos:prefLabel "Type";
  .

imf:ElementType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Element Type";
  .

imf:BlockType a owl:Class ;
  rdfs:subClassOf imf:ElementType ;
  skos:prefLabel "Block Type";
  .

imf:TerminalType a owl:Class ;
  rdfs:subClassOf imf:ElementType ;
  skos:prefLabel "Terminal Type";
  .

imf:AttributeType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Attribute Type";
  .

imf:AttributeGroupType a owl:Class ;
  rdfs:subClassOf imf:Type ;
  skos:prefLabel "Attribute Group Type";
  .

imf:hasTerminalType a owl:ObjectProperty ;
  rdfs:domain imf:BlockType ;
  rdfs:range imf:TerminalType ;
  .

imf:instanceOf a owl:ObjectProperty ;
  skos:prefLabel "instance of" ;
  rdfs:range imf:Type .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Element imf:instanceOf imf:ElementType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Block imf:instanceOf imf:BlockType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Terminal imf:instanceOf imf:TerminalType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:Attribute imf:instanceOf imf:AttributeType ) .

[] ottr:of o-owl-ax:SubObjectAllValuesFrom ;
   ottr:values ( imf:AttributeGroup imf:instanceOf imf:AttributeGroupType ) .
imf:TypeConstraint a owl:Class .

[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:TypeConstraint "1"^^xsd:nonNegativeInteger imf:minCount xsd:integer ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:TypeConstraint "1"^^xsd:nonNegativeInteger imf:maxCount xsd:integer ) .

[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger imf:hasAspect imf:Aspect ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger skos:notation rdfs:Literal ) .
[] ottr:of o-owl-ax:SubDataMaxCardinality ;
   ottr:values ( imf:ElementType "1"^^xsd:nonNegativeInteger imf:symbol rdfs:Literal ) .

[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:TerminalType "1"^^xsd:nonNegativeInteger imf:hasDirection imf:Direction ) .
[] ottr:of o-owl-ax:SubObjectMaxCardinality ;
   ottr:values ( imf:TerminalType "1"^^xsd:nonNegativeInteger imf:hasMedium owl:Thing ) .
#+end_example

* Converters                                                       :noexport:
* Example

[[./example/pumpingFunctionType.png]]

** Type

The types in the example is represented in the following Excel spreadsheet [[./example/pumpingFunctionType.xlsx]]

*** Type expansion: SHACL

#+BEGIN_SRC sh :exports none :results raw
java -jar bin/lutra.jar -f -L stottr -l out/ottr/shacl.stottr -I tabottr example/pumpingFunctionType.xlsx | rapper - -i turtle -o turtle -I 'http://example.com#' > example/pumpingFunctionType.xlsx.ttl
#+END_SRC

#+RESULTS:
rapper: Parsing file <stdin> with parser turtle and base URI http://example.com#
rapper: Serializing with serializer turtle and base URI http://example.com#
rapper: Parsing returned 167 triples

#+INCLUDE: "example/pumpingFunctionType.xlsx.ttl" src ttl

*** Type translation: OWL

#+CALL: py_run_sparql(query=sparql_shaclClass, data="example/pumpingFunctionType.xlsx.ttl")

#+RESULTS:
| ~class~         | ~imfClass~           | ~name~                             | ~description~ | ~severity~ | ~message~ |
|-----------------+----------------------+------------------------------------+---------------+------------+-----------|
| ~ex:sB-001~     | ~imf:Block~          | ~Pumping, liquid velocity~         |               |            |           |
| ~ex:sBAg-001~   | ~imf:AttributeGroup~ | ~Pumping purpose attributes~       |               |            |           |
| ~ex:sBAg-002~   | ~imf:AttributeGroup~ | ~Pumping supplementary attributes~ |               |            |           |
| ~ex:sBAttr-001~ | ~imf:Attribute~      | ~Fluid~                            |               |            |           |
| ~ex:sBAttr-002~ | ~imf:Attribute~      | ~Flowrate~                         |               |            |           |
| ~ex:sBAttr-003~ | ~imf:Attribute~      | ~Pressure delta~                   |               |            |           |
| ~ex:sBAttr-004~ | ~imf:Attribute~      | ~Suction pressure~                 |               |            |           |
| ~ex:sBAttr-005~ | ~imf:Attribute~      | ~Pressure delta~                   |               |            |           |
| ~ex:sBAttr-006~ | ~imf:Attribute~      | ~Pumping power~                    |               |            |           |
| ~ex:sBAttr-007~ | ~imf:Attribute~      | ~App standard~                     |               |            |           |
| ~ex:sBAttr-008~ | ~imf:Attribute~      | ~Client reqs~                      |               |            |           |
| ~ex:sBAttr-009~ | ~imf:Attribute~      | ~Noise regs~                       |               |            |           |
| ~ex:sT-001~     | ~imf:Terminal~       |                                    |               |            |           |
| ~ex:sT-002~     | ~imf:Terminal~       |                                    |               |            |           |
| ~ex:sT-003~     | ~imf:Terminal~       |                                    |               |            |           |

#+CALL: py_run_sparql(query=sparql_shaclClassRestriction, data="example/pumpingFunctionType.xlsx.ttl")

#+RESULTS:
| ~class~         | ~path~                  | ~minCount~ | ~maxCount~ | ~nodeTargetClass~ | ~hasValue~                 | ~in~ | ~datatype~    | ~minExclusive~ | ~minInclusive~ | ~maxExclusive~ | ~maxInclusive~ | ~minLength~ | ~maxLength~ | ~pattern~ | ~flags~ |
|-----------------+-------------------------+------------+------------+-------------------+----------------------------+------+---------------+----------------+----------------+----------------+----------------+-------------+-------------+-----------+---------|
| ~ex:sB-001~     | ~imf:hasTerminal~       | ~1~        | ~1~        | ~ex:sT-001~       |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:hasTerminal~       | ~1~        | ~1~        | ~ex:sT-002~       |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:hasAttributeGroup~ | ~1~        | ~1~        | ~ex:sBAg-002~     |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:aspect~            |            |            |                   | ~imf:functionAspect~       |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:symbol~            |            |            |                   | ~SP402~                    |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:classifier~        |            |            |                   | ~ns1:Pumping~              |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:hasTerminal~       | ~1~        | ~3~        | ~ex:sT-003~       |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sB-001~     | ~imf:hasAttributeGroup~ | ~1~        | ~1~        | ~ex:sBAg-001~     |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-001~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-002~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-003~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-004~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-005~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-001~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-006~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-002~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-007~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-002~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-008~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAg-002~   | ~imf:hasAttribute~      | ~1~        | ~1~        | ~ex:sBAttr-009~   |                            |      |               |                |                |                |                |             |             |           |         |
| ~ex:sBAttr-001~ | ~imf:value~             | ~1~        | ~1~        |                   |                            |      | ~xsd:integer~ |                | ~0~            |                | ~10000~        |             |             |           |         |
| ~ex:sT-001~     | ~imf:classifier~        |            |            |                   | ~ns1:RDS4233125~           |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-001~     | ~imf:direction~         |            |            |                   | ~imf:input~                |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-001~     | ~imf:media~             |            |            |                   | ~ns1:WaterMedium~          |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-001~     | ~imf:classifier~        |            |            |                   | ~ns1:RDS4233127~           |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-001~     | ~imf:direction~         |            |            |                   | ~imf:output~               |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-001~     | ~imf:media~             |            |            |                   | ~ns1:WaterMedium~          |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-002~     | ~imf:direction~         |            |            |                   | ~imf:input~                |      |               |                |                |                |                |             |             |           |         |
| ~ex:sT-002~     | ~imf:media~             |            |            |                   | ~ns1:MechanicalRotatation~ |      |               |                |                |                |                |             |             |           |         |

* Appendix
** Prefixes

This section contains the prefixes used throughout this document.

*** Standard vocabulary prefixes

#+NAME: prefixes-std
#+BEGIN_SRC ttl :tangle out/.std-prefixes.ttl
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .

@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix vs:     <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix vann:   <http://purl.org/vocab/vann/> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .

@prefix imf:	<http://ns.imfid.org/imf#> .
@prefix ex:	<http://example.com#> .
#+END_SRC

*** IMF prefixes

#+NAME: prefixes-imf
#+BEGIN_SRC ttl

@prefix p14:    <http://example.com/P14#> .
#+END_SRC

*** OTTR template prefixes

#+NAME: prefixes-ottr
#+BEGIN_SRC ttl
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs:       <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .

@prefix o-imf:	     <http://ns.imfid.org/templates/> .
@prefix o-imf-t-s:   <http://ns.imfid.org/templates/type/shacl/> .
@prefix o-imf-t-o:   <http://ns.imfid.org/templates/type/owl/> .

#+END_SRC

*** All prefixes combined                                          :noexport:

#+NAME: prefixes
#+BEGIN_SRC ttl :noweb yes
<<prefixes-std>>
<<prefixes-imf>>
<<prefixes-ottr>>
#+END_SRC

#+RESULTS: prefixes
#+begin_example
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix ex:	<http://example.com#> .
@prefix imf:	<http://ns.imfid.org/imf#> .

@prefix p14:    <http://example.com/P14#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs:       <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .

@prefix o-imf:	     <http://ns.imfid.org/templates/> .
@prefix o-imf-t-s:   <http://ns.imfid.org/templates/type/shacl/> .
#+end_example

#+NAME: py_prefixes_sparql
#+BEGIN_SRC python :var prefixes=prefixes 
output = ""

for p in prefixes.split("\n"):
  output += p.replace("@","").strip().strip(".") + "\n"

return output
#+END_SRC

#+RESULTS: py_prefixes_sparql
#+begin_example
prefix xsd:	<http://www.w3.org/2001/XMLSchema#> 
prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> 
prefix owl:    <http://www.w3.org/2002/07/owl#> 
prefix skos:	<http://www.w3.org/2004/02/skos/core#> 
prefix pav:	<http://purl.org/pav/> 
prefix sh: 	<http://www.w3.org/ns/shacl#> 
prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> 
prefix ex:	<http://example.com#> 
prefix imf:	<http://ns.imfid.org/imf#> 

prefix p14:    <http://example.com/P14#> 
prefix ottr:        <http://ns.ottr.xyz/0.4/> 
prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> 
prefix o-rdfs:       <http://tpl.ottr.xyz/rdfs/0.2/> 
prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> 
prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> 
prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> 

prefix o-imf:	     <http://ns.imfid.org/templates/> 
prefix o-imf-t-s:   <http://ns.imfid.org/templates/type/shacl/>
#+end_example




* Media                                                            :noexport:

  Media, taken from ~MaterialsBreakdownRev3.xlsx~.
  
  | 1           | 2          | 3            |
  |-------------+------------+--------------|
  | Material    |            |              |
  |             | Fluid      |              |
  |             |            | Process (HC) |
  |             |            | Water        |
  |             |            | Chemicals    |
  |             |            | Utilities    |
  |             | Solids     |              |
  |             |            | Granulate    |
  |             |            | Brick        |
  |-------------+------------+--------------|
  | Energy      |            |              |
  |             | Mechanical |              |
  |             |            | Rotating     |
  |             |            | Reciprocing  |
  |             | Electrical |              |
  |             |            | EHV          |
  |             |            | HV           |
  |             |            | LV           |
  |             |            | <50V         |
  |             | Thermal    |              |
  |             |            | Liquid       |
  |             |            | Steam        |
  |             |            | Burner       |
  |             |            | Air          |
  |             |            | Electric     |
  |-------------+------------+--------------|
  | Force       |            |              |
  |             | Mechanical |              |
  |             |            | Support      |
  |             |            | Connect      |
  |             |            | Restrain     |
  |-------------+------------+--------------|
  | Information |            |              |
  |             | Electrical |              |
  |             |            | Wired        |
  |             |            | Bus          |
  |             | Optical    |              |
  |             |            | Digital      |
  |             | Wireless   |              |
  |             |            | Digital      |


                           



* System setup                                                     :noexport:
** Apache Jena

https://jena.apache.org/:

"A free and open source Java framework for building Semantic Web and
Linked Data applications", including reading and writing RDF, SHACL
validation and SPARQL query processing.

This section contains the script calls used for processing the RDF
code snippets in this document.

*** Download

#+BEGIN_SRC sh :results raw
cd bin
wget -O apache-jena.zip -nc -x https://dlcdn.apache.org/jena/binaries/apache-jena-4.4.0.zip
unzip apache-jena.zip
mv apache-jena-4.4.0 apache-jena
#+END_SRC

#+RESULTS:
File ‚Äòapache-jena.zip‚Äô already there; not retrieving.
Archive:  apache-jena.zip
   creating: apache-jena-4.4.0/
   creating: apache-jena-4.4.0/bin/
   creating: apache-jena-4.4.0/bat/
   creating: apache-jena-4.4.0/src-examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/bin/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/aggregates/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/constructquads/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/engine/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/filter/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/helloworld/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/pizza/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/streaming/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/ontologies/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/jena_examples/
   creating: apache-jena-4.4.0/src-examples/data/
   creating: apache-jena-4.4.0/src-examples/jena/
   creating: apache-jena-4.4.0/src-examples/jena/examples/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/
   creating: apache-jena-4.4.0/src-examples/jena/examples/rdf/
   creating: apache-jena-4.4.0/lib/
   creating: apache-jena-4.4.0/lib-src/
  inflating: apache-jena-4.4.0/README  
  inflating: apache-jena-4.4.0/LICENSE  
  inflating: apache-jena-4.4.0/NOTICE  
  inflating: apache-jena-4.4.0/bin/arq  
  inflating: apache-jena-4.4.0/bin/infer  
  inflating: apache-jena-4.4.0/bin/iri  
  inflating: apache-jena-4.4.0/bin/jena  
  inflating: apache-jena-4.4.0/bin/jena.version  
  inflating: apache-jena-4.4.0/bin/juuid  
  inflating: apache-jena-4.4.0/bin/nquads  
  inflating: apache-jena-4.4.0/bin/ntriples  
  inflating: apache-jena-4.4.0/bin/qparse  
  inflating: apache-jena-4.4.0/bin/rdfcat  
  inflating: apache-jena-4.4.0/bin/rdfcompare  
  inflating: apache-jena-4.4.0/bin/rdfcopy  
  inflating: apache-jena-4.4.0/bin/rdfdiff  
  inflating: apache-jena-4.4.0/bin/rdfparse  
  inflating: apache-jena-4.4.0/bin/rdfxml  
  inflating: apache-jena-4.4.0/bin/riot  
  inflating: apache-jena-4.4.0/bin/rset  
  inflating: apache-jena-4.4.0/bin/rsparql  
  inflating: apache-jena-4.4.0/bin/rupdate  
  inflating: apache-jena-4.4.0/bin/schemagen  
  inflating: apache-jena-4.4.0/bin/shacl  
  inflating: apache-jena-4.4.0/bin/shex  
  inflating: apache-jena-4.4.0/bin/sparql  
  inflating: apache-jena-4.4.0/bin/tdb1.xloader  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbbackup  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbcompact  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbdump  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbloader  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbquery  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbstats  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbupdate  
  inflating: apache-jena-4.4.0/bin/tdb2.xloader  
  inflating: apache-jena-4.4.0/bin/tdbbackup  
  inflating: apache-jena-4.4.0/bin/tdbdump  
  inflating: apache-jena-4.4.0/bin/tdbloader  
  inflating: apache-jena-4.4.0/bin/tdbloader2  
  inflating: apache-jena-4.4.0/bin/tdbquery  
  inflating: apache-jena-4.4.0/bin/tdbstats  
  inflating: apache-jena-4.4.0/bin/tdbupdate  
  inflating: apache-jena-4.4.0/bin/trig  
  inflating: apache-jena-4.4.0/bin/turtle  
  inflating: apache-jena-4.4.0/bin/uparse  
  inflating: apache-jena-4.4.0/bin/update  
  inflating: apache-jena-4.4.0/bin/utf8  
  inflating: apache-jena-4.4.0/bin/wwwdec  
  inflating: apache-jena-4.4.0/bin/wwwenc  
  inflating: apache-jena-4.4.0/bin/xload-common  
  inflating: apache-jena-4.4.0/bin/xload-data  
  inflating: apache-jena-4.4.0/bin/xload-index  
  inflating: apache-jena-4.4.0/bin/xload-main  
  inflating: apache-jena-4.4.0/log4j2.properties  
  inflating: apache-jena-4.4.0/bat/arq.bat  
  inflating: apache-jena-4.4.0/bat/infer.bat  
  inflating: apache-jena-4.4.0/bat/iri.bat  
  inflating: apache-jena-4.4.0/bat/jena_version.bat  
  inflating: apache-jena-4.4.0/bat/juuid.bat  
  inflating: apache-jena-4.4.0/bat/nquads.bat  
  inflating: apache-jena-4.4.0/bat/ntriples.bat  
  inflating: apache-jena-4.4.0/bat/qparse.bat  
  inflating: apache-jena-4.4.0/bat/rdfcat.bat  
  inflating: apache-jena-4.4.0/bat/rdfcompare.bat  
  inflating: apache-jena-4.4.0/bat/rdfcopy.bat  
  inflating: apache-jena-4.4.0/bat/rdfdiff.bat  
  inflating: apache-jena-4.4.0/bat/rdfparse.bat  
  inflating: apache-jena-4.4.0/bat/rdfxml.bat  
  inflating: apache-jena-4.4.0/bat/riot.bat  
  inflating: apache-jena-4.4.0/bat/rset.bat  
  inflating: apache-jena-4.4.0/bat/rsparql.bat  
  inflating: apache-jena-4.4.0/bat/rupdate.bat  
  inflating: apache-jena-4.4.0/bat/schemagen.bat  
  inflating: apache-jena-4.4.0/bat/shacl.bat  
  inflating: apache-jena-4.4.0/bat/shex.bat  
  inflating: apache-jena-4.4.0/bat/sparql.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbbackup.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbcompact.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbdump.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbloader.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbquery.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbstats.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbupdate.bat  
  inflating: apache-jena-4.4.0/bat/tdbbackup.bat  
  inflating: apache-jena-4.4.0/bat/tdbdump.bat  
  inflating: apache-jena-4.4.0/bat/tdbloader.bat  
  inflating: apache-jena-4.4.0/bat/tdbquery.bat  
  inflating: apache-jena-4.4.0/bat/tdbstats.bat  
  inflating: apache-jena-4.4.0/bat/tdbupdate.bat  
  inflating: apache-jena-4.4.0/bat/trig.bat  
  inflating: apache-jena-4.4.0/bat/turtle.bat  
  inflating: apache-jena-4.4.0/bat/uparse.bat  
  inflating: apache-jena-4.4.0/bat/update.bat  
  inflating: apache-jena-4.4.0/bat/utf8.bat  
  inflating: apache-jena-4.4.0/bat/wwwdec.bat  
  inflating: apache-jena-4.4.0/bat/wwwenc.bat  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/README.md  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/bin/get-data  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/pom.xml  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExModelStore01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExModification01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExProg1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExProg2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySelect1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySelect2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySubstitute_01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExamplesServer.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/aggregates/CustomAggregate.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/AlgebraEx.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/AlgebraExec.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth00_Setup.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth01_RDFConnectionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth02_QueryExecutionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth03_UpdateExecutionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth04_ServicePW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/OpExecutorAlt.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/StageAltMain.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/StageGeneratorAlt.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/constructquads/ExampleConstructQuads.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/filter/classify.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/labelSearch.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/localname.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/uppercase.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT1_ReadModel.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT2_ReadDataset.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT3_RDFParser.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT4_StreamRDF_Filter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT5_StreamRDFCollect.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT6_AddNewReader.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT7_AddNewWriter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT8_RelativeURIs.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT9_AsyncParser.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_RDFXML_ReaderProperties.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_RDFXML_WriteProperties.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_writeModel.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_writeRDF.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/Ex_WriteJsonLD.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateExecuteOperations.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateProgrammatic.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateReadFromFile.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/Base.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/CheeseBase.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/helloworld/HelloWorld.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/pizza/PizzaSparqlNoInf.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/streaming/StreamRDFToConnection.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample4.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample5.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample6.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/Shacl01_validateGraph.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/Shacl02_validateTransaction.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex01_validateGraph.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex02_validateNode.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex03_validate.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExQuadFilter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB4.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB5.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB6.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/cheeses-0.1.ttl  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/pizza.owl.rdf  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/ontologies/cheese.ttl  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/jena_examples/AppTest.java  
  inflating: apache-jena-4.4.0/src-examples/data/camera.owl  
  inflating: apache-jena-4.4.0/src-examples/data/eswc-2006-09-21.rdf  
  inflating: apache-jena-4.4.0/src-examples/data/test1.owl  
  inflating: apache-jena-4.4.0/src-examples/data/test2.owl  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/ClassHierarchy.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/Main.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/DescribeClass.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/Main.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial01.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial02.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial03.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial04.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial05.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial06.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial07.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial08.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial09.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial10.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial11.java  
  inflating: apache-jena-4.4.0/lib/jena-arq-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jsonld-java-0.13.4.jar  
  inflating: apache-jena-4.4.0/lib/commons-io-2.11.0.jar  
  inflating: apache-jena-4.4.0/lib/httpclient-cache-4.5.13.jar  
  inflating: apache-jena-4.4.0/lib/httpclient-4.5.13.jar  
  inflating: apache-jena-4.4.0/lib/httpcore-4.4.15.jar  
  inflating: apache-jena-4.4.0/lib/jcl-over-slf4j-1.7.35.jar  
  inflating: apache-jena-4.4.0/lib/jackson-core-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/jackson-databind-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/jackson-annotations-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/titanium-json-ld-1.2.0.jar  
  inflating: apache-jena-4.4.0/lib/jakarta.json-2.0.1.jar  
  inflating: apache-jena-4.4.0/lib/protobuf-java-3.19.3.jar  
  inflating: apache-jena-4.4.0/lib/libthrift-0.15.0.jar  
  inflating: apache-jena-4.4.0/lib/javax.annotation-api-1.3.2.jar  
  inflating: apache-jena-4.4.0/lib/commons-lang3-3.12.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-core-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-base-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shaded-guava-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-csv-1.9.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-codec-1.15.jar  
  inflating: apache-jena-4.4.0/lib/commons-compress-1.21.jar  
  inflating: apache-jena-4.4.0/lib/collection-0.7.jar  
  inflating: apache-jena-4.4.0/lib/jena-iri-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-cli-1.5.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-tdb-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-rdfconnection-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shacl-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shex-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-cmds-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-tdb2-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-storage-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-trans-data-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-transaction-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-base-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-index-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/slf4j-api-1.7.35.jar  
  inflating: apache-jena-4.4.0/lib/log4j-slf4j-impl-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib/log4j-api-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib/log4j-core-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-arq-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-core-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-tdb-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-rdfconnection-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-shacl-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-shex-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-cmds-4.4.0-sources.jar  

*** RIOT

Reading, writing and validating RDF.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/riot --help
#+END_SRC

#+RESULTS:
#+begin_example
riot [--help] [--time] [--base=IRI] [-syntax=FORMAT] [--out=FORMAT] [--count] file ...
  Parser control
      --sink                 Parse but throw away output
      --syntax=NAME          Set syntax (otherwise syntax guessed from file extension)
      --base=URI             Set the base URI (does not apply to N-triples and N-Quads)
      --check                Additional checking of RDF terms
      --strict               Run with in strict mode
      --validate             Same as --sink --check --strict
      --count                Count triples/quads parsed, not output them
      --rdfs=file            Apply some RDFS inference using the vocabulary in the file
      --nocheck              Turn off checking of RDF terms
  Output control
      --output=FMT           Output in the given format, streaming if possible.
      --formatted=FMT        Output, using pretty printing (consumes memory)
      --stream=FMT           Output, using a streaming format
      --compress             Compress the output with gzip
  Time
      --time                 Time the operation
  Symbol definition
      --set                  Set a configuration symbol to a value
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
#+end_example

#+NAME: sh_jena_validate_rdf
#+BEGIN_SRC sh :results output verbatim :var syntax="TTL" :var files="out/owl/imf.owl.ttl"
bin/apache-jena/bin/riot --verbose --syntax=$syntax --validate --time $files 
#+END_SRC

#+RESULTS: sh_jena_validate_rdf
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf.owl.ttl : 0.22 sec : 494 Triples : 2,235.29 per second

#+NAME: sh_jena_merge
#+BEGIN_SRC sh :results output verbatim :var syntax="TTL" :var files="out/owl/imf-elements.owl.ttl out/owl/imf-attributes.owl.ttl" :var out="out/owl/imf.owl.ttl"
bin/apache-jena/bin/riot --verbose --syntax=$syntax --check --time $files > $out
#+END_SRC

#+RESULTS: sh_jena_merge
: 08:47:29 INFO  riot            :: File: out/owl/imf-elements.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-elements.owl.ttl : 0.19 sec : 146 Triples : 768.42 per second
: 08:47:29 INFO  riot            :: File: out/owl/imf-attributes.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-attributes.owl.ttl : 0.02 sec : 140 Triples : 7,000.00 per second
: Total           : 0.21 sec : 286 Triples : 1,361.90 per second

*** SHACL

Validate RDF wrt. SHACL shapes.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/shacl v --help
#+END_SRC

#+RESULTS:
#+begin_example
shacl_validate [--target URI] --shapes shapesFile --data dataFile
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
      --shapes               Shapes file
      --data                 Data file
      --target               Validate specific node [may use prefixes from the data]
      --text                 Output in concise text format
#+end_example

#+NAME: sh_jena_shacl_validate
#+BEGIN_SRC sh :results output raw :var shapes="shapefile" :var data="rdf-examples/coffee-machine.ttl" :wrap src ttl
echo "Result of validating RDF data <$data> against SHACL shape <$shapes>:"
date +'%Y-%m-%d'
bin/apache-jena/bin/shacl v --text --shapes $shapes --data $data
#+END_SRC

#+RESULTS: sh_jena_shacl_validate
#+BEGIN_src ttl
Result of validating RDF data <rdf-examples/coffee-machine.ttl> against SHACL shape <shapefile>:
2023-06-15
Loading shapes file
org.apache.jena.riot.RiotNotFoundException: Not found: shapefile
	at org.apache.jena.riot.RDFParser.openTypedInputStream(RDFParser.java:409)
	at org.apache.jena.riot.RDFParser.parseURI(RDFParser.java:316)
	at org.apache.jena.riot.RDFParser.parse(RDFParser.java:310)
	at org.apache.jena.riot.RDFParserBuilder.parse(RDFParserBuilder.java:552)
	at org.apache.jena.riot.RDFDataMgr.parseFromURI(RDFDataMgr.java:737)
	at org.apache.jena.riot.RDFDataMgr.read(RDFDataMgr.java:193)
	at org.apache.jena.riot.RDFDataMgr.read(RDFDataMgr.java:135)
	at org.apache.jena.riot.RDFDataMgr.loadGraph(RDFDataMgr.java:352)
	at shacl.shacl_validate.load(shacl_validate.java:134)
	at shacl.shacl_validate.exec(shacl_validate.java:106)
	at org.apache.jena.cmd.CmdMain.mainMethod(CmdMain.java:92)
	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:58)
	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:45)
	at shacl.shacl_validate.main(shacl_validate.java:60)
	at shacl.shacl.main(shacl.java:81)
#+END_src


#+NAME: sh_jena_shacl_imf_validate
#+BEGIN_SRC sh :results output raw :var data="rdf-examples/coffee-machine.ttl" :wrap src ttl
bin/apache-jena/bin/shacl v --text --shapes shacl/imf-all.shacl.ttl --data $data
#+END_SRC

#+RESULTS: sh_jena_shacl_imf_validate
#+BEGIN_src ttl
Loading shapes file
org.apache.jena.riot.RiotNotFoundException: Not found: shacl/imf-all.shacl.ttl
	at org.apache.jena.riot.RDFParser.openTypedInputStream(RDFParser.java:409)
	at org.apache.jena.riot.RDFParser.parseURI(RDFParser.java:316)
	at org.apache.jena.riot.RDFParser.parse(RDFParser.java:310)
	at org.apache.jena.riot.RDFParserBuilder.parse(RDFParserBuilder.java:552)
	at org.apache.jena.riot.RDFDataMgr.parseFromURI(RDFDataMgr.java:737)
	at org.apache.jena.riot.RDFDataMgr.read(RDFDataMgr.java:193)
	at org.apache.jena.riot.RDFDataMgr.read(RDFDataMgr.java:135)
	at org.apache.jena.riot.RDFDataMgr.loadGraph(RDFDataMgr.java:352)
	at shacl.shacl_validate.load(shacl_validate.java:134)
	at shacl.shacl_validate.exec(shacl_validate.java:106)
	at org.apache.jena.cmd.CmdMain.mainMethod(CmdMain.java:92)
	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:58)
	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:45)
	at shacl.shacl_validate.main(shacl_validate.java:60)
	at shacl.shacl.main(shacl.java:81)
#+END_src


#+NAME: sh_jena_shacl_std_validate
#+BEGIN_SRC sh :results output raw :var data="out/owl/imf.owl.ttl" :wrap src ttl
echo "Result of validating RDF data <$data> against SHACL shape <http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl>:\n"
bin/apache-jena/bin/shacl v --text --shapes http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl --data $data
#+END_SRC

#+RESULTS: sh_jena_shacl_std_validate
#+BEGIN_src ttl
Result of validating data <out/owl/imf.owl.ttl> against shape <http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl>:

Conforms
#+END_src

*** SPARQL

Query RDF.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/sparql --help
#+END_SRC

#+RESULTS:
#+begin_example
sparql --data=<file> --query=<query>
  Control
      --explain              Explain and log query execution
      --repeat=N or N,M      Do N times or N warmup and then M times (use for timing to overcome start up costs of Java)
      --optimize=            Turn the query optimizer on or off (default: on)
  Time
      --time                 Time the operation
  Query Engine
      --engine=EngineName    Register another engine factory[ref]
      --unengine=EngineName   Unregister an engine factory
  Dataset
      --data=FILE            Data for the dataset - triple or quad formats
      --graph=FILE           Graph for default graph of the datset
      --namedGraph=FILE      Add a graph into the dataset as a named graph
  Results
      --results=             Results format (Result set: text, XML, JSON, CSV, TSV; Graph: RDF serialization)
      --desc=                Assembler description file
  Query
      --query, --file        File containing a query
      --syntax, --in         Syntax of the query
      --base                 Base URI for the query
  Symbol definition
      --set                  Set a configuration symbol to a value
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
      --strict               Operate in strict SPARQL mode (no extensions of any kind)
#+end_example


#+NAME: sh_jena_sparql
#+BEGIN_SRC sh :results output :var query="PREFIX imf: <http://ns.imfid.org/imf#> SELECT * {?s ?p ?o} LIMIT 1" :var files="out/owl/imf.owl.ttl" :hlines yes :exports both
echo "$query" > out/temp/.temp-sh_jena_sparql
bin/apache-jena/bin/sparql --results=text --data=$files --query out/temp/.temp-sh_jena_sparql
#+END_SRC

#+RESULTS: sh_jena_sparql
: ---------------------------------------------------------------------------------------------------------------
: | s    | p                                                 | o                                                |
: ===============================================================================================================
: | _:b0 | <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> | <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> |
: ---------------------------------------------------------------------------------------------------------------



** Lutra

Lutra is the reference implementation for working with OTTR templates
and instances.

This section contains the scripts that are used to expand the OTTR
instances found in this document.

#+BEGIN_SRC sh 
cd bin
wget -O lutra.jar -nc -x http://ottr.xyz/downloads/lutra/lutra-master.jar
#+END_SRC

#+RESULTS:

#+NAME: lutra-help
#+BEGIN_SRC sh :results output verbatim
java -jar bin/lutra.jar --help
#+END_SRC

#+RESULTS: lutra-help
#+begin_example
Usage: lutra [-fhV] [--debugFullTrace] [--debugStackTrace] [--quiet] [--stdout]
             [-F=<fetchFormat>] [--haltOn=<haltOn>] [-I=<inputFormat>]
             [-L=<libraryFormat>] [-m=<mode>] [-o=<out>] [-O=<outputFormat>]
             [-p=<prefixes>] [-e=<extensions>[,<extensions>...]]...
             [-E=<ignoreExtensions>[,<ignoreExtensions>...]]...
             [-l=<library>]... [<inputs>...]

DESCRIPTION:
Reference implementation for OTTR Templates. Use for expanding template
instances and template definitions, translating between different formats and
for checking the integrity of template libraries.

PARAMETERS:
      [<inputs>...]         Files of instances to which operations are to be
                              applied.

OPTIONS:
      --debugFullTrace      This enables tracing such that printed messages get
                              a stack trace giving more information on the
                              location of the concerned objects. NB! Enabling
                              this flag will deteriorate performance.
                            default: false)
      --debugStackTrace     This enables printing a regular java stack trace
                              for error messages.Enabling this flag will not
                              deteriorate performance.
                            default: false)
  -e, --extension=<extensions>[,<extensions>...]
                            File extension of files to use as input to template
                              library.
                            (default: [])
  -E, --ignoreExtension=<ignoreExtensions>[,<ignoreExtensions>...]
                            File extensions of files to ignore as input to
                              template library.
                            (default: [])
  -f, --fetchMissing        Fetch missing template dependencies. It is here
                              assumed that templates' definitions are
                              accessible via their IRI, that is, the IRI is
                              either a path to a file, a URL, or similar.
                            (default: false)
  -F, --fetchFormat=<fetchFormat>
                            The input format of the templates fetched via the
                              -f flag.
  -h, --help                Show this help message and exit.
      --haltOn=<haltOn>     Halt execution upon receiving messages with a
                              severity equal to or greater than this value.
                            (legal values: INFO, WARNING, ERROR, FATAL;
                              default: ERROR)
  -I, --inputFormat=<inputFormat>
                            Input format of instances.
                            (legal values: wottr, stottr, tabottr, bottr
                              default: wottr)
  -l, --library=<library>   Folder containing templates to use as library. Can
                              be used multiple times for multiple libraries.
  -L, --libraryFormat=<libraryFormat>
                            The input format of the libraries. If omitted, all
                              available formats are attempted.
                            (legal values: wottr, stottr)
  -m, --mode=<mode>         The mode of operation to be applied to input.
                            (legal values: expand, expandLibrary, format,
                              formatLibrary, lint, checkSyntax, docttrLibrary;
                              default: expand)
  -o, --output=<out>        Path for writing output.
  -O, --outputFormat=<outputFormat>
                            Output format of output of operation defined by the
                              mode.
                            (legal values: wottr, stottr; default: wottr)
  -p, --prefixes=<prefixes> Path to RDF file containing prefix declarations to
                              be used when rendering output.    Any other data
                              in the file is read, but ignored.
      --quiet               Suppress all messages, including errors and
                              warnings.
                            (default: false)
      --stdout              Print system of operations to standard out.
                            (default: false)
  -V, --version             Print version information and exit.

LINKS:
Website:  https://ottr.xyz
Primers:  https://primer.ottr.xyz
Git repo: https://gitlab.com/ottr/lutra/lutra
#+end_example

#+NAME: lutra-expand
#+BEGIN_SRC sh :results output verbatim :var in="out/owl/imf-aspects.owl.wottr.ttl" :var inFormat="wottr" :var out="out/owl/imf-aspects.owl.ttl"
java -jar bin/lutra.jar -l out/ottr -L stottr -f -p out/.std-prefixes.ttl -I $inFormat -o $in.temp $in 
rapper -i turtle -o turtle $in.temp > $out
cat $out
#+END_SRC

#+RESULTS: lutra-expand
** RDFVizler with rules

https://rdfvizler.dyreriket.xyz/:

#+BEGIN_QUOTE
RDFVizler is a simple RDF visualisation software built with the Apache
Jena Java API and Graphviz visualisation software. It requires Java 8
and Graphviz to be installed on the system.

RDFVizler visualises RDF graphs by parsing a designated RDFVizler OWL
vocabulary into Graphviz's DOT language and then straight-forwardly to
images using the Graphviz software. The RDFVizler vocabulary acts as a
mere "RDF wrapper language" for the DOT language, all graph, edge and
node attributes are taken directly from DOT."
#+END_QUOTE

*** TODO Script calls

TODO: setup download

#+BEGIN_SRC sh :results output verbatim
java -jar bin/rdfvizler.jar --help
#+END_SRC

#+RESULTS:
#+begin_example

RDFVizler: RDF visualisation

Usage:
java -jar rdfvizler-[version].jar [--help] [--mergeInput] [--skipRules]
                                  [--version]
                                  [--inputFormatRDF=<inputFormatRDF>]
                                  [--outputFormatRDF=<outputFormatRDF>]
                                  [-i=<outputFormatImage>] [-r=<rules>]
                                  [-x=<mode>] RDF_FILES...

Description:
RDFVizler visualises RDF by parsing a designated RDF RDFVizler vocabulary into
Graphviz syntax and processing this to a graph using Graphviz' dot software.
For more details, see http://rdfvizler.dyreriket.xyz.

Parameters:
      RDF_FILES...      Input RDF: URIs or file paths

Options:
  -x, --executionMode=<mode>
                        What output to produce. (legal values: rdf, dot, image;
                          default: image)
  -r, --rules=<rules>   Input rules: URI or file path (default: http://rdfvizler.
                          dyreriket.xyz/rules/rdf.jrule)
      --skipRules       Skip rule application to input? (default: false)
      --inputFormatRDF=<inputFormatRDF>
                        Format of RDF input (legal values: rdf, ttl, nt, guess;
                          default: guess -- by file extension as per jena.util.
                          FileUtils, then Turtle)
      --mergeInput      Merge input files to a single model to visualise?
      --outputFormatRDF=<outputFormatRDF>
                        Format of RDF output (legal values: rdf, ttl, nt, guess;
                          default: rdf)
  -i, --outputFormatImage=<outputFormatImage>
                        Format of image output (legal values: PNG, SVG,
                          SVG_STANDALONE, DOT, XDOT, PLAIN, PLAIN_EXT, PS, PS2,
                          JSON, JSON0, IMAP, CMAPX; default: SVG_STANDALONE)
      --version         Display version info
      --help            Display this help message
#+end_example


#+NAME: rdfvizler
#+BEGIN_SRC sh :results output verbatim :var rules="out/rdfvizler/import-hierarchy.rule" :var data="out/owl/imf.owl.ttl" :var output="out/.output-rdfvizler.svg"
java -jar bin/rdfvizler.jar --rules=$rules $data > $output
#+END_SRC

#+RESULTS: rdfvizler
#+begin_example
Exception in thread "main" picocli.CommandLine$ExecutionException: Error while running command (xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI@66498326): org.apache.jena.shared.RulesetNotFoundException: out/rdfvizler/import-hierarchy.rule
	at picocli.CommandLine.execute(CommandLine.java:1056)
	at picocli.CommandLine.access$900(CommandLine.java:142)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1255)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1223)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1131)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1414)
	at picocli.CommandLine.run(CommandLine.java:1878)
	at picocli.CommandLine.run(CommandLine.java:1808)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.main(RDFVizlerCLI.java:133)
Caused by: org.apache.jena.shared.RulesetNotFoundException: out/rdfvizler/import-hierarchy.rule
	at org.apache.jena.reasoner.rulesys.Rule.rulesFromURL(Rule.java:511)
	at org.apache.jena.reasoner.rulesys.Rule.rulesFromURL(Rule.java:524)
	at xyz.dyreriket.rdfvizler.RDFVizler.getRules(RDFVizler.java:39)
	at xyz.dyreriket.rdfvizler.RDFVizler.getRDFDotModel(RDFVizler.java:72)
	at xyz.dyreriket.rdfvizler.RDFVizler.writeDotGraph(RDFVizler.java:105)
	at xyz.dyreriket.rdfvizler.RDFVizler.writeDotGraph(RDFVizler.java:111)
	at xyz.dyreriket.rdfvizler.RDFVizler.write(RDFVizler.java:99)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.processFile(RDFVizlerCLI.java:156)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.run(RDFVizlerCLI.java:166)
	at picocli.CommandLine.execute(CommandLine.java:1048)
	... 8 more
#+end_example

*** Prefixes                                                       :noexport:

#+NAME: prefixes-rdfvizler
#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/imf-data.rule :mkdirp yes
<<prefixes>>
@prefix rvz:  <http://rdfvizler.dyreriket.xyz/vocabulary/core#> .
@prefix rvz-a: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute#> .
@prefix rvz-n: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute-default-node#> .
@prefix rvz-e: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute-default-edge#> .
@prefix :      <urn:temp#>
#+END_SRC

*** IMF data, old                                                  :noexport:

#+BEGIN_SRC ttl :noweb yes :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:nodesep "1")
        (:graph rvz-a:ranksep "1")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")
        (:graph rvz-a:splines "ortho")
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        (:graph rvz-n:height ".3")
        (:graph rvz-n:width ".3")
        (:graph rvz-n:fixedsize "true")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

### SELECTION: This rule selects the triples to be drawn. Selection is
### done on the basis of predicates. ONLY the nodes and edges selected
### here appear in the diagram.

    [triples:
        (?s ?p ?o)
        equalssome(?p, imf:hasPart, imf:hasTerminal, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs) 
        makeSkolem(?edge, ?s, ?p, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

### EDGE FORMATTING

# constraint=false, see https://graphviz.org/docs/attrs/constraint/
    [imf:no-constraint:
        (?edge :predicate ?p)
        equalssome(?p, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs)
        ->
        (?edge rvz-a:constraint "false")
        ]

    [imf:hasPart:
        (?edge :predicate imf:hasPart)
        ->
        (?edge rvz-a:arrowtail "empty")
        (?edge rvz-a:dir "back")
        ]
        
    [imf:connectedTo:
        (?edge :predicate imf:connectedTo)
        ->
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:color "gray50")
        (?edge rvz-a:style "dashed")
        ]
    [imf:hasTerminal:
        (?edge :predicate imf:hasTerminal)
        ->
        (?edge rvz-a:arrowhead "none")
        ]


    [imf:hasLocation:
        (?edge :predicate imf:hasLocation)
        ->
        (?edge rvz-a:color "magenta")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

    [imf:fullfilledBy:
        (?edge :predicate imf:fulfilledBy)
        ->
        (?edge rvz-a:color "cyan")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

    [imf:installedAs:
        (?edge :predicate imf:installedAs)
        ->
        (?edge rvz-a:color "skyblue2")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

### NODE FORMATTING
### labels and URIs

    [Nodes:
        (:graph rvz:hasNode ?node)
        shortvalue(?node, ?name)
        ->
        //(?node rvz-a:label "")
        (?node rvz-a:label ?name)
        (?node rvz-a:style "filled")
        (?node rvz-a:URL ?node)
        ]

### Shapes: move these to ontology

    [Transport-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Transport)
        ->
        (?node rvz-a:shape "hexagon")
        ]

    [Interface-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Interface)
        ->
        (?node rvz-a:shape "triangle")
        (?node rvz-a:orientation "90")
        ]

    [Terminal-block-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Terminal)
        -> (?node rvz-a:shape "doublecircle")
        ]

    [System-block-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:FunctionalBlock)
        -> (?node rvz-a:shape "square")
        ]


### Colours

    [Aspect-colour:
        (:graph rvz:hasNode ?node)
        (?node imf:hasAspect ?aspect)(?aspect imf:color ?color)
        ->
        (?node rvz-a:fillcolor ?color)
        ]

#+END_SRC

*** Ontology import hierarchy

This rule set visualises the owl:imports hierarchy.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/ontology-import-hierarchy.rule :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")       
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

    [imports:
        (?ont owl:versionIRI ?iri)
        (?ont owl:imports ?import)
        makeSkolem(?_edge, ?iri, ?import)
        ->
        (:graph rvz:hasEdge ?_edge)
        (:graph rvz:hasNode ?iri)
        (:graph rvz:hasNode ?import)
        (?_edge rvz:hasSource ?iri)
        (?_edge rvz:hasTarget ?import)
        ]
#+END_SRC

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-import-hierarchy.rule", output="out/temp/.ontology-import-hierarchy.svg")

#+RESULTS:

*** Ontology overview

This rule set creates a overview visualisation of an ontology taking
only the "easy to visualise" structures like classes, subclass
relations, properties with their domain and range, and instances.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/ontology-overview.rule :mkdirp yes
<<prefixes-rdfvizler>>

    [init-graph:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "BT")
        (:graph rvz-a:center "true")
        // node defaults
	(:graph rvz-n:shape "box")
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

    [class:
        (?s rdf:type owl:Class)
	notBNode(?s)
        ->
        (:graph rvz:hasNode ?s)
        ]

    [individual:
        (:graph rvz:hasNode ?s)
        (?i rdf:type ?s)
        makeSkolem(?edge, ?i, rdf:type, ?s)
        ->
        (:graph rvz:hasNode ?i)
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate rdf:type)
        (?edge rvz-a:style "dotted")
        (?edge rvz:hasSource ?i)
        (?edge rvz:hasTarget ?s)
        ]

    [label-node:
        (:graph rvz:hasNode ?node)
        shortvalue(?node ?label)
        ->
	(?node rvz-a:label ?label)
        ]

    [subclass:
        (?s rdfs:subClassOf ?o)
        makeSkolem(?edge, ?s, rdfs:subClassOf, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (?edge rvz-a:arrowhead "empty")
        (?edge rvz-a:dir "forward")
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

    [property:
        (?p rdfs:domain ?domain)
        (?p rdfs:range ?range)
        shortvalue(?p ?label)
        makeSkolem(?edge, ?domain, ?p, ?range)
        ->
        (:graph rvz:hasEdge ?edge)
        (:graph rvz:hasNode ?domain)
        (:graph rvz:hasNode ?range)
        (?edge :predicate ?p)
	(?edge rvz-a:label ?label)
        (?edge rvz:hasSource ?domain)
        (?edge rvz:hasTarget ?range)
        ]

    [SubObjectExactCardinality:
        (?i ottr:of o-owl-ax:SubObjectExactCardinality)
        (?i ottr:values ?arg1)
	(?arg1 rdf:first ?domain)
	(?arg1 rdf:rest ?arg2)
	(?arg2 rdf:first ?card)
	(?arg2 rdf:rest ?arg3)
	(?arg3 rdf:first ?property)
	(?arg3 rdf:rest ?arg4)
	(?arg4 rdf:first ?range)
	shortvalue(?property ?plabel)
	strConcat(?plabel, " ", ?card, ?label)
        makeSkolem(?edge, ?domain, ?card, ?property, ?range)
	->
        (:graph rvz:hasEdge ?edge)
        (:graph rvz:hasNode ?domain)
        (:graph rvz:hasNode ?range)
        (?edge :predicate ?property)
	(?edge rvz-a:label ?label)
        (?edge rvz-a:constraint "false")
        (?edge rvz-a:dir "forward")
        (?edge rvz-a:arrowhead "teetee")
        (?edge rvz:hasSource ?domain)
        (?edge rvz:hasTarget ?range)
        ]

    [Blanks:
	(:graph rvz:hasNode ?node)
	isBNode(?node)
	typedvalue(?node, ?label)
	->
	(?node rvz-a:label ?label)
	(?node rvz-a:shape "box")
	(?node rvz-a:style "filled,dashed")
	(?node rvz-a:fillcolor "gray90")
	(?node rvz-a:height ".3")
	(?node rvz-a:width ".3")
	]
#+END_SRC

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", output="out/temp/.ontology-overview.svg")

#+RESULTS:

*** TODO IMF data

Work in process. Rule set for visualising IMF data.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/imf-data.rule :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:nodesep "1")
        (:graph rvz-a:ranksep "1")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")
        (:graph rvz-a:splines "ortho")
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        (:graph rvz-n:height ".3")
        (:graph rvz-n:width ".3")
        (:graph rvz-n:fixedsize "true")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

### SELECTION: This rule selects the triples to be drawn. Selection is
### done on the basis of predicates. ONLY the nodes and edges selected
### here appear in the diagram.

    [triples:
        (?s ?p ?o)
        equalssome(?p, imf:hasPart, imf:hasTerminal, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs) 
        makeSkolem(?edge, ?s, ?p, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

### EDGE FORMATTING

# constraint=false, see https://graphviz.org/docs/attrs/constraint/
    [imf:no-constraint:
        (?edge :predicate ?p)
        equalssome(?p, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs)
        ->
        (?edge rvz-a:constraint "false")
        ]

    [edge-attribute
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (?p ?rvza ?value)
        namespace(?rvza, "http://rdfvizler.dyreriket.xyz/vocabulary/attribute#")
        ->
        (?edge ?rvza ?value)
        ]

    [node-attribute
        (:graph rvz:hasNode ?node)
        (?node rdf:type ?class)
        (?class ?rvza ?value)
        namespace(?rvza, "http://rdfvizler.dyreriket.xyz/vocabulary/attribute#")
        ->
        (?node ?rvza ?value)
        ]
#+END_SRC

** Python code snippets
*** py_ottr_instances

Convert tables to OTTR instances.

#+NAME: py_ottr_instances
#+BEGIN_SRC python :results raw :wrap src ttl :var template="ex:template" :var table=tbl-aspects :exports none
output = ""

instance = "[] ottr:of {} ;\n   ottr:values ( {} ) . \n"

## aspects
for row in table[0:]:
  args = map(lambda x: 'ottr:none' if not str(x).strip() else x, row)
  output += instance.format(template, " ".join(f'{w}' for w in args))

return output
#+END_SRC

#+RESULTS: py_ottr_instances
#+BEGIN_src ttl
[] ottr:of ex:template ;
   ottr:values( imf:FunctionAspect '=' '#FFFF00' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:LocationAspect '+' '#FF00FF' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:ProductAspect '-' '#00FFFF' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:ActivityAspect '>' '#000000' ) . 
#+END_src

*** py_run_sparql

Run SPARQL queries on RDF data files.

#+NAME: py_run_sparql
#+BEGIN_SRC python :var query="SELECT ?s ?p ?o {?s ?p ?o} LIMIT 10" :var prefixes=py_prefixes_sparql() :var data="out/owl/imf.owl.ttl" :results raw

# input: 'query': SPARQL query string
# input: 'prefixes': a string of prefixes for conveniently appending to the query
# input: 'data': the RDF dataset to query

import rdflib
import csv

graph = rdflib.Graph()

# read RDF turtle file:
graph.parse(data, format="ttl")

# query graph:
qResult = graph.query(prefixes + " " + query)

output = ""

# handle the results according to the query type

if qResult.type == "SELECT":

  # serialise results to string
  sResult = qResult.serialize(format="csv").decode('utf-8')

  lines = sResult.splitlines() # split on each new line
  reader = csv.reader(lines, delimiter=',')

  ## here I format the results into a table in format I use for my
  ## slides.  Format according to your own needs.
  line = 1;
  for row in reader: # split on each new line
    output += "|"
    for value in row:
      if value.startswith("http://"):
        value = ", ".join(map(graph.namespace_manager.qname, value.split(", ")))
        #value = graph.namespace_manager.qname(value) # convert urls to qnames
      if len(value) > 0:
        output += "~" + ' '.join(value.split()) + "~" # monospace formatting
      output += "|"
    output += "\n"
    if line == 1:
      output += "|-\n" # hline
    line += 1

elif qResult.type == "ASK":
  output = str(bool(qResult))

elif qResult.type == "CONSTRUCT":
  gResult = rdflib.Graph()
  gResult.namespace_manager = graph.namespace_manager # copy prefixes from data source
  for row in qResult:
    gResult.add(row);
  output = gResult.serialize(format='turtle').decode('utf-8')

return output
#+END_SRC



*** py_iri_rdf_diff

Run SPARQL queries on RDF data files.

#+NAME: py_iri_rdf_diff
#+BEGIN_SRC python :var v2="out/owl/imf.owl.ttl" :var v1="https://ns.imfid.org/20221118/imf-vocabulary.owl.ttl" :results raw

import rdflib

pGraph = rdflib.Graph()
pGraph.parse(v2, format="ttl")

def getIRIs(data):
  graph = rdflib.Graph()
  iri = []

  graph.parse(data, format="ttl")

  for s, p, o in graph:
    if(isinstance(s, rdflib.term.URIRef)):
      iri.append(s)
    if(isinstance(p, rdflib.term.URIRef)):
      iri.append(p)
    if(isinstance(o, rdflib.term.URIRef)):
      iri.append(o)
    
  return set(iri)

def prepare(input):
  rL = list(input)
  rL2 = list(filter(lambda x: x.startswith("http://ns.imfid"), rL))
  rL2.sort()
  return list(map(pGraph.namespace_manager.qname, rL2))

iri1 = getIRIs(v1)
iri2 = getIRIs(v2)

inboth = iri1 & iri2
added = iri2 - iri1
deleted = iri1 - iri2

output = ""

output += " - IRIs present in both versions :: " + ", ".join(prepare(inboth)) + "\n\n"
output += " - IRIs present only in this version :: " + ", ".join(prepare(added)) + "\n\n"
output += " - IRIs present only in previous version :: " + ", ".join(prepare(deleted))

return output
#+END_SRC

*** py_parse-ttl-file: Parse source block

Parses an ttl file and outputs a turtle source block.

#+NAME: py_parse-ttl-file
#+BEGIN_SRC python :var file="out/owl/imf-top.owl.ttl"
from rdflib import Graph

g = Graph()
g.parse(file, format="text/turtle")

return g.serialize(format='turtle').decode('utf-8')
#+END_SRC

#+RESULTS: py_parse-ttl-file

*** py_parse-ttl-block: Parse source block

Parses and outputs a turtle source block. Prefixes are given as input.

#+NAME: py_parse-ttl-block
#+BEGIN_SRC python :var prefixes=prefixes :var block=owl-top-ontology
from rdflib import Graph

g = Graph()
rdf = prefixes + "\n" + block
g.parse(data=rdf, format="text/turtle")

return g.serialize(format='turtle').decode('utf-8')
#+END_SRC

*** Output

#+NAME: py_output
#+BEGIN_SRC python :var file="out/owl/imf-top.owl.ttl" :var s="None" :var p="RDF.type"
from rdflib import Graph, RDF

g = Graph()
g.parse(file, format="text/turtle")

output = ""

for s, p, o in g.triples((s,  p, None)):
    output += f"{o}"

return output
#+END_SRC

#+RESULTS: py_output


*** Lists                                                          :noexport:

#+NAME: prefixlist
 - xsd :: http://www.w3.org/2001/XMLSchema#
 - rdf :: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 - rdfs :: http://www.w3.org/2000/01/rdf-schema#
 - owl :: http://www.w3.org/2002/07/owl#
 - skos :: http://www.w3.org/2004/02/skos/core#
 - imf :: http://ns.imfid.org/imf#

#+NAME: py_functions
#+BEGIN_SRC python

## converts a org-mode definition list into a python dict
def deflist2dict(list):
  newlist={}
  for row in list:
    newrow = row[0].split(' :: ')
    newlist[newrow[0]] = newrow[1]

  return newlist

from rdflib import Graph, Namespace, URIRef

def getURIRef(prefixdict, qname):
  prefix, localname = qname.split(':')
  return URIRef(prefixdict[prefix] + localname)

def getGraph(prefixdict):
  graph = Graph()
  for key, value in prefixdict.items():
    ns = Namespace(value)
    graph.bind(key, ns)
  return graph
#+END_SRC

#+RESULTS: py_functions
: None

#+NAME: py_prefixlist2ttl
#+BEGIN_SRC python :noweb yes :var list=prefixlist 
<<py_functions>>

output = ""
for key, value in deflist2dict(list).items():
  output += '@prefix ' + key + ':\t<' + value + '> .\n'
return output
#+END_SRC

#+RESULTS: py_prefixlist2ttl
: @prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
: @prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
: @prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
: @prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
: @prefix imf:	<http://ns.imfid.org/imf#> .

#+CALL: py_prefixlist2ttl[:wrap src ttl](list=prefixlist)
** org-mode setup
*** stderr

Include stderr in source block output:

#+PROPERTY: header-args:sh :prologue "exec 2>&1" :epilogue ":"

*** Folders

#+BEGIN_SRC ttl :tangle out/temp/.folder :mkdirp yes
#+END_SRC

#+BEGIN_SRC ttl :tangle bin/.folder :mkdirp yes
#+END_SRC

#+BEGIN_SRC ttl :tangle out/img/.folder :mkdirp yes

#+END_SRC

*** Global tangle includes

**** Graphviz 
#+NAME: graphviz-style
#+BEGIN_SRC dot :file out/img/.dummy-graphiz
 node [shape=box, fontname="Arial", style="filled"];
 edge [fontname="Arial"];
#+END_SRC


**** PlantUML

#+NAME: plantuml-style
#+BEGIN_SRC plantuml :file out/img/.dummy-plantuml
hide empty members

skinparam class {
 BackgroundColor HoneyDew
 BackgroundColor<< RDL >> SeaShell
 BackgroundColor<< Type >> LightCyan
}


#+END_SRC

* TODOs [15/46]

 Questions:
 - [X] Are BreakdownPoints and ConnectionPoints also Elements? Perhaps
   not: If Elements may be broken down, ie. related by partOf, then we
   can breakdown a breakdown point, which does not seem correct.
 - [ ] Block and ConnectionPoints should be broken down to
   Graphs. Terminals might not be Elements (if elements are things
   that can be broken down to graphs). -> IMF v3
 - [ ] Can an Element be member of many Models? What is the name of
   the relation between an Element and a Model.
 - [ ] Can an attribute have many values?
 - [ ] Represent ownership of models and elements?
 - [ ] Compatibility: Should next version be backwards compatible --
   what does that mean?
 - [ ] Check domain and range
   - Should hierarchial/assosicative relation have aspectelement as doman and range?
 - [X] Should connectedTo be symmetric?

 Text:
 - [ ] Explain that there is a difference between diagrams and
   (OWL/SHACL) implementation.

 Ontology:
 - [X] problem with direction-less connectedTo and the names theInput
   and theOutput.
 - [X] replace subproperty of inter/intra-aspectrelation to class
   axioms on AspectElement.
   - [X] also FunctionElement and so on, do this in Template
 - [ ] An InputTerminal cannot be connected to an InputTerminal
   (resp. OutputTerminal)
 - [ ] Visualisation vocabulary
   - point (xyz), node, path
   - connectionpoints
 - [ ] Suggested list of metadata *for ontology*:
   - pav:version
 - [-] Create unstable ontology file, containing
   - [ ] model
   - [X] breakdown points and connection points

 SHACL:
 - [ ] generate IMF-vocabulary check from ontology, see python code in
   https://github.com/dyreriket/shipshape

 RDF:
 - [ ] ?? Define JSON/JSON-LD format (using JSON-LD context object)
   - https://json-schema.or/g
   - https://www.npmjs.com/package/shacl-jsonschema-converter
   - https://github.com/mulesoft-labs/json-ld-schema
   - https://github.com/philbarker/lr_schema/tree/book
 - [ ] ?? JSON framing?

 Documentation:
 - [X] Make changelog
 - [X] Mark all vocabulary elements with a term_status (s1, s2, s3,
   s4) and since (or something better)
 - [ ] Make examples
 - [ ] Define instanceOf?

 Process:
 - [X] Diagrams
 - [ ] Definitions
 - [X] OWL ontology for RDF data model
 - [X] SHACL shapes for RDF data model
 - [ ] OTTR templates to instantiate datamodel
 - [ ] OTTR templates to create types
 - [ ] bOTTR (SHACL + OTTR) over types to
   - [ ] Prototypes
   - [ ] OWL class
 - [ ] Vocabulary for visualisation
 - [ ] Visualisation
   - [ ] Instance data
   - [ ] Type data
 - [ ] Update generated diagrams from ontology
 - [ ] Generated diagrams of SHACL shapes, for validation?
 - [X] Create SHACL shape for the ontology
   - all classes, properties, individuals
     - MUST term_status 'unstable','testing', 'stable' and 'archaic'
     - MUST ++since++ (X.Y.Z), replace since with something from pav
     - MUST changeNote (format X.Y.Z\s::\sAdded|Changed|Deprecated .*)
     - MUST prefLabel
     - MUST definition
     - WARN example
   - ontology
     - ...

 Tools:
 - [ ] Align with Mimir:
   https://github.com/mimir-org/mimir/blob/main/src/service/ModelBuilder.Rdf/Properties/Resources.resx

 Publishing:
 - [ ] https://dgarijo.github.io/Widoco/
 - [#] Generate changelog: https://github.com/BiodivPortal/bubastis.
   - Getting null pointer, why?

 Diagrams:
 - [X] Cardinalities
 - [X] relation names
 - [X] Use stereotypes for
   - identified element
   - reified relation
 - [X] only datatype properties are represented using fields in the UML classes
 - [X] color UML classes differently
   - Instance
   - Type
   - External RDL

 Styling:
 - [ ] size of images

 Challenges:
 - [ ] Optimise generation of prototypes from SHACL
 - [ ] Structuring, maintenence of types
 - [ ] Merging IMF models, identifying conflicts
 - [ ] Align IMF models with Records

* Backup                                                           :noexport:

#+NAME: overview-types-old
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-overview-types-old.png
<<plantuml-style>>

stereotype Type << Identified >>

abstract class ElementType << Type >> {
  notation : 0..1 
  symbol : 0..1
}

class BlockType << Type >> {
}

class TerminalType << Type >>

class AttributeGroupType << Identified >> << Type >>

class AttributeType << Type >> {
.. constraints ..
 'legal values
 legal value range
 datatype
 regex
}

'Type <|-- ElementType
'Type <|-- AttributeType
ElementType <|-- BlockType
ElementType <|-- TerminalType

Type "*" --> "*" RDLItem : classifier

ElementType "*" --> "0..1" Aspect : hasAspect

TerminalType "*" --> "1" Medium : hasMedium
TerminalType "*" --> "0..1" Direction : hasDirection

BlockType o--> "*" TerminalType : hasTerminalType
(BlockType, TerminalType) .. _Constraint

class _Constraint {
 min : 0..1
 max : 0..1
 name : 0..1
 description : 0..1
}

ElementType "*" --> "*" AttributeGroupType : hasAttributeGroupType
(ElementType, AttributeGroupType) .. _Constraint

ElementType *--> "*" AttributeType : hasAttributeType
(ElementType, AttributeType) .. _Constraint

AttributeGroupType *--> "1..*" AttributeType : hasAttributeType

BlockType "0..1" <-- "*" Block : instanceOf
TerminalType "0..1" <-- "*" Terminal : instanceOf
AttributeType "0..1" <-- "*" Attribute : instanceOf
AttributeGroupType "0..1" <-- "*" AttributeGroup : instanceOf

enum ValueEnumeration << RDL >>
AttributeType --> ValueEnumeration : 0 .. 1
#+END_SRC
