#+TITLE: IMF and Semantic Technologies
#+DATE:
#+AUTHOR:
#+EMAIL: 

#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport QA
#+EXPORT_FILE_NAME: index.html

* TODOs

   - Input to this document [0/5]
     - [ ] Define abstract model  - AW
     - [ ] Collect requirements to format from Mimir - ??
       - https://github.com/mimir-org/mimir/blob/main/src/service/ModelBuilder.Rdf/Properties/Resources.resx
     - [ ] Collect requirements to format from POC data - ??
     - [ ] Collect requirements from Tyle
     - [ ] Collect requirements to format for exchanging IMF models?
       How to sucessfully merge models? - ??

   - Introduction
     - [ ] Concept figure for IT spec
     - [ ] Define abstract/structural model for IMF, including an
       abstract language for data and types.
       - This model can have many implementations and different parts can
	 be represented by different languages with different
	 capabilities, for instance a type can be represented as a SHACL
	 shape (for validation of IMF RDF data) and a OWL class (for
	 semantic validation of the type wrt. to an RDL)

   - Format specifications [0/6]
     - [ ] Define OWL vocabulary - MGS
     - [ ] Define exchange format
       - how to represent types
       - do data object inherit or copy type data?
     - [ ] Define SHACL grammar - MGS
     - [ ] Define OTTR templates for creating data - MGS
     - [ ] Define OTTR templates for translating to SHACL - MGS
     - [ ] ?? Define JSON/JSON-LD format (using JSON-LD context object) - MGS + DH

   - Tools [0/2]
     - [ ] Update Mimir output format - DH?
     - [ ] Update Tyle output format

   - Semantics [0/2]
     - [ ] Define Abstract translation of IMF data model to ISO 15926-14 - AW + JWK
     - [ ] Define OTTR templates for translating IMF to ISO 15926-14 - DNV + MGS

   - Examples/Demonstrations [0/5]
     - [ ] Implement example from Erlend - MGS
     - [ ] Test validation of IMF data against SHACL grammar - MGS
     - [ ] ?? Demonstrate use of OWL ontology - MGS
     - [ ] ?? Demonstrate use of OTTR templates for creating IMF data - MGS
     - [ ] ?? Test visualisation of RDF on IMF data - MGS


   - Other [0/1]
     - [ ] ?? Use JSON framing - DH? + MGS


** Notes: IMF vocabulary 

*** From Mimir

 - [ ] created -  date -> pav:createdOn
 - [ ] createdBy - string? -> pav:createdBy
 - [ ] lastUpdated - date -> pav:lastUpdateOn
 - [ ] updatedBy - string -> pav:contributedBy

 - [ ] rds - string

 - [ ] domain: "mimir:domain": "runir.net",
 - [ ] owl:versionInfo - definition: "The annotation property that
   provides version information for an ontology or another OWL
   construct". Rather use pav:version?

 - [ ] hasAspect
 - [ ] hasInTerminal
 - [ ] hasOutTerminal
 - [ ] hasParent

 - [ ] lis:hasPhysicalQuantity
 - [ ] mimir:type

* Introduction
** TODO IMF IT Specification Document Overview

Todos:
 - collapse data and types whereever approprioate

/This is loosely inspired by the OWL 2 Web Ontology Language Document Overview [[https://www.w3.org/TR/2012/REC-owl2-overview-20121211/]]./


This document defines the following:

 - A structural specification of IMF, or IMF datamodel, including IMF
   Data (2) and IMF Types (3) based on the formal abstract
   specification of IMF (1).
 - The IMF Vocabulary (9) and IMF Grammar (10) are an implementation
   of (parts of) the Structural specification (2+3).
 - IMF Data (2) is represented in different forms:
   - The IMF Data exchange format (7) is RDF as specified by the IMF
     grammar (10), specified in the form of a set of SHACL shapes, and
     uses the IMF vocabulary (9), specified in the form of an OWL
     ontology.
   - OTTR templates represent an implementation of the structural
     specification of IMF Data, and may be used to generate the IMF
     Data exchange format (7) and OWL instances as according to the
     ISO 15926-14 ontology (11).
 - IMF types (3) are represented in different formats:
   - An exchange format for IMF types (6) should be specified.
   - SHACL shapes (8) capture the constraint nature of IMF types and
     may be used validate the IMF Data Exchange format (7).
   - OWL class definitions (12) following the ISO 15926-14 OWL ontology
     capture the semantics of the types and may be used for semantic
     validation of the types and their instances.
   - OTTR templates (5) represent an implementation of the structural
     specification of types, and allow for a succinct definition of
     the translation into SHACL shapes (8) and OWL class definitions
     (12).
   - It should be possible to define a grammar (10b) for IMF Type
     SHACL constraints, in the form of a subset or dialect of the
     SHACL standard.

 The (generated) diagram below illustrates the main relations between
 the parts of the specification. Green boxes indicates a single
 "schematic" specifications. Blue boxes indicate specification of
 multiple multiple occurrences.

#+BEGIN_SRC dot :file out/img/overview-specifications.png :exports results :noweb yes
digraph {
 rankdir = BT;
 newrank=true;
 
 <<graphviz-style>>

     IMFdataAbsSpec [label="IMF (1)\nAbstract spec.", fillcolor=lightyellow]

     IMFdataAbsSpec -> IMFdataSpec;
     IMFdataAbsSpec -> IMFtypeSpec [style=dashed];

     IMFdataSpec [label="IMF Data (2)\nStructural spec.", fillcolor=pink]
     IMFtypeSpec [label="IMF Type (3)\nStructural spec.", fillcolor=pink]

     IMFdataSpec -> data [arrowhead=none, constraint=false, color=gray];
     IMFdataSpec -> data_patterns [arrowhead=none, color=gray];
     IMFdataSpec -> p14_data [arrowhead=none, constraint=false, color=gray] ;

     IMFdataSpec -> IMFtypeSpec [constraint=false];

     IMFtypeSpec -> types [arrowhead=none, constraint=false, color=gray];
     IMFtypeSpec -> type_patterns [arrowhead=none, color=gray];
     IMFtypeSpec -> type_syntax [arrowhead=none, color=gray];
     IMFtypeSpec -> p14_types [arrowhead=none, constraint=false, color=gray];

    { rank="same"
    voc [label="IMF Vocabulary (9)\nOWL", fillcolor=darkseagreen2];
    grammar [label="IMF Grammar (10)\nSHACL", fillcolor=darkseagreen2];
    typegrammar [style="dashed,filled", label="IMF Type Grammar (10b)\nSHACL", fillcolor=darkseagreen];
    }

    { rank="same"
    data [label="IMF Data (7)\nExchange format\nRDF",fillcolor=darkslategray2];
    types [label="IMF Types (8)\nConstraints\nSHACL",fillcolor=darkslategray2];
    }

     types -> grammar [style="dashed", label="\"restricts\""];
     data -> voc [label = "uses"];
     grammar -> voc [label = "uses", constraint=false];
     typegrammar -> types [label = "validates", constraint=false];

     data -> grammar [dir="back", label = "validates"];
     data -> types [dir="back", constraint=false, label="validates"];


    { rank="same"
    data_patterns [label="IMF Data (4)\nTemplate\nOTTR", fillcolor=darkseagreen2];
    type_patterns [label="IMF Type (5)\nTemplate\nOTTR", fillcolor=darkseagreen2];
    type_syntax [style="filled,dashed", label="IMF Type (6)\nExchange format\n??", fillcolor=darkseagreen];
    }

    type_patterns -> data_patterns [style=dotted, arrowhead=none, constraint=false];

 
  subgraph cluster_p14 {

    p14 [label="ISO 15926-14 (14)\nOWL"]
    rdl [label="PCA RDL (13)\nOWL"]
    p14_types [label="IMF Types (12)\nSemantics\nOWL classes", fillcolor=darkslategray3];
    p14_data [label="IMF Data (11)\nSemantics\nOWL instances", fillcolor=darkslategray3];

   rdl -> p14;
  }


 ##### edges

 data_patterns -> data  [label="expands"];
 type_patterns -> types [label="expands"];

 type_patterns -> p14_types [label="expands", constraint=false];
 data_patterns -> p14_data  [label="expands", constraint=false];

 p14_data -> p14_types [label="inst. of"];
 p14_types -> rdl;
 #types -> rdl [style="dashed", constraint=false];
 p14_types -> IMFtypeSpec [constraint=false, label = "verifiy"];


}
#+END_SRC

#+RESULTS:
[[file:out/img/overview-specifications.png]]

** TODO W3C technology

[Explain and motivate the use of semantic technologies?]

*** RDF

RDF is an abstract data model defined as an open standard by the W3C.

RDF may be serialised in different serialisation formats such as
RDF/XML (based on XML), JSON-LD (based on JSON), Turtle (a favorite
amongst many familiar with RDF due to its ease of reading and
writing), or N-Triples (a very simple format only appropriate for
software).


* Namespace and identifiers and filenames

The namespace for resources used by the formalisation of the IMF using
semantic technologies for publicly available and shared resources
should be:

 : http://ns.imfid.org/imf#

Suggestion for an identifier schema for different IMF ontology versions:

 : http://ns.imfid.org/ontology/[yyyy-mm-dd]/[ontology-name]

The ontology will be published at their address. The resources
(classes, properties, individuals) are made resolvable by publishing a
merged ontology of all ontology files at the ~imf~ namespace address.

* IMF Formal Specification

/Note: This section is excerpts taken from the ongoing work on the IMF
manual (16/11) and may be out of sync./

** TODOs [5/6]                                                        :todos:

 - [X] ?? drop System element categories definition
 - [X] ?? add something like, in the definition of System element: "A
   system element is either a (System) Block, Terminal or Interface
   point."
 - [ ] "A system element scheme is a blueprint from which (instances
   of) system elements may be created. A system element created from a
   system element scheme gets the aspect and the attributes as
   required by the system element scheme specification".
 - [X] FB :: A function block is a block with the aspect function. A
             function block holds requirements to purpose.
 - [X] "The purpose of a system or a system element is specified by
   the activities that the system performs or achieves. The IMF relies
   on external reference data libraries of the definition of these
   activities."
 - [X] +include "Breakdown" in partOf?+


** Core components

 - System :: Combination of interacting elements organized to achieve
             one or more stated purpose.
 - System Element :: Member of a set of elements that constitute a
                     system. A System Element is is either a System
                     Block, a Terminal or an Interface point.
 - Purpose :: The purpose of a system or a system element is specified
              by the activities that the system performs or
              achieves. IMF relies on external reference data
              libraries of the definition of these activities.
 - Breakdown :: A breakdown is a rule by which a system element can be
                divided into parts according to a given perspective.
 - Aspect :: An aspect is a system perspective that provides guideline
             for specifying a breakdown relation on system element and
             properties to the elements in the breakdown relation. An
             aspect is a particular way of viewing a facility
             asset. Different aspects have no overlap in information.
 - Aspect element :: An Aspect element is a System Element with
                     exactly one accociated Aspect.


*** ??

 - System element categories :: A system element category is a scheme
      used as a blueprint to instantiate System element schemes. There
      are three system element categories: Block, Terminal, Interface
      point.
 - System element scheme :: A System element scheme is an instance of
      a system element category with a defined set of attributes,
      including an attribute which defines a unique aspect.


** Aspects

   - Function aspect :: The Function aspect is an aspect with the
        activity perspective on breakdown, providing information about
        required activity, performance, and function.
   - Product aspect :: The Product aspect is an aspect with the
                       artifact, or assembly, perspective on
                       breakdown. It is about the specification of a
                       solution that is intended to perform the
                       activity.
   - Location aspect :: The Location aspect is an aspect with the
        spatial perspective on breakdown. It is about the spatial
        envelope, the size and shape, of the specified pump and the
        requirements imposed by the location.
   - Installed aspect :: The Installed aspect is an aspect with the
        installed artifact, or installed assembly, perspective on
        breakdown. It is about information about the actual pump,
        e.g., serial number, run hours, and status.

** System elements

*** Block

   - System Block :: A System Block (or just Block) B is an object
                     with a collection of attributes used to describe
                     an entity.
   - Function Block :: 
   - Product Block :: 
   - Location Block :: 
   - Installed Block :: 


*** Terminal

   - Terminal ::  A Terminal is an object with a collection of
                 attributes used to describe the input or output of a
                 Block, and hence its boundaries.

   - Function Terminal :: 
   - Product Terminal :: 
   - Location Terminal :: /Not used/
   - Installed Terminal :: 

*** Interface point

   - Interface point :: An Interface Point is an object with a
        collection of attributes used to specify the condition for
        connecting one Block B1 and its Terminal T1, to another Block
        B2 and its Terminal T2.

   - Function Interface Point :: 
   - Product Interface Point :: 
   - Location Interface Point :: /Not used/
   - Installed Interface Point :: 

** Relationships between system elements

*** hasTerminal

The hasTerminal relation is a specification of a connection between a
block and a terminal of the same aspect.

   - FB->FT :: hasTerminal(FB,FT) is a specification to the effect
               that the stream state of FT is the input/output of the
               purpose activity of FB.
   - PB->PT :: hasTerminal(PB,PT) is a specification to the effect
               that the artifactterminal of PT is an input/output
               terminal of the artifact of PB.
   - LB->LT :: hasTerminal(LB,LT) is a specification to the effect
               that the spatial position of the terminal is placed on
               the spatial extension of the artifact.
   - IB->IT :: hasTerminal(IB,IT) documents that the installed
               artifact terminal IT is an input/output terminal of the
               installed artifact PB.

*** hasPart

hasPart is a specification of a connection between two blocks of the
same aspects.

   - FB->FB :: hasPart(FB1,FB2) is a specification to the effect that
               purpose activity of FB2 is a sub-activity of that of
               FB1.
   - PB->PB :: hasPart(PB1,PB2) is a specification to the effect that
               the artifact of PB2 is a sub-assembly of the artifact
               of PB1.
   - LB->LB :: hasPart(LB1,LB2) is a specification to the effect that
               the location of LB2 is located in the location of LB1.
   - IB->IB :: hasPart(IB1,IB2) documents that the installed artifact
               IB2 is sub-assembly of the installed artifact IB1.

*** connectedTo

The connectedTo relation is a specification of a connection between
two terminals of the same aspect.

   - FT-(FIP)-FT :: connectedTo(FT1,FT2,FIP) is a specification to the
                    effect that the stream state of FT1 is equal to
                    that of FT2 and satisfies the requirement in FIP.
   - PT-(PIP)-PT :: connectedTo(PT1,PT2,PIP) is a specification to the
                    effect that the artifact terminal of PT1 is
                    physically connected to the artifact terminal of
                    PT2 and satisfies the requirement in PIP.
   - LT-(LIP)-LT :: connectedTo(LT1,LT2,LIP) is a specification to the
                    effect that the location of the terminal of LT1
                    matches the location of the terminal of LT2 and
                    satisfies the requirement in LIP.
   - IT-IT :: connectedTo(IT1,IT2) documents that IT1 is physically
              connected to IT2.


*** fulfilledBy

The fulfilledBy relation is a specification of a connection between
two blocks (or two terminals) of different aspects.

   - FB->PB :: fulfilledBy(FB,PB)is a specification to the effect that
               the artifact of PB fulfills the purpose of FB.
   - FT->PT :: fulfilledBy(FT,PT)is a specification to the effect that
               the artifact terminal of PT contains the stream state
               of FT.
   - LB->PB :: PB artifact fulfills the location requirements of
               LB. fulfilledBy(LB,PB) is a specification to the effect
               that the artifact of PB fulfills the location
               requirements of LB.
   - LT->PT :: fulfilledBy(LT,PT) is a specification to the effect
               that the artifact terminal of LT fulfills the location
               requirements of PT.
   - PB->IB :: fulfilledBy(PB,IB) is a specification to the effect
               that the installed artifact IB fulfills the artifact
               specification PB. fulfilledBy(PB,IB) is a specification
               to the effect that the installed artifact of IB
               fulfills the artifact specifications of PB.
   - PT->IT :: fulfilledBy(PT,IT) is a specification to the effect
               that the installed artifact terminal IT fulfills the
               terminal specifications of PT.


* IMF Structural Specification

The structural specification is a format and application independent
data model specification of the formal specification of IMF. The
structural specification aims to faithfully represent the intentions
of the formal specification while also including the specification of
how, e.g., metadata about objects and attributes and attribute values
are represented, which the formal specification does not contain. The
purpose of the structural specification is to be a common language and
format for developing concrete serialisation formats for IMF and serve
as documentation for application developers.

** Diagram legend

The specification consists of a series of partially overlapping
diagrams. The combined diagram is presented in Figure ...

The diagrams are UML class diagrams are drawn using [[https://plantuml.com/][PlantUML]]
restricted to the following elements:

 - UML classes, marked with the icon "C".
 - Abstract UML classes, marked with an icon "A", are UML classes that
   are not intended to be instantiated.
 - Enumerations, marked with the icon "E", are used to represent UML
   classes with a limited list of instantiations and where the
   instantiations are defined in the IMF language.
 - Subclass relationships between classes, directed relations with an
   open arrow.
 - Directed associations (relations) between classes, which are marked
   with a name and possibly a cardinality. If no cardinality is given,
   then the cardinality is 0--many.

 Here is an example:

#+NAME: structural-spec-diagram-legend
#+BEGIN_SRC plantuml :noweb yes :file out/img/plantuml-legend.png
<<plantuml-style>>

abstract class AbstractConcept1

AbstractConcept1 <|-- Concept2
Concept2 <|-- SubConcept3

Concept2 -left-> Concept4 : 1..* hasRelationA

enum EnumeratedConcept5 {
 element1
 element2
}

Concept2 -right-> EnumeratedConcept5 : 1 hasRelationB
#+END_SRC

#+RESULTS: structural-spec-diagram-legend
[[file:out/img/plantuml-legend.png]]

Note: The structural specification is described by a series of
diagrams, each focus on a specific part. In the case that a class is
used in multiple diagrams, only one diagram contains the full
specification of the class, while the other diagrams only contain the
class name. The diagram that contains the complete specification
combines all diagrams and contains all information.

** Model

Entity is the most general construct in the structural
specification. Everything is an entity. No fields or attributes are
required for Entity, e.g., an Entity is not required to have in id.

An AnnotatedEntity is an Entity that has an identifier and additional
metadata and provenace data as specified by the diagram. An Entity
that is not an AnnotatedEntity may only exist through some relation to
an AnnotatedEntity.

A Model is a collection of AnnotatedEntities and their dependent
entities. These AnnotatedEntities may be called
ModelElements. ModelElements are Entities that can occur in Models and
are hence those AnnotatedEntities that may be exchanged as part of a
Model.

Note: most subclass relationships to Entity are not depicted in
diagrams as this make them difficult to read.

#+NAME: structural-spec-model-versioning
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec-model-versioning.png
<<plantuml-style>>

abstract class Entity

abstract class AnnotatedEntity {
 id : 
 name : string
 description : string
.. provenance ..
 version : string
 created : date
 createdBy : string
 lastUpdated : date
 updatedBy : string
}

class Model
abstract class ModelElement

Model -left-> ModelElement : contains

Entity <|-- AnnotatedEntity
AnnotatedEntity <|-- ModelElement
AnnotatedEntity <|-- Model
#+END_SRC


#+RESULTS: structural-spec-model-versioning
[[file:out/img/imf-structural-spec-model-versioning.png]]

*** TODOs [0/1]                                                       :todos:

 - [ ] Decide on required and/or useful set of provenance fields.

** System Elements

Every AspectElement has exacty one Aspect.

Every SystemElement is a AspectElement. 
A SystemElement is associated 0--many Datums. 
The structure of Datums is described below.

#+NAME: structural-spec-topelements
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec-topelements.png
<<plantuml-style>>

abstract class AspectElement

abstract class SystemElement

enum Aspect {
  Function
  Location
  Product
  Installed
}

AspectElement --> Aspect : 1 hasAspect

SystemElement --> Datum

ModelElement  <|-- AspectElement
AspectElement <|-- SystemElement

#+END_SRC

#+RESULTS: structural-spec-topelements
[[file:out/img/imf-structural-spec-topelements.png]]


** Attribute

An Attribute is a specification of Datums. An Attribute must specify a
quality, and may specify a value with an accociated unit of measure
(uom). An Attribute may be classified at most one of each of the
Attribute classifiers Provenance, Range, Regularity and Scope.

A Datum is an instantiation of an Attribute and must specify a value
and a unit of measure as according to the Attribute specification.

Note: The specification of Attributes is currently basic. A more
thorough analysis of requirements for expressing Attribute is planned
for future releases.

#+NAME: structural-spec-datum
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec-datum.png
<<plantuml-style>>

abstract class Attribute {
 property : 1
 value : 0 .. 1
 uom : 0 .. 1
}

Attribute <|-- Datum

Attribute --> Provenance : 0..1
Attribute --> Range : 0..1
Attribute --> Regularity : 0..1
Attribute --> Scope : 0..1

''' Quantity Datum Classifiers

enum Provenance {
  calculated
  measured
  specified
}
enum Range {
  average
  maximum
  minimum
  nominal
  normal
}
enum Regularity {
  absolute
  continuous
}
enum Scope {
  design
  operating
}
#+END_SRC

#+RESULTS: structural-spec-datum
[[file:out/img/imf-structural-spec-datum.png]]

*** TODOs [0/2]                                                       :todos:

 - [ ] Is this a good way of modelling attributes and datums?
 - [ ] Does a datum copy the attribute values or refer to the
   attribute (similar discussion applies to types in general).

** Types

Types define a blueprint from which SystemElements are created. There
two kinds of Types: BlockType and TerminalType each representing
blueprints for Blocks and Terminals, respectively. Types specify
fields and relationships that must also hold for its instances. A
BlockType may specify fields such as RDS string, purpose and symbol
and Terminals by relationships to TerminalTypes. A TerminalType
specifies a direction and a Medium.

A Type may include multiple AttributeGroups. An AttributeGroup is a
collection of AttributeTypes.

An AttributeType is an Attribute with additional constraints
associated. These constraints may specify premissible values for the
Attribute in different ways, e.g., by specifying a list of legal
values, a range of values (in the case of a numerical values), legal
datatype, regular expression, and so on. The expressivity of
constraints for AttributeTypes will be defined upon a thorough analysis
including both requirements from SMEs, application developers and the
expressivity of suitable constraint languages.

An AttributeGroup is an AnnotatedEntity that is used to collect
Attributes that naturally belong together to support ease of reuse. An
AttributeGroup also serves the purpose of grouping together Attributes
for presentational purposes, similarly as document sections in a data
sheet does.

Instances may be created from types in at least two ways:

 1. An instance is created from a copy of the type, hence the instance
    will explicitly contain the fields and relationships specified by
    its type.
 2. An instance is created by referring to its type with a specified
    relationship that captures the semantics of the instantiation. 

Both cases exibit different issues with regards to synchronisation and
versioning. For case 1. an instance may evolve independently of its
type, i.e., any updates to the instance will not affect the type (and
vise versa) unless specific measures to avoid this is specified. For
case 2, updates to a type will also affect all its instances. 

#+NAME: structural-spec-types
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec-types.png
<<plantuml-style>>

AnnotatedEntity <|-- Type
AnnotatedEntity <|-- AttributeTypeGroup

abstract class Type {
}

Type -left-> Aspect : 0 .. 1 hasAspect 
BlockType -left-> TerminalType : hasTerminal

class BlockType {
  RDS : 0 .. 1 string
  purpose : rdl id
  symbol
}
class TerminalType {
  direction : in/out
}

enum Medium 

TerminalType --> Medium : 0 .. 1 hasMedium 

class AttributeTypeGroup

class AttributeType {
.. constraints ..
 legal values
 legal value range
 number of required values
 datatype
 regex
}

Type <|-- BlockType
Type <|-- TerminalType
'Type <|-- InterfacePointType

BlockType <-- Block : 1 instanceOf
TerminalType <-- Terminal : 1 instanceOf

Type --> AttributeTypeGroup
AttributeTypeGroup --> AttributeType
Attribute <|-- AttributeType
#+END_SRC

#+RESULTS: structural-spec-types
[[file:out/img/imf-structural-spec-types.png]]

** Instances

The strucutral specification of the different SystemElements closely
follow the formal specification.

The connectedTo relation between InTerminal and OutTerminal may either
be a binary relationship between an InTerminal and an OutTerminal, or
a ternary relationsship between an InTerminal, an OutTerminal and an
InterfacePoint. The latter form is represented in the diagram with a
diamond.

#+NAME: structural-spec-instances
#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec-instances.png

<<plantuml-style>>

''' Data

class Block
class Terminal
class InTerminal
class OutTerminal
class InterfacePoint

' subclasses
SystemElement <|-- Block
SystemElement <|-- Terminal
SystemElement <|-- InterfacePoint

Terminal <|-- InTerminal
Terminal <|-- OutTerminal

' relations
Block -right-> Terminal : hasTerminal

' reified relations
'<> parthood
'AspectElement <-- parthood : thePart
'AspectElement <-- parthood : theWhole
Block <-- Block : hasPart 

<> connection
InTerminal  <-left- connection : theInput
OutTerminal <-right- connection : theOutput
InterfacePoint <-down- connection : theInterface
InTerminal --> OutTerminal : isConnectedTo

SystemElement <-- SystemElement : fulfilledBy

#+END_SRC


#+RESULTS: structural-spec-instances
[[file:out/img/imf-structural-spec-instances.png]]

** Complete Specification

#+BEGIN_SRC plantuml :noweb yes :file out/img/imf-structural-spec.png
<<plantuml-style>>

<<structural-spec-model-versioning>>

<<structural-spec-topelements>>

<<structural-spec-types>>

<<structural-spec-datum>>

<<structural-spec-instances>>

#+END_SRC

#+RESULTS:
[[file:out/img/imf-structural-spec.png]]

** OLD Types                                                       :noexport:

#+begin_src plantuml :file out/img/types-overview.png

skinparam class {
 BackgroundColor White
}

skinparam groupInheritance 2

abstract class Definition {
 id : 1 uri
 name : 0..1 string
 description : 0..1 string
}

abstract class ObjectDefinition {
 aspect : 0..1 uri
}

class TypeDefinition {
 RDS : 0..1 uri
 classifier : 0..x uri
 symbol : 0..1 uri
}

abstract class TerminalDefinition {
 medium : 0..1 uri
}
 
class AttributeDefinition {
 property : 1 uri
 value : 0..*
 uom : 0..1 uri
 ..constraints..
 legal values : 0..*
 legal value range : 0..1
 number of required values : 0..1 integer
 required datatype : 0..1 url
}



enum Provenance {
  calculated
  measured
  specified
}
enum Range {
  average
  maximum
  minimum
  nominal
  normal
}
enum Regularity {
  absolute
  continuous
}
enum Scope {
  design
  operating
}

enum Kind {
  actual
  estimated
  required
  set
  test
}

class InTerminalDefinition
class OutTerminalDefinition

TypeDefinition --> TypeDefinition : 0..* : parent
ObjectDefinition --> AttributeDefinition : 0..*
TypeDefinition --> TerminalDefinition : 0..*
AttributeDefinition --> Kind : 1
AttributeDefinition --> Dimension : 1

Definition <|-- ObjectDefinition
ObjectDefinition <|-- TypeDefinition
ObjectDefinition <|-- TerminalDefinition
Definition <|-- AttributeDefinition


TerminalDefinition <|-- InTerminalDefinition 
TerminalDefinition <|-- OutTerminalDefinition

#+end_src

#+RESULTS:
[[file:img/types-overview.png]]

* TODO IMF Vocabulary: OWL Ontology

The IMF vocabulary is defined by an OWL ontology, also called the IMF
ontology.

The IMF ontology is specified by this document using a series of code
snippets which are compiled to different OWL files serialised in RDF
Turtle syntax.

In order not to duplicate and to avoid synchronisation issues, the
definition and description of the ontology and its contents are put
directly in the ontology sources; please read these for more
information.

** QA tests                                                              :QA:

Tests are put here at the start to make it easy to update file names.

#+CALL: sh_jena_validate_rdf(files="out/owl/imf.owl.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf.owl.ttl : 0.29 sec : 8 Triples : 27.78 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src

** Ontology source

#+NAME: owl-imf-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/imf.owl.ttl :mkdirp yes
<<prefixes>>

<http://ns.imfid.org/imf> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf> ;
    owl:imports 
      <http://ns.imfid.org/20221118/imf-top> ,
      <http://ns.imfid.org/20221118/imf-systemelements> ,
      <http://ns.imfid.org/20221118/imf-aspects> ;
    skos:prefLabel "Information Modelling Framework Ontology " ;
    skos:altLabel "IMF ontology" ;
    skos:scopeNote """

      This is the main IMF ontology and its main point of entry.  This
      ontology document imports all other IMF sub-ontology documents, each
      of which focus on one particular part of the ontology:

      1. IMF Top defines the very high-level classes and properties of
      the IMF ontology.

      2. IMF Metamodel defines the metamodel for system elements and
      their permissible properties.

      3. IMF Aspects defines the aspects that are available to aspect
      elements.

    """;

    .
#+END_SRC

** Import hierarchy

The diagram displays the different ontology documents that the IMF
ontology consists of and the import relations that exist between
these.

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-import-hierarchy.rule", output="out/owl/ontology-import-hierarchy.svg")

#+RESULTS:

[[./out/owl/ontology-import-hierarchy.svg]]


** IMF Top Sub-Ontology

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/.imf-top.owl.wottr.ttl", output="out/owl/imf-top-overview.svg")


[[./out/owl/imf-top-overview.svg]]


*** Header

#+NAME: owl-top-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/.imf-top.owl.wottr.ttl
<<prefixes>>

<http://ns.imfid.org/imf-top> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf-top> ;
    # owl:imports <http://www.w3.org/2004/02/skos/core> ;
    skos:prefLabel "Information Modelling Framework Ontology: Top Ontology " ;
    skos:altLabel "IMF top ontology" ;
    skos:scopeNote """

      This ontology defines the very core classes and relations of the
      Information Modelling Framework (IMF) to provide a structure for
      ontologies that extend this ontology.

    """;

    .

<<owl-top-system>> 
<<owl-top-systemelement>> 
<<owl-top-aspectelement>> 
<<owl-top-aspect>> 
<<owl-top-disjointness>> 
<<owl-top-genericrelations>>
#+END_SRC

*** ~System~

#+NAME: owl-top-system
#+BEGIN_SRC ttl
imf:System a owl:Class ;
  skos:prefLabel "System" 
.
#+END_SRC

*** ~SystemElement~

#+NAME: owl-top-systemelement
#+BEGIN_SRC ttl
imf:SystemElement a owl:Class ;
  rdfs:subClassOf imf:AspectElement ;
  skos:prefLabel "System Element" 
.

imf:memberOf a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:domain imf:SystemElement ;
  rdfs:range imf:System .

[] ottr:of o-owl-ax:SubObjectSomeValuesFrom ;
   ottr:values ( imf:SystemElement imf:memberOf imf:System ) .
#+END_SRC

*** ~AspectElement~

#+NAME: owl-top-aspectelement
#+BEGIN_SRC ttl
imf:AspectElement a owl:Class ;
  skos:prefLabel "Aspect Element";
  .

### properties

imf:hasAspect a owl:ObjectProperty ;
  skos:prefLabel "has aspect" ;
  skos:definition "Relates an Aspect Element to its Aspect.";
  rdfs:domain imf:AspectElement ;
  rdfs:range imf:Aspect .
#+END_SRC

*** ~Aspect~

#+NAME: owl-top-aspect
#+BEGIN_SRC ttl
imf:Aspect a owl:Class ;
  skos:prefLabel "Aspect";
.
#+END_SRC

*** +Deprecated: ~MultiAspectElement~+                             :noexport:

#+NAME: owl-top-DEPRECATED-integratedobject
#+BEGIN_SRC ttl
imf:MultiAspectElement a owl:Class ;

  skos:prefLabel "Multi-Aspect Object" ;
  #skos:definition """TODO""";
  skos:scopeNote """

  A multi-aspect object is a collection of aspect objects that
  describe an asset from different viewpoints (aspects). 

  There are currently no formal restrictions on the aspect objects
  that a multi-aspect object groups together. Hence, a multi-aspect
  object may collect aspect objects of the same aspect, or of
  different aspects.

  """

.

imf:hasAspectElement a owl:ObjectProperty ;
  skos:prefLabel "has aspect object" ;
  skos:definition """

    Relates the multi-aspect object to the aspect object(s) it
    collects.

    """;

  rdfs:domain imf:MultiAspectElement ;
  rdfs:range imf:AspectElement .
#+END_SRC

*** Additional axioms

#+NAME: owl-top-disjointness
#+BEGIN_SRC ttl

[] ottr:of o-owl-ax:DisjointClasses ;
   ottr:values( ( imf:Aspect imf:AspectElement imf:System ) ) .
#+END_SRC

*** Structural relations

The following scope note is put on all following top-level relations:
#+NAME: owl-top-toprelation-scope-note
#+BEGIN_SRC ttl
skos:scopeNote """

  This relation is used to enforce that subproperties respect this
  relation's definition. This must be enforced by introducing
  class axioms that locally further restrict the domain and range
  of the relation.
  
"""
#+END_SRC

#+NAME: owl-top-genericrelations
#+BEGIN_SRC ttl :noweb strip-export
imf:intraAspectRelation a owl:ObjectProperty ;
    skos:prefLabel "intra-aspect relation";
    rdfs:subPropertyOf skos:semanticRelation ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    skos:definition "A generic relation between aspect objects of the same aspect" ;
    <<owl-top-toprelation-scope-note>>
    .

imf:interAspectRelation a owl:ObjectProperty ;
    skos:prefLabel "inter-aspect relation";
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    rdfs:subPropertyOf skos:related ;
    # owl:propertyDisjointWith imf:intraAspectRelation ; ## An error occurred during reasoning: Non-simple property or its inverse appears in disjoint properties axiom.
    <<owl-top-toprelation-scope-note>>
    .

imf:hierarchicalRelation a owl:ObjectProperty ;
    a owl:IrreflexiveProperty ;
    skos:prefLabel "hierarchical relation";
    rdfs:subPropertyOf skos:semanticRelation ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    skos:definition "A generic hierachical relation that may be used to represent a breakdown structure." ;
    <<owl-top-toprelation-scope-note>>
    .

imf:associativeRelation a owl:ObjectProperty ;
    skos:prefLabel "associative relation";
    rdfs:subPropertyOf skos:related ;
    owl:propertyDisjointWith imf:hierachicalRelation ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    skos:definition "A generic associative relation." ;
    <<owl-top-toprelation-scope-note>>
    .
#+END_SRC


*** Processing and QA                                                    :QA:

This is placed here so that it is easier to syncronise filenames with
org-mode tangled files.

**** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/owl/.imf-top.owl.wottr.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/owl/.imf-top.owl.wottr.ttl : 0.19 sec : 69 Triples : 363.16 per second

**** Expand OTTR instances
#+CALL: lutra-expand(in="out/owl/.imf-top.owl.wottr.ttl", out="out/owl/imf-top.owl.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubClassOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/macro/0.1/DomainRange

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivalentClass

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/AllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/HasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ValueRestriction

# [WARNING] Unused parameter in template http://ns.imfid.org/templates/Type. The template has a parameter ?class : ottr:IRI (arg no. 2) which does not occur in the pattern of the template.

# [INFO] Fetch missing template: http://tpl.ottr.xyz/owl/axiom/0.1/DisjointClasses
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/DisjointClasses
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/TypedListRelation
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ListRelation

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, owl:members : LUB ...

# [INFO] Fetch missing template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ObjectCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/Cardinality

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank505 : LUB<rdfs:Resource>, owl:onClass : LUB ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank505 : LUB<rdfs:Resource>, owl:qualifiedCard ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank505 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank505 : LUB<rdfs:Resource>, owl:onProperty :  ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#hasAspect : LUB<ottr:IRI ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#Aspect : LUB<ottr:IRI>,  ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#AspectElement : LUB<ottr: ...

# [WARNING] Fetch missing template: http://ns.ottr.xyz/0.4/NullableTriple
# [WARNING] 
# [WARNING] Empty file: http://ns.ottr.xyz/0.4/NullableTriple

# >>> at [1: 1] (xyz.ottr.lutra.io.TemplateReader) xyz.ottr.lutra.stottr.parser.STemplateParser@5460b754
# [WARNING] Failed fetching template: http://ns.ottr.xyz/0.4/NullableTriple

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:NullableTriple(http://ns.imfid.org/imf#AspectElement : L ...
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/owl/.imf-top.owl.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 64 triples
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix imf: <http://ns.imfid.org/imf#> .
@prefix pav: <http://purl.org/pav/> .
@prefix o-rdf: <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p14: <http://example.com/P14#> .
@prefix ex: <http://example.com#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix o-imf: <http://ns.imfid.org/templates/> .
@prefix ottr: <http://ns.ottr.xyz/0.4/> .
@prefix o-owl-ma: <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-ax: <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

imf:Aspect
    a owl:Class ;
    skos:example "Function, Location, Product are examples of aspects." ;
    skos:prefLabel "Aspect" ;
    skos:scopeNote """

  viewpoint
  modalitity

  """ .

imf:AspectElement
    a owl:Class ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:onClass imf:Aspect ;
        owl:onProperty imf:hasAspect ;
        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger
    ] ;
    skos:definition """

    An aspect object describes an asset from a specific viewpoint (or
    aspect).

    An aspect object has a single aspect, we say that the aspect
    object \"is of\" this aspect.

    """ ;
    skos:prefLabel "Aspect Object" .

imf:MultiAspectElement
    a owl:Class ;
    skos:prefLabel "Multi-Aspect Object" ;
    skos:scopeNote """

  A multi-aspect object is a collection of aspect objects that
  describe an asset from different viewpoints (aspects). 

  There are currently no formal restrictions on the aspect objects
  that a multi-aspect object groups together. Hence, a multi-aspect
  object may collect aspect objects of the same aspect, or of
  different aspects.

  """ .

imf:associativeRelation
    a owl:ObjectProperty ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    rdfs:subPropertyOf skos:related ;
    owl:propertyDisjointWith imf:hierachicalRelation ;
    skos:definition "A generic associative relation." ;
    skos:prefLabel "associative relation" ;
    skos:scopeNote """
    
      This relation is used to enforce that subproperties respect this
      relation's definition. This must be enforced by introducing
      class axioms that locally further restrict the domain and range
      of the relation.
      
    """ .

imf:hasAspect
    a owl:ObjectProperty ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:Aspect ;
    skos:definition "Relates an aspect object to its aspect." ;
    skos:prefLabel "has aspect" .

imf:hasAspectElement
    a owl:ObjectProperty ;
    rdfs:domain imf:MultiAspectElement ;
    rdfs:range imf:AspectElement ;
    skos:definition """

    Relates the multi-aspect object to the aspect object(s) it
    collects.

    """ ;
    skos:prefLabel "has aspect object" .

imf:hierarchicalRelation
    a owl:IrreflexiveProperty, owl:ObjectProperty ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    rdfs:subPropertyOf skos:semanticRelation ;
    skos:definition "A generic hierachical relation that may be used to represent a breakdown structure." ;
    skos:prefLabel "hierarchical relation" ;
    skos:scopeNote """
    
      This relation is used to enforce that subproperties respect this
      relation's definition. This must be enforced by introducing
      class axioms that locally further restrict the domain and range
      of the relation.
      
    """ .

imf:intraAspectRelation
    a owl:ObjectProperty ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    rdfs:subPropertyOf skos:semanticRelation ;
    skos:definition "A generic relation between aspect objects of the same aspect" ;
    skos:prefLabel "intra-aspect relation" ;
    skos:scopeNote """
    
      This relation is used to enforce that subproperties respect this
      relation's definition. This must be enforced by introducing
      class axioms that locally further restrict the domain and range
      of the relation.
      
    """ .

<http://ns.imfid.org/imf-top>
    a owl:Ontology ;
    owl:imports <http://www.w3.org/2004/02/skos/core> ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf-top> ;
    skos:altLabel "IMF top ontology" ;
    skos:prefLabel "Information Modelling Framework Ontology: Top Ontology " ;
    skos:scopeNote """

      This ontology defines the very core classes and relations of the
      Information Modelling Framework (IMF) to provide a structure for
      ontologies that extend this ontology.

    """ .

[]
    a owl:AllDisjointClasses ;
    owl:members (imf:Aspect
        imf:AspectElement
        imf:MultiAspectElement
    ) .

#+end_example

**** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf-top.owl.ttl")

#+RESULTS:
: imf-top.owl.ttl : 0.21 sec : 78 Triples : 369.67 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf-top.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src

** IMF System Element Sub-Ontology

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/.imf-systemelements.owl.wottr.ttl", output="out/owl/imf-systemelements-overview.svg")

#+RESULTS:

[[./out/owl/imf-systemelements-overview.svg]]

*** Header
#+NAME: owl-top-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/.imf-systemelements.owl.wottr.ttl :mkdirp yes
<<prefixes>>

<http://ns.imfid.org/imf-systemelements> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf-systemelements> ;
    owl:imports <http://ns.imfid.org/20221118/imf-top> ;
    skos:prefLabel "Information Modelling Framework Ontology: System Elements " ;
    skos:altLabel "IMF metamodel ontology" ;
    skos:scopeNote """

      This ontology defines IMF's meta model which defines how
      IMF models are represented.

    """ ;
    .

<<owl-systemelements-systemelement>>
<<owl-systemelements-relations-partof>>
<<owl-systemelements-terminal>>
<<owl-systemelements-system>>
<<owl-systemelements-connection>>
<<owl-systemelements-relations-connectedTo>>
#+END_SRC

*** ~SystemElement~

#+NAME: owl-systemelements-systemelement
#+BEGIN_SRC ttl
imf:SystemElement a owl:Class .

[] ottr:of o-owl-ma:ClassPartition ;
   ottr:values ( imf:SystemElement ( imf:Block imf:Terminal imf:InterfacePoint ) ) .
#+END_SRC

*** ~Block~

#+NAME: owl-systemelements-system
#+BEGIN_SRC ttl
imf:Block a owl:Class ;
  rdfs:subClassOf imf:SystemElement ;
  skos:prefLabel "Block" ;
  .
#+END_SRC

*** ~Terminal~ 

#+NAME: owl-systemelements-terminal
#+BEGIN_SRC ttl
imf:Terminal a owl:Class ;
  rdfs:subClassOf imf:SystemElement ;
  skos:prefLabel "Terminal" ;
  skos:altLabel "Port", "Channel", "Input/Output" ;
  .

imf:InputTerminal a owl:Class ;
  rdfs:subClassOf imf:Terminal ;
  skos:prefLabel "Input Terminal" ;
  skos:altLabel "Input" ;
  .

imf:OutputTerminal a owl:Class ;
  rdfs:subClassOf imf:Terminal ;
  skos:prefLabel "Output Terminal" ;
  skos:altLabel "Output" ;
  .

[] ottr:of o-owl-ma:ClassPartition ;
   ottr:values ( imf:Terminal ( imf:InputTerminal imf:OutputTerminal ) ) .

imf:hasTerminal a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  rdfs:domain imf:Block ;
  rdfs:range imf:Terminal ;
  skos:prefLabel "has terminal" ;
  skos:definition "The relation between a system and its terminals.";
  .

imf:hasInputTerminal a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:hasTerminal ;
  skos:prefLabel "has input terminal" ;
  rdfs:range imf:InputTerminal ;
  skos:definition "The relation between a system and its input terminals.";
  .

imf:hasOutputTerminal a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:hasTerminal ;
  skos:prefLabel "has output terminal" ;
  rdfs:range imf:OutputTerminal ;
  skos:definition "The relation between a system and its output terminals.";
  .
#+END_SRC

*** ~InterfacePoint~

#+NAME: owl-systemelements-connection
#+BEGIN_SRC ttl
imf:InterfacePoint a owl:Class ;
  rdfs:subClassOf imf:SystemElement ;
  skos:prefLabel "Interface Point" ;  
  skos:altLabel "Connection", "Junction" , "Transport" ;
  .

imf:theInput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:domain imf:InterfacePoint ;
  rdfs:range imf:InputTerminal ;
  .

imf:theOutput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:domain imf:InterfacePoint ;
  rdfs:range imf:OutputTerminal ;
  .
#+END_SRC

*** ~isPartOf~ / ~hasPart~

#+NAME: owl-systemelements-relations-partof
#+BEGIN_SRC ttl
imf:isPartOf a owl:ObjectProperty;
  a owl:FunctionalProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:broader ;
  rdfs:domain imf:Block ;
  rdfs:range imf:Block ;
  skos:prefLabel "is part of" ;
  skos:altLabel "has parent" ;
  .

imf:hasPart a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation, imf:hierarchicalRelation, skos:narrower ;
  owl:inverseOf imf:isPartOf ;
  skos:prefLabel "has part";
  skos:altLabel "has child";
  .
#+END_SRC

*** ~isConnectedTo~

#+NAME: owl-systemelements-relations-connectedTo
#+BEGIN_SRC ttl
imf:isConnectedTo a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:intraAspectRelation , imf:associativeRelation ;
  owl:propertyChainAxiom ( imf:theInput [ owl:inverseOf imf:theOutput ] ) ;
  skos:prefLabel "is connected to" ;
  rdfs:domain imf:OutputTerminal ;
  rdfs:range imf:InputTerminal ;
  .
#+END_SRC

*** +Deprecated ~precedes~+                                        :noexport:

#+BEGIN_SRC ttl
imf:precedes a owl:ObjectProperty ;
  a
    # owl:IrreflexiveProperty , ### in OWL an irreflexive property is non-simple, and transitive properties must be simple.
    owl:TransitiveProperty ;
  rdfs:subPropertyOf imf:associativeRelation , imf:intraAspectRelation ;
  rdfs:domain imf:Terminal ;
  rdfs:range imf:Terminal ;
  skos:prefLabel "precedes";
  skos:definition """

    A relation between terminals that represents the "flow" of
    input/output between teminals, both terminals of the same system
    block (represented by the subproperty directlyPrecedes) and of
    different system blocks (represented by the subproperty
    isConnectedTo).

  """; .

imf:directlyPrecedes a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:precedes ;
  rdfs:domain imf:InputTerminal ;
  rdfs:range imf:OutputTerminal ;
  skos:prefLabel "directly precedes";
  skos:definition """

    An immediate, non-transitive, precedes relation between input
    terminals and output terminals *of the same system* such that
    (parts of) the input to the input terminal is processed by the
    system to produce (parts of) the output of the output terminal.

  """;
  .

#+END_SRC

*** Processing and QA                                                    :QA:
**** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/owl/.imf-systemelements.owl.wottr.ttl out/owl/imf-systemelements.owl.ttl")

#+RESULTS:
: 13:09:06 INFO  riot            :: File: out/owl/.imf-systemelements.owl.wottr.ttl
: 13:09:06 ERROR riot            :: [line: 116, col: 3 ] Triples not terminated by DOT
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/.imf-systemelements.owl.wottr.ttl : 102 Triples : 1 errors : 0 warnings
: 13:09:06 INFO  riot            :: File: out/owl/imf-systemelements.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-systemelements.owl.ttl :  (No Output)
: Total           : 0.23 sec : 102 Triples : 447.37 per second : 1 errors : 0 warnings

#+CALL: sh_jena_shacl_std_validate(data="out/owl/.imf-systemelements.owl.wottr.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src


**** Expand OTTR instances

#+CALL: lutra-expand(in="out/owl/.imf-systemelements.owl.wottr.ttl", out="out/owl/imf-systemelements.owl.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubClassOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/macro/0.1/DomainRange

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/MediaTypeDefinition

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectPropertyOf

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/Definition

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/TerminalTypeDefinition

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/AttributeDefinition

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/TypeDefinition

# [WARNING] Failed fetching template: http://ns.imfid.org/templates/ObjectTypeDefinition

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivalentClass

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/AllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/HasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ValueRestriction

# [INFO] Fetch missing template: http://tpl.ottr.xyz/owl/macro/0.1/ClassPartition
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/macro/0.1/ClassPartition
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectUnionOf
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/DisjointClasses
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/TypedListRelation
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectUnionOf
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ListRelation

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank503 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank503 : LUB<rdfs:Resource>, owl:members : LUB ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, owl:unionOf : LUB ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#Terminal : LUB<ottr:IRI> ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#Terminal : LUB<ottr:IRI> ...

# [INFO] Fetch missing template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectExactCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ObjectCardinality
# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/Cardinality

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank506 : LUB<rdfs:Resource>, owl:onClass : LUB ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank506 : LUB<rdfs:Resource>, owl:qualifiedCard ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank506 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank506 : LUB<rdfs:Resource>, owl:onProperty :  ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#hasInputTerminal : LUB<o ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#InputTerminal : LUB<ottr ...
# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(http://ns.imfid.org/imf#InterfacePoint : LUB<ott ...

# [WARNING] Fetch missing template: http://ns.ottr.xyz/0.4/NullableTriple
# [WARNING] Failed fetching template: http://ns.ottr.xyz/0.4/NullableTriple

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:NullableTriple(http://ns.imfid.org/imf#isConnectedTo :  ...
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/owl/.imf-systemelements.owl.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 159 triples
#+end_example

**** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf-systemelements.owl.ttl")

#+RESULTS:
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-systemelements.owl.ttl : 0.20 sec : 109 Triples : 556.12 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf-systemelements.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src


** IMF Aspects Sub-Ontology
*** Overview

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", data="out/owl/imf-aspects.owl.ttl", output="out/owl/imf-aspects-overview.svg")

#+RESULTS:

[[./out/owl/imf-aspects-overview.svg]]

*** Processing and QA                                                    :QA:
**** RDF validate tangled file

#+CALL: sh_jena_validate_rdf(files="out/owl/.imf-aspects.owl.wottr.ttl")

#+RESULTS:
: .imf-aspects.owl.wottr.ttl : 0.27 sec : 105 Triples : 394.74 per second

**** Expand OTTR instances

#+CALL: lutra-expand(in="out/owl/.imf-aspects.owl.wottr.ttl", out="out/owl/imf-aspects.owl.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/SubClassOf

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectAllValuesFrom

[INFO] Fetched template http://tpl.ottr.xyz/owl/macro/0.1/DomainRange

[INFO] Fetched template http://tpl.ottr.xyz/rdf/0.1/Type

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectHasValue

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectPropertyOf

[INFO] Fetched template http://tpl.ottr.xyz/owl/restriction/0.1/ObjectAllValuesFrom

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/EquivalentClass

[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/SubPropertyOf

[INFO] Fetched template http://tpl.ottr.xyz/owl/restriction/0.1/ObjectHasValue

[INFO] Fetched template http://tpl.ottr.xyz/owl/restriction/0.1/AllValuesFrom

[INFO] Fetched template http://tpl.ottr.xyz/owl/restriction/0.1/HasValue

[INFO] Fetched template http://tpl.ottr.xyz/owl/util/0.1/ValueRestriction

[INFO] Fetch missing template: http://tpl.ottr.xyz/owl/axiom/0.1/DifferentIndividuals
[INFO] Fetched template http://tpl.ottr.xyz/owl/axiom/0.1/DifferentIndividuals
[INFO] Fetched template http://tpl.ottr.xyz/owl/util/0.1/TypedListRelation
[INFO] Fetched template http://tpl.ottr.xyz/owl/util/0.1/ListRelation

 >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, rdf:type : LUB<ot ...
 >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:Triple(blank504 : LUB<rdfs:Resource>, owl:members : LUB ...

[WARNING] Fetch missing template: http://ns.ottr.xyz/0.4/NullableTriple
[WARNING] Failed fetch for template http://ns.ottr.xyz/0.4/NullableTriple

 >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:NullableTriple(http://ns.imfid.org/imf#interAspectRelat ...
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/.imf-aspects.owl.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 101 triples
#+end_example

**** RDF validate final file

#+CALL: sh_jena_validate_rdf(files="out/owl/imf-aspects.owl.ttl")

#+RESULTS:
: imf-aspects.owl.ttl : 0.26 sec : 89 Triples : 349.02 per second

#+CALL: sh_jena_shacl_std_validate(data="out/owl/imf-aspects.owl.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src

*** Ontology source
**** Header

#+NAME: owl-aspect-ontology
#+BEGIN_SRC ttl :noweb strip-export :tangle out/owl/.imf-aspects.owl.wottr.ttl :mkdirp yes
<<prefixes>>

<http://ns.imfid.org/imf-aspects> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf-aspects> ;
    owl:imports <http://ns.imfid.org/20221118/imf-top> ;
    skos:prefLabel "Information Modelling Framework Ontology: Aspects " ;
    skos:altLabel "IMF aspects ontology" ;
    skos:scopeNote """

      This ontology defines IMF's central aspects.

    """;
    .

<<owl-aspects-aspect>>
<<owl-aspects-fulfilledBy>>
<<py_aspect_ottr_instances_aspects()>>

imf:LocationTerminal        rdfs:subClassOf owl:Nothing .
imf:LocationInterfacePoint  rdfs:subClassOf owl:Nothing .
#+END_SRC

#+RESULTS: owl-aspect-ontology
#+begin_example
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix imf:	<http://ns.imfid.org/imf#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-imf:	     <http://ns.imfid.org/templates/> .

<http://ns.imfid.org/imf-aspects> a owl:Ontology ;
    owl:versionIRI <http://ns.imfid.org/20221118/imf-aspects> ;
    owl:imports <http://ns.imfid.org/20221118/imf-top> ;
    skos:prefLabel "Information Modelling Framework Ontology: Aspects Ontology " ;
    skos:altLabel "IMF aspects ontology" ;
    skos:scopeNote """

      This ontology defines IMF's central aspects.

    """;
    .

imf:Aspect a owl:Class ;

  skos:scopeNote """

    Each aspect is associated with a class of the aspect objects that
    have that aspect, e.g,. imf:FunctionAspectElement is the class of
    aspect objects with the aspect imf:FunctionAspect. These classes
    are used to specify permissible relationships between aspect
    objects according to their aspect.""" ;
  .

[] ottr:of o-imf:Aspect ;
   ottr:values( imf:FunctionAspect '=' '#FFFF00' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:LocationAspect '+' '#FF00FF' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:ProductAspect '-' '#00FFFF' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:ActivityAspect '>' '#000000' ) . 

[] ottr:of o-owl-ax:DifferentIndividuals ;
   ottr:values( ( imf:FunctionAspect imf:LocationAspect imf:ProductAspect imf:ActivityAspect ) ) . 

[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:FunctionAspectElement imf:FunctionAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:LocationAspectElement imf:LocationAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:ProductAspectElement imf:ProductAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:ActivityAspectElement imf:ActivityAspect ) . 

imf:interAspectRelation a owl:ObjectProperty ;
    rdfs:domain imf:AspectElement ;
    rdfs:range imf:AspectElement ;
    rdfs:subPropertyOf skos:related ;
    # owl:propertyDisjointWith imf:intraAspectRelation ; ## An error occurred during reasoning: Non-simple property or its inverse appears in disjoint properties axiom.

    skos:editorialNote """

      [2022-01-24 Mon] Do interAspectRelations always relate aspect
      objects of the same type?""" .
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:hasLocation ottr:none imf:LocationAspectElement ) . 
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:isFulfilledBy imf:FunctionAspectElement imf:ProductAspectElement ) . 
[] ottr:of o-imf:InterAspectRelation ;
   ottr:values( imf:hasActivity imf:FunctionAspectElement imf:ActivityAspectElement ) . 
#+end_example

**** ~Aspect~

#+NAME: owl-aspects-aspect
#+BEGIN_SRC ttl
imf:Aspect a owl:Class .
#+END_SRC

***** CANCELLED Primary Aspect                                     :noexport:

#+NAME: owl-aspects-primary
#+BEGIN_SRC ttl
imf:PrimaryAspect rdf:type owl:Class ;
  rdfs:subClassOf imf:Aspect ;

  skos:prefLabel "Primary Aspect";

  skos:definition """

    The set of primary aspects are exactly those defined in ISO/IEC
    81346: Function, Location, Product.

  """;
  .

  ### axioms
[] ottr:of o-owl-ax:EquivObjectOneOf ;
   ottr:values ( imf:PrimaryAspect ( imf:FunctionAspect imf:LocationAspect imf:ProductAspect ) ) .
#+END_SRC

***** CANCELLED Secondary Aspect                                   :noexport:

#+NAME: owl-aspects-secondary
#+BEGIN_SRC ttl
imf:SecondaryAspect rdf:type owl:Class ;
  rdfs:subClassOf imf:Aspect ;

  skos:prefLabel "Secondary Aspect";
  #skos:altLabel "";

  skos:definition """

    Secondary aspects are those aspects that are not primary aspects.

  """;

  #skos:scopeNote """ """;
  #skos:example """ """;
  #skos:editorialNote """ """;

  ### axioms

  owl:disjointWith imf:PrimaryAspect .
#+END_SRC
**** Aspects

This is the current list of aspects:

#+NAME: tbl-aspects
| Aspect, IRIs        | Prefix, string | Color, string |
|---------------------+----------------+---------------|
| imf:FunctionAspect  | '='            | '#FFFF00'     |
| imf:LocationAspect  | '+'            | '#FF00FF'     |
| imf:ProductAspect   | '-'            | '#00FFFF'     |
| imf:InstalledAspect | '::'           | '#FFFFFF'     |

#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/imf/aspects.stottr :mkdirp yes
<<prefixes>>

o-imf:Aspect [owl:NamedIndividual ?aspect, xsd:string ?symbol, xsd:string ?color] :: {
  o-rdf:Type(?aspect, imf:Aspect) ,
  ottr:Triple(?aspect, imf:prefix, ?symbol),
  ottr:Triple(?aspect, imf:color, ?color)
} .

o-imf:AspectElementClass [owl:Class ?class, owl:NamedIndividual ?aspect] :: {
  o-owl-ax:SubClassOf(?class, imf:AspectElement),  
  o-owl-ax:EquivObjectHasValue(?class, imf:hasAspect, ?aspect)
  # o-owl-ax:SubObjectAllValuesFrom(?class, imf:intraAspectRelation, ?class)
} .

o-imf:SystemElementAspectClass [owl:Class ?class, owl:Class ?aspectClass, owl:Class ?systemElementClass] :: {
  o-owl-ax:SubClassOf(?class, ?aspectClass),  
  o-owl-ax:SubClassOf(?class, ?systemElementClass)
} .


#+END_SRC

#+NAME: py_aspect_ottr_instances_aspects
#+BEGIN_SRC python :results raw :wrap src ttl :var table=tbl-aspects :exports none
output = ""

instance = "[] ottr:of {} ;\n   ottr:values( {} ) . \n"

## aspects
for row in table[0:]:
  output += instance.format("o-imf:Aspect", " ".join(f'{w}' for w in row))

output += "\n"

all_aspects = list(zip(*table[0:]))[0]
all_systemelements = [ 'Block', 'Terminal', 'InterfacePoint' ]

## aspects are different
output += instance.format("o-owl-ax:DifferentIndividuals", "( " + " ".join(all_aspects) + " )")

output += "\n"

## aspect object classes
for cell in all_aspects:
  output += instance.format("o-imf:AspectElementClass", cell + "Element " + cell)

output += "\n"

## aspect object classes
for aspect in all_aspects:
  for element in all_systemelements:
    output += instance.format("o-imf:SystemElementAspectClass", aspect.replace('Aspect', '') + element + " " + aspect  + "Element imf:" + element)


return output
#+END_SRC

#+RESULTS: py_aspect_ottr_instances_aspects
#+BEGIN_src ttl
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:FunctionAspect '=' '#FFFF00' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:LocationAspect '+' '#FF00FF' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:ProductAspect '-' '#00FFFF' ) . 
[] ottr:of o-imf:Aspect ;
   ottr:values( imf:InstalledAspect '::' '#FFFFFF' ) . 

[] ottr:of o-owl-ax:DifferentIndividuals ;
   ottr:values( ( imf:FunctionAspect imf:LocationAspect imf:ProductAspect imf:InstalledAspect ) ) . 

[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:FunctionAspectElement imf:FunctionAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:LocationAspectElement imf:LocationAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:ProductAspectElement imf:ProductAspect ) . 
[] ottr:of o-imf:AspectElementClass ;
   ottr:values( imf:InstalledAspectElement imf:InstalledAspect ) . 

[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:FunctionBlock imf:FunctionAspectElement imf:Block ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:FunctionTerminal imf:FunctionAspectElement imf:Terminal ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:FunctionInterfacePoint imf:FunctionAspectElement imf:InterfacePoint ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:LocationBlock imf:LocationAspectElement imf:Block ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:LocationTerminal imf:LocationAspectElement imf:Terminal ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:LocationInterfacePoint imf:LocationAspectElement imf:InterfacePoint ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:ProductBlock imf:ProductAspectElement imf:Block ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:ProductTerminal imf:ProductAspectElement imf:Terminal ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:ProductInterfacePoint imf:ProductAspectElement imf:InterfacePoint ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:InstalledBlock imf:InstalledAspectElement imf:Block ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:InstalledTerminal imf:InstalledAspectElement imf:Terminal ) . 
[] ottr:of o-imf:SystemElementAspectClass ;
   ottr:values( imf:InstalledInterfacePoint imf:InstalledAspectElement imf:InterfacePoint ) . 
#+END_src


#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/imf/interaspectrelations.stottr :mkdirp yes
<<prefixes>>

o-imf:InterAspectRelation[owl:ObjectProperty ?relation, owl:Class ?domain, owl:Class ?range] :: {
  o-owl-ax:SubObjectPropertyOf(?relation, imf:interAspectRelation),
  #o-owl-rstr:ObjectUnionOf(_:domain, ?domain),  
  #o-owl-rstr:ObjectUnionOf(_:range, ?range),
  o-owl-ma:DomainRange(?relation, ?domain, ?range)
} .
#+END_SRC


**** ~fulfilledBy~

#+NAME: owl-aspects-fulfilledBy
#+BEGIN_SRC ttl
imf:fulfilledBy a owl:ObjectProperty ;
  rdfs:subPropertyOf imf:InterAspectRelation ;
  owl:inverseOf imf:fulfills ;
  rdfs:domain imf:AspectElement ;
  rdfs:range imf:AspectElement ;
.
#+END_SRC


** Altogehter 

#+CALL: sh_jena_merge(files="out/owl/imf.owl.ttl out/owl/imf-aspects.owl.ttl out/owl/imf-systemelements.owl.ttl out/owl/imf-top.owl.ttl", out="out/owl/imf-all.owl.ttl")

#+RESULTS:
: 15:08:33 INFO  riot            :: File: out/owl/imf.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf.owl.ttl : 0.18 sec : 8 Triples : 44.44 per second
: 15:08:33 INFO  riot            :: File: out/owl/imf-aspects.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-aspects.owl.ttl : 0.03 sec : 116 Triples : 4,640.00 per second
: 15:08:33 INFO  riot            :: File: out/owl/imf-systemelements.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-systemelements.owl.ttl : 0.01 sec : 113 Triples : 8,071.43 per second
: 15:08:33 INFO  riot            :: File: out/owl/imf-top.owl.ttl
: file:///home/martige/repo/imf-lab/imf-ontology/out/owl/imf-top.owl.ttl : 0.01 sec : 69 Triples : 6,900.00 per second
: Total           : 0.23 sec : 306 Triples : 1,336.24 per second

* TODO IMF Grammar: SHACL                                          :noexport:

The IMF grammar is defined by SHACL shapes.

These SHACL shape constaints are defined using the OTTR templates for
SHACL.

** Grammar rules                                                   :noexport:

 - A System Element is either Block, a Terminal or an Interface Point.
 - An Aspect Element has exactly one Aspect.
 - In this version of IMF, there are four Aspects: Function, Product, Location and Installed.

 - partOf, hasTerminal and connectedTo are intra-aspect relations and may only relate aspect elements of the same aspect.
 - fulfilledBy is an inter-aspect relations and may only relate aspect elements of different aspect.

 - partOf is a relation between Blocks. A block may have many children and maximum one parent.
 - hasTerminal is a relation between Blocks and Terminals. A Block may have many Terminals. A Terminal must belong to exactly one Block.
 - connectedTo is a relation between Output Terminals and Input Terminals and Interface Points. A connectionTo relationship relates one Output Terminal with one Input Terminal and optionally one Interface Point. A Terminal is connected to at most one (other) Terminal.
 - fulfilledBy is a relation between Blocks or between Terminals. The inverse relation of fulfilledBy is fulfills. The following additional rules hold for fulfilledBy:
   - A function element is fulfilledBy at most one product element. A product element may fulfill many function elements.
   - A location element is fulfilledBy at most one product element. A location element may fulfill many product elements.
   - A product element can be fulfilledBy by many installed elements. An installed elements can fulfill by at most one product element.
   - No other fulfilledBy relationships then the above mentioned are allowed.


** Top

Node shapes:

#+NAME: tbl-aspectobject-shacl-nodes
| nodeshape              | targetClass       | closed | ignoredProperties |
|------------------------+-------------------+--------+-------------------|
| imf:AspectElementShape | imf:AspectElement |        |                   |

Path shapes:

#+NAME: tbl-aspectobject-shacl-properties
| nodeshape              | path           | message | severity   | mincount | maxcount | class      | datatype   | in-values |
|------------------------+----------------+---------+------------+----------+----------+------------+------------+-----------|
| imf:AspectElementShape | skos:prefLabel |         | sh:Warning |        1 |        1 |            | xsd:string |           |
| imf:AspectElementShape | imf:hasAspect  |         |            |        1 |        1 | imf:Aspect |            |           |

** SystemElements

Node shapes:

#+NAME: tbl-systemelements-shacl-nodes
| nodeshape               | targetClass        | closed | ignoredProperties |
|-------------------------+--------------------+--------+-------------------|
| imf:BlockShape          | imf:Block          |        |                   |
| imf:TerminalShape       | imf:Terminal       |        |                   |
| imf:InputTerminalShape  | imf:InputTerminal  |        |                   |
| imf:OutputTerminalShape | imf:OutputTerminal |        |                   |
| imf:InterfacePointShape | imf:InterfacePoint |        |                   |

Path shapes:

#+NAME: tbl-systemelements-shacl-properties
| nodeshape               | path              | message | severity | mincount | maxcount | class              | datatype | in-values |
|-------------------------+-------------------+---------+----------+----------+----------+--------------------+----------+-----------|
| imf:BlockShape          | imf:isPartOf      |         |          |          |        1 | imf:Block          |          |           |
| imf:BlockShape          | imf:hasPart       |         |          |          |          | imf:Block          |          |           |
| imf:BlockShape          | imf:hasTerminal   |         |          |          |          | imf:Terminal       |          |           |
| imf:BlockShape          | imf:fulfilledBy   |         |          |          |          | imf:Block          |          |           |
| imf:TerminalShape       | imf:fulfilledBy   |         |          |          |          | imf:Terminal       |          |           |
| imf:InterfacePointShape | imf:fulfilledBy   |         |          |          |        0 |                    |          |           |
| imf:OutputTerminalShape | imf:isConnectedTo |         |          |          |        1 | imf:InputTerminal  |          |           |
| imf:InterfacePointShape | imf:theInput      |         |          |          |        1 | imf:InputTerminal  |          |           |
| imf:InterfacePointShape | imf:theOutput     |         |          |          |        1 | imf:OutputTerminal |          |           |

#+NAME: systemelements-extra-shacl
#+BEGIN_SRC ttl
imf:TerminalShape 
  sh:property [
    sh:path [ sh:inversePath imf:hasTerminal ] ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:class imf:Block ] 
  .

imf:InputTerminalShape 
  sh:property [
    sh:path [ sh:inversePath imf:isConnectedTo ] ;
    sh:maxCount 1 ;
    sh:class imf:OutputTerminal ] 
  .

#+END_SRC

** Aspects

Node shapes:

#+NAME: tbl-aspects-shacl-nodes
| nodeshape                       | targetClass                | closed | ignoredProperties |
|---------------------------------+----------------------------+--------+-------------------|
| imf:FunctionAspectElementShape  | imf:FunctionAspectElement  |        |                   |
| imf:ProductAspectElementShape   | imf:ProductAspectElement   |        |                   |
| imf:LocationAspectElementShape  | imf:LocationAspectElement  |        |                   |
| imf:InstalledAspectElementShape | imf:InstalledAspectElement |        |                   |

Path shapes:

#+NAME: tbl-aspects-shacl-properties
| nodeshape                       | path                    | message | severity | mincount | maxcount | class                      | datatype | in-values |
|---------------------------------+-------------------------+---------+----------+----------+----------+----------------------------+----------+-----------|
| imf:FunctionAspectElementShape  | imf:intraAspectRelation |         |          |          |          | imf:FunctionAspectElement  |          |           |
| imf:ProductAspectElementShape   | imf:intraAspectRelation |         |          |          |          | imf:ProductAspectElement   |          |           |
| imf:LocationAspectElementShape  | imf:intraAspectRelation |         |          |          |          | imf:LocationAspectElement  |          |           |
| imf:InstalledAspectElementShape | imf:intraAspectRelation |         |          |          |          | imf:InstalledAspectElement |          |           |
| imf:FunctionAspectElementShape  | imf:fulfilledBy         |         |          |          |        1 | imf:ProductAspectElement   |          |           |
| imf:LocationAspectElementShape  | imf:fulfilledBy         |         |          |          |        1 | imf:ProductAspectElement   |          |           |
| imf:ProductAspectElementShape   | imf:fulfilledBy         |         |          |          |          | imf:InstalledAspectElement |          |           |
| imf:InstalledAspectElementShape | imf:fulfilledBy         |         |          |          |        0 |                            |          |           |
| imf:InstalledAspectElementShape | imf:fulfills            |         |          |          |        1 | imf:ProductAspectElement   |          |           |


** Compiling to one document                                             :QA:

#+BEGIN_SRC ttl :noweb yes :tangle out/shacl/.imf.shacl.wottr.ttl :mkdirp yes
<<prefixes>>

<<py_ottr_instances(template="o-imf:ShaclNodeShape", table=tbl-aspectobject-shacl-nodes)>>
<<py_ottr_instances(template="o-imf:ShaclPropertyShape", table=tbl-aspectobject-shacl-properties)>>
<<py_ottr_instances(template="o-imf:ShaclNodeShape", table=tbl-systemelements-shacl-nodes)>>
<<py_ottr_instances(template="o-imf:ShaclPropertyShape", table=tbl-systemelements-shacl-properties)>>
<<systemelements-extra-shacl>>
<<py_ottr_instances(template="o-imf:ShaclNodeShape", table=tbl-aspects-shacl-nodes)>>
<<py_ottr_instances(template="o-imf:ShaclPropertyShape", table=tbl-aspects-shacl-properties)>>
#+END_SRC

#+RESULTS:
#+begin_example
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix ex:	<http://example.com#> .
@prefix imf:	<http://ns.imfid.org/imf#> .

@prefix p14:    <http://example.com/P14#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-imf:	     <http://ns.imfid.org/templates/> .

[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:AspectElementShape imf:AspectElement ottr:none ottr:none ) . 

[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:AspectElementShape skos:prefLabel ottr:none sh:Warning 1 1 ottr:none xsd:string ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:AspectElementShape imf:hasAspect ottr:none ottr:none 1 1 imf:Aspect ottr:none ottr:none ) . 

[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:BlockShape imf:Block ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:TerminalShape imf:Terminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:OutputTerminalShape imf:OutputTerminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:InterfacePointShape imf:InterfacePoint ottr:none ottr:none ) . 

[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:BlockShape imf:isPartOf ottr:none ottr:none ottr:none 1 imf:Block ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:BlockShape imf:hasPart ottr:none ottr:none ottr:none ottr:none imf:Block ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:BlockShape imf:hasTerminal ottr:none ottr:none ottr:none ottr:none imf:Terminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:BlockShape imf:fulfilledBy ottr:none ottr:none ottr:none ottr:none imf:Block ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:TerminalShape imf:fulfilledBy ottr:none ottr:none ottr:none ottr:none imf:Terminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InterfacePointShape imf:fulfilledBy ottr:none ottr:none ottr:none 0 ottr:none ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:OutputTerminalShape imf:isConnectedTo ottr:none ottr:none ottr:none 1 imf:InputTerminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InterfacePointShape imf:theInput ottr:none ottr:none ottr:none 1 imf:InputTerminal ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InterfacePointShape imf:theOutput ottr:none ottr:none ottr:none 1 imf:OutputTerminal ottr:none ottr:none ) . 

imf:TerminalShape 
  sh:property [
    sh:path [ sh:inversePath ex:parent ] ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:class imf:Block ] 
  .
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:FunctionAspectElementShape imf:FunctionAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:ProductAspectElementShape imf:ProductAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:LocationAspectElementShape imf:LocationAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( imf:InstalledAspectElementShape imf:InstalledAspectElement ottr:none ottr:none ) . 

[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:FunctionAspectElementShape imf:intraAspectRelation ottr:none ottr:none ottr:none ottr:none imf:FunctionAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:ProductAspectElementShape imf:intraAspectRelation ottr:none ottr:none ottr:none ottr:none imf:ProductAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:LocationAspectElementShape imf:intraAspectRelation ottr:none ottr:none ottr:none ottr:none imf:LocationAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InstalledAspectElementShape imf:intraAspectRelation ottr:none ottr:none ottr:none ottr:none imf:InstalledAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:FunctionAspectElementShape imf:fulfilledBy ottr:none ottr:none ottr:none 1 imf:ProductAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:LocationAspectElementShape imf:fulfilledBy ottr:none ottr:none ottr:none 1 imf:ProductAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:ProductAspectElementShape imf:fulfilledBy ottr:none ottr:none ottr:none ottr:none imf:InstalledAspectElement ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InstalledAspectElementShape imf:fulfilledBy ottr:none ottr:none ottr:none 0 ottr:none ottr:none ottr:none ) . 
[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( imf:InstalledAspectElementShape imf:fulfills ottr:none ottr:none ottr:none 1 imf:ProductAspectElement ottr:none ottr:none ) . 
#+end_example

#+CALL: lutra-expand(in="out/shacl/.imf.shacl.wottr.ttl", out="out/shacl/imf.shacl.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubClassOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/macro/0.1/DomainRange

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivalentClass

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/HasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ValueRestriction

# [WARNING] Unused parameter in template http://ns.imfid.org/templates/Type. The template has a parameter ?class : ottr:IRI (arg no. 2) which does not occur in the pattern of the template.

# [WARNING] Fetch missing template: http://ns.ottr.xyz/0.4/NullableTriple
# [WARNING] 
# [WARNING] Empty file: http://ns.ottr.xyz/0.4/NullableTriple

# >>> at [1: 1] (xyz.ottr.lutra.io.TemplateReader) xyz.ottr.lutra.stottr.parser.STemplateParser@5a3a1bf9
# [WARNING] Failed fetching template: http://ns.ottr.xyz/0.4/NullableTriple

# >>> at [1: 1] (xyz.ottr.lutra.model.Instance) ottr:NullableTriple(http://ns.imfid.org/imf#TerminalShape :  ...
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/out/shacl/.imf.shacl.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 103 triples
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix imf: <http://ns.imfid.org/imf#> .
@prefix pav: <http://purl.org/pav/> .
@prefix o-rdf: <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p14: <http://example.com/P14#> .
@prefix ex: <http://example.com#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix o-imf: <http://ns.imfid.org/templates/> .
@prefix ottr: <http://ns.ottr.xyz/0.4/> .
@prefix o-owl-ma: <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-ax: <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

imf:AspectElementShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:Aspect ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path imf:hasAspect
    ], [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path skos:prefLabel ;
        sh:severity sh:Warning
    ] ;
    sh:targetClass imf:AspectElement .

imf:BlockShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:Block ;
        sh:path imf:fulfilledBy
    ], [
        sh:class imf:Block ;
        sh:maxCount 1 ;
        sh:path imf:isPartOf
    ], [
        sh:class imf:Block ;
        sh:path imf:hasPart
    ], [
        sh:class imf:Terminal ;
        sh:path imf:hasTerminal
    ] ;
    sh:targetClass imf:Block .

imf:FunctionAspectElementShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:ProductAspectElement ;
        sh:maxCount 1 ;
        sh:path imf:fulfilledBy
    ], [
        sh:class imf:FunctionAspectElement ;
        sh:path imf:intraAspectRelation
    ] ;
    sh:targetClass imf:FunctionAspectElement .

imf:InputTerminalShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:OutputTerminal ;
        sh:maxCount 1 ;
        sh:path [
            sh:inversePath imf:isConnectedTo
        ]
    ] ;
    sh:targetClass imf:InputTerminal .

imf:InstalledAspectElementShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:InstalledAspectElement ;
        sh:path imf:intraAspectRelation
    ], [
        sh:class imf:ProductAspectElement ;
        sh:maxCount 1 ;
        sh:path imf:fulfills
    ], [
        sh:maxCount 0 ;
        sh:path imf:fulfilledBy
    ] ;
    sh:targetClass imf:InstalledAspectElement .

imf:InterfacePointShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:InputTerminal ;
        sh:maxCount 1 ;
        sh:path imf:theInput
    ], [
        sh:maxCount 0 ;
        sh:path imf:fulfilledBy
    ], [
        sh:class imf:OutputTerminal ;
        sh:maxCount 1 ;
        sh:path imf:theOutput
    ] ;
    sh:targetClass imf:InterfacePoint .

imf:LocationAspectElementShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:ProductAspectElement ;
        sh:maxCount 1 ;
        sh:path imf:fulfilledBy
    ], [
        sh:class imf:LocationAspectElement ;
        sh:path imf:intraAspectRelation
    ] ;
    sh:targetClass imf:LocationAspectElement .

imf:OutputTerminalShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:InputTerminal ;
        sh:maxCount 1 ;
        sh:path imf:isConnectedTo
    ] ;
    sh:targetClass imf:OutputTerminal .

imf:ProductAspectElementShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:ProductAspectElement ;
        sh:path imf:intraAspectRelation
    ], [
        sh:class imf:InstalledAspectElement ;
        sh:path imf:fulfilledBy
    ] ;
    sh:targetClass imf:ProductAspectElement .

imf:TerminalShape
    a sh:NodeShape ;
    sh:property [
        sh:class imf:Terminal ;
        sh:path imf:fulfilledBy
    ], [
        sh:class imf:Block ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path [
            sh:inversePath imf:hasTerminal
        ]
    ] ;
    sh:targetClass imf:Terminal .

#+end_example

* TODO IMF Types                                                   :noexport:
* TODO IMF Data Exchange Format: RDF                               :noexport:

The primary data exchange format for IMF data is RDF as defined by the
IMF Grammar SHACL Shapes.

** TODO JSON-LD context object

[This is an old sketch:]

#+BEGIN_SRC json
 {
    "@context": {
	"xsd": "http://www.w3.org/2001/XMLSchema#",
	"rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
	"@vocab": "http://example.com/vocab/",
	"@base": "http://example.com/base/",
	"model": "@id",
	"node": "@id",
	"nodeType": {
	    "@type": "@id"
	},
	"type": "@type",
	"directed": {
	    "@type": "xsd:boolean"
	},
	"RDScode": {
	    "@type": "@id"
	},
	"relation": {
	    "@type": "@id"
	},
	"attribute": {
	    "@type": "@id"
	},
	"uom": {
	    "@type": "@id"
	},
	"source": {
	    "@type": "@id"
	},
	"target": {
	    "@type": "@id"
	}
    },
    
    "model": "myGraph",
    "directed": "true",
    "type": "IMF spec",
    "nodes": [
	{
	    "node": "n0",
	    "nodeType": [
		"Function",
		"asdf"
	    ],
	    "RDScode": null,
	    "RDLtype": null,
	    "attributes": [
		{
		    "attribute": "asdf",
		    "value": "asdf",
		    "uom": "m",
		    "type": "range"
		}
	    ],
	    "purpose": null,
	    "tag": null
	},
	{
	    "node": "n1",
	    "nodeType": "Function",
	    "RDScode": null,
	    "RDLtype": null,
	    "attributes": null,
	    "purpose": null,
	    "tag": null
	},
	{
	    "node": "n2",
	    "nodeType": "Function",
	    "RDScode": "GPB1",
	    "RDLtype": null,
	    "attributes": null,
	    "purpose": "Water Inj.\nPump A",
	    "tag": null
	}
    ],
    "relations": [
	{
	    "relation": "hasPart",
	    "source": "n1",
	    "target": "n2"
	},
	{
	    "relation": "hasPart",
	    "source": "n1",
	    "target": "n2"
	}
    ]
}
#+END_SRC



* TODO IMF Modelling Patterns: OTTR
** IMF Type patterns
#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/type-patterns.stottr
<<prefixes>>

o-imf:Type[
  ottr:IRI ?id,
  ottr:IRI ?class,
  ottr:IRI ?aspect
] :: {
  o-rdf:Type(?id, sh:NodeShape),
  o-rdf:Type(?id, imf:Type),
  ottr:Triple(?id, sh:targetClass, ?id),	
  o-imf:ShaclPropertyValueShape(?id, imf:hasAspect, ?aspect)
} .


o-imf:AttributeType[
     ottr:IRI ?type,
  !  ottr:IRI ?classifier,         # Purpose, Supplimentary, ???
  !  ottr:IRI ?quality,            # Example: pressure
  !? ottr:IRI ?provenance,         # Required, Specified, Design, Calculated, Measured, Estimated, Set
  !? ottr:IRI ?range,              # Nominal, Normal, Average, Maximum, Minimum, Actual
  !? ottr:IRI ?regularity,         # Continuous, Absolute 
  !? ottr:IRI ?scope,              # Design, Operating, Test
   ? rdfs:Literal ?value,      
   ? ottr:IRI ?uom
] :: {
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, rdf:type), ?classifier),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, rdf:type), ?quality),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, rdf:type), ?provenance),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, rdf:type), ?range),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, rdf:type), ?regularity),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, rdf:type), ?scope),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, p14:datumValue), ?value),
  o-imf:ShaclPropertyValueShape(?type, (imf:hasAttribute, p14:hasDatum, p14:datumUOM), ?uom)
} .

o-imf:ShaclPropertyValueShape[
  ottr:IRI ?nodeshape, 
  ?path,
  ?value
] :: {
  ottr:Triple(?nodeshape, sh:property, _:P) ,
  ottr:Triple(_:P, sh:path, ?path),
  ottr:Triple(_:P, sh:hasValue, ?value)
} .


#+END_SRC
** IMF Data patterns

#+BEGIN_SRC ttl :noweb strip-export :tangle out/ottr/data-patterns.stottr
<<prefixes>>

o-imf:System[
  ottr:IRI ?id,
  ottr:IRI ?type,
  ottr:IRI ?aspect
] :: {
  o-rdf:Type(?id, imf:System),
  o-rdf:Type(?id, ?type),
  ottr:Triple(?id, imf:hasAspect, ?aspect)
} .

o-imf:Terminal[
  ottr:IRI ?id,
  ottr:IRI ?type,
  ottr:IRI ?aspect,
  ottr:IRI ?system
] :: {
  o-rdf:Type(?id, imf:System),
  o-rdf:Type(?id, ?type),
  ottr:Triple(?id, imf:hasAspect, ?aspect),
  ottr:Triple(?system, imf:hasTerminal, ?id)
} .

o-imf:Attribute[
     ottr:IRI ?id,
  !  ottr:IRI ?classifier,         # Purpose, Supplimentary, ???
  !  ottr:IRI ?quality,            # Example: pressure
  !? ottr:IRI ?provenance,         # Required, Specified, Design, Calculated, Measured, Estimated, Set
  !? ottr:IRI ?range,              # Nominal, Normal, Average, Maximum, Minimum, Actual
  !? ottr:IRI ?regularity,         # Continuous, Absolute 
  !? ottr:IRI ?scope,              # Design, Operating, Test
     rdfs:Literal ?value,      
     ottr:IRI ?uom
] :: {
  ottr:Triple(?id, imf:hasAttribute, _:attr),
  o-rdf:Type(_:attr, ?classifier),
  o-rdf:Type(_:attr, ?quality),
  ottr:Triple(_:attr, p14:hasDatum, _:datum),	
  o-rdf:Type(_:datum, ?provenance),
  o-rdf:Type(_:datum, ?range),
  o-rdf:Type(_:datum, ?regularity),
  o-rdf:Type(_:datum, ?scope),
  ottr:Triple(_:datum, p14:datumValue, ?value),
  ottr:Triple(_:datum, p14:datumUOM, ?uom)
} .


#+END_SRC
** SHACL Shapes patterns                                           :noexport:

This section defines helpful patterns for expressing SHACL shape
expressions.

#+BEGIN_SRC ttl :noweb yes :tangle out/ottr/shacl/shacl.stottr :mkdirp yes
<<prefixes>>

o-imf:ShaclNodeShape[ 
  ottr:IRI ?nodeshapeID, 
  ? owl:Class ?targetClass, 
  ? xsd:boolean ?closed, 
  ? List<ottr:IRI> ?ignoredProperties
] :: {
  o-rdf:Type(?nodeshapeID, sh:NodeShape),
  ottr:Triple(?nodeshapeID, sh:targetClass, ?targetClass),
  ottr:Triple(?nodeshapeID, sh:closed, ?closed),
  ottr:Triple(?nodeshapeID, sh:ignoredProperties, ?ignoredProperties)
} .

o-imf:ShaclPropertyShape[
    ottr:IRI ?nodeshape, 
    ottr:IRI ?path, 
  ? xsd:string ?message, 
  ? ottr:IRI ?severity,
  ? xsd:integer ?mincount, 
  ? xsd:integer ?maxcount, 
  ? owl:Class ?class,
  ? ottr:IRI ?datatype,
  ? List<rdfs:Resource> ?inValues
] :: {
  ottr:Triple(?nodeshape, sh:property, _:P) ,
  ottr:Triple(_:P, sh:path, ?path),
  ottr:Triple(_:P, sh:minCount, ?mincount),
  ottr:Triple(_:P, sh:maxCount, ?maxcount),
  ottr:Triple(_:P, sh:message, ?message),
  ottr:Triple(_:P, sh:class, ?class),
  ottr:Triple(_:P, sh:datatype, ?datatype),
  ottr:Triple(_:P, sh:severity, ?severity),
  ottr:Triple(_:P, sh:in, ?inValues)
} .
#+END_SRC

*** Example converting table rows to OTTR template instances

  #+NAME: shacl-test-nodes
 | NodeShape | targetClass | closed | ignoredProperties |
 |-----------+-------------+--------+-------------------|
 | ex:Node1  | ex:MyClass  | true   | ( ex:p1 ex:p2 )   |

 #+NAME: shacl-test-properties
 | NodeShape | path  | message      | severity   | minCount | maxCount | class       | datatype | in-values       |
 |-----------+-------+--------------+------------+----------+----------+-------------+----------+-----------------|
 | ex:node1  | ex:p1 | 'Error: bla' | sh:Warning |        1 |        3 | ex:MyClass2 |          | ( ex:c1 ex:c2 ) |

This is the result of representing the above tables as OTTR instances.

#+BEGIN_SRC ttl :noweb yes :tangle out/temp/example-shacl-shapes.wottr.ttl :mkdirp yes
@prefix ex:	<http://example.com#> .
<<prefixes>>

<<py_ottr_instances(template="o-imf:ShaclNodeShape", table=shacl-test-nodes)>>
<<py_ottr_instances(template="o-imf:ShaclPropertyShape", table=shacl-test-properties)>>
#+END_SRC



#+RESULTS:
#+begin_example
@prefix ex:	<http://example.com#> .
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix ex:	<http://example.com#> .
@prefix imf:	<http://ns.imfid.org/imf#> .
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-imf:	     <http://ns.imfid.org/templates/> .

[] ottr:of o-imf:ShaclNodeShape ;
   ottr:values ( ex:Node1 ex:MyClass true ( ex:p1 ex:p2 ) ) . 

[] ottr:of o-imf:ShaclPropertyShape ;
   ottr:values ( ex:node1 ex:p1 'Error: bla' sh:Warning 1 3 ex:MyClass2 ottr:none ( ex:c1 ex:c2 ) ) . 
#+end_example

#+CALL: lutra-expand(in="out/temp/example-shacl-shapes.wottr.ttl", out="out/temp/example-shacl-shapes.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubClassOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/macro/0.1/DomainRange

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubObjectPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectAllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/EquivalentClass

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/axiom/0.1/SubPropertyOf

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/ObjectHasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/AllValuesFrom

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/restriction/0.1/HasValue

# [INFO] Fetched template: http://tpl.ottr.xyz/owl/util/0.1/ValueRestriction
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/temp/example-shacl-shapes.wottr.ttl.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 20 triples
#+end_example





* TODO Translation to ISO 15926-14                                 :noexport:

Da blir det vel i henhold til dette pattern: https://rds.posccaesar.org/doc/patterns/pattern_physical_quantity_quantification/

physical quantity:  pressure:  http://rds.posccaesar.org/ontology/plm/rdl/PCA_100003596

uom: barg: http://rds.posccaesar.org/ontology/plm/rdl/PCA_100003649

"Quantity datum(http://rds.posccaesar.org/ontology/lis14/rdl/QuantityDatum)" klasser;

Calculated : http://rds.posccaesar.org/ontology/plm/rdl/PCA_100004038
Operating  : http://rds.posccaesar.org/ontology/plm/rdl/PCA_100004043
Maximum    : http://rds.posccaesar.org/ontology/plm/rdl/PCA_100004048
Absolute   : http://rds.posccaesar.org/ontology/plm/rdl/PCA_100004052


* Examples
** Pumping Use Case

The example is currently just a proof of concept of how patterns of
types and data can be used to produce SHACL that can validate the RDF
data.

The example is inspired by the following diagram:

[[./img/pumpingFunction.png]]

*** Types

#+BEGIN_SRC ttl :noweb strip-export :tangle out/example/pumping/types.stottr :mkdirp yes
<<prefixes>>

o-imf:Type(ex:PumpingType, imf:Block, imf:Function) .
o-imf:AttributeType(ex:myPumpingType, imf:Purpose, p14:Pressure, none, none, none, none, none, none).

o-imf:Type(ex:PumpingOutTerminalType, imf:Terminal, imf:Function) .
o-imf:AttributeType(ex:PumpingOutTerminalType, imf:Purpose, p14:Topsx, none, none, none, none, none, p14:cm).
o-imf:AttributeType(ex:PumpingOutTerminalType, imf:Purpose, p14:Topsy, none, none, none, none, none, p14:cm).
#+END_SRC

*** Data

#+BEGIN_SRC ttl :noweb strip-export :tangle out/example/pumping/data.stottr
<<prefixes>>

o-imf:System(ex:myPumping, ex:PumpingType, imf:Function) .
o-imf:Attribute(ex:myPumping, imf:Purpose, p14:Pressure, p14:Calculated, p14:Maximum, p14:Absolute, p14:Operating, 120, p14:barg).

o-imf:Terminal(ex:myPumpingOutTerminal, ex:PumpingOutTerminalType, imf:Function, ex:myPumping) .
o-imf:Attribute(ex:myPumpingOutTerminal, imf:Purpose, p14:Topsx, p14:Calculated, p14:Maximum, p14:Absolute, p14:Operating, 12, p14:mm).
o-imf:Attribute(ex:myPumpingOutTerminal, imf:Purpose, p14:Topsy, p14:Calculated, p14:Minimum, p14:Absolute, p14:Operating, 2, p14:mm).
#+END_SRC

*** Expand
**** Types

The type pattern instances expand to SHACL shape definitions.

#+CALL: lutra-expand(in="out/example/pumping/types.stottr", inFormat="stottr", out="out/example/pumping/types.stottr.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [WARNING] Unused parameter in template http://ns.imfid.org/templates/Type. The template has a parameter ?class : ottr:IRI (arg no. 2) which does not occur in the pattern of the template.
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/example/pumping/types.stottr.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 180 triples
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix imf: <http://ns.imfid.org/imf#> .
@prefix pav: <http://purl.org/pav/> .
@prefix o-rdf: <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p14: <http://example.com/P14#> .
@prefix ex: <http://example.com#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix o-imf: <http://ns.imfid.org/templates/> .
@prefix ottr: <http://ns.ottr.xyz/0.4/> .
@prefix o-owl-ma: <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-ax: <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

ex:PumpingOutTerminalType
    a imf:Type, sh:NodeShape ;
    sh:property [
        sh:hasValue imf:Function ;
        sh:path imf:hasAspect
    ], [
        sh:hasValue p14:cm ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            p14:datumUOM
        )
    ], [
        sh:hasValue p14:Operating ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Topsx ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ], [
        sh:hasValue p14:Absolute ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Calculated ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Maximum ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue imf:Purpose ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ], [
        sh:hasValue p14:cm ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            p14:datumUOM
        )
    ], [
        sh:hasValue p14:Operating ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Topsy ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ], [
        sh:hasValue p14:Absolute ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Calculated ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Minimum ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue imf:Purpose ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ] ;
    sh:targetClass ex:PumpingOutTerminalType .

ex:PumpingType
    a imf:Type, sh:NodeShape ;
    sh:property [
        sh:hasValue imf:Function ;
        sh:path imf:hasAspect
    ] ;
    sh:targetClass ex:PumpingType .

ex:myPumpingType
    sh:property [
        sh:hasValue p14:Operating ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Calculated ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue p14:Maximum ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ], [
        sh:hasValue imf:Purpose ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ], [
        sh:hasValue p14:Pressure ;
        sh:path (imf:hasAttribute
            rdf:type
        )
    ], [
        sh:hasValue p14:Absolute ;
        sh:path (imf:hasAttribute
            p14:hasDatum
            rdf:type
        )
    ] .

#+end_example

**** Data

The data pattern instances expand to RDF.

#+CALL: lutra-expand(in="out/example/pumping/data.stottr", inFormat="stottr", out="out/example/pumping/data.stottr.ttl")

#+RESULTS:
#+begin_example
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

# [INFO] Fetched template: http://tpl.ottr.xyz/rdf/0.1/Type

# [WARNING] Unused parameter in template http://ns.imfid.org/templates/Type. The template has a parameter ?class : ottr:IRI (arg no. 2) which does not occur in the pattern of the template.
rapper: Parsing URI file:///home/martige/repo/imf-lab/imf-ontology/example/pumping/data.stottr.temp with parser turtle
rapper: Serializing with serializer turtle
rapper: Parsing returned 37 triples
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix imf: <http://ns.imfid.org/imf#> .
@prefix pav: <http://purl.org/pav/> .
@prefix o-rdf: <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p14: <http://example.com/P14#> .
@prefix ex: <http://example.com#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix o-imf: <http://ns.imfid.org/templates/> .
@prefix ottr: <http://ns.ottr.xyz/0.4/> .
@prefix o-owl-ma: <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-ax: <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

ex:myPumping
    imf:hasAspect imf:Function ;
    imf:hasAttribute [
        p14:hasDatum [
            p14:datumUOM p14:barg ;
            p14:datumValue 120 ;
            a p14:Absolute, p14:Calculated, p14:Maximum, p14:Operating
        ] ;
        a p14:Pressure, imf:Purpose
    ] ;
    imf:hasTerminal ex:myPumpingOutTerminal ;
    a ex:PumpingType, imf:System .

ex:myPumpingOutTerminal
    imf:hasAspect imf:Function ;
    imf:hasAttribute [
        p14:hasDatum [
            p14:datumUOM p14:mm ;
            p14:datumValue 12 ;
            a p14:Absolute, p14:Calculated, p14:Maximum, p14:Operating
        ] ;
        a p14:Topsx, imf:Purpose
    ], [
        p14:hasDatum [
            p14:datumUOM p14:mm ;
            p14:datumValue 2 ;
            a p14:Absolute, p14:Calculated, p14:Minimum, p14:Operating
        ] ;
        a p14:Topsy, imf:Purpose
    ] ;
    a ex:PumpingOutTerminalType, imf:System .

#+end_example

*** Validate

We can validate the IMF RDF data against the IMF type SHACL shapes.

#+CALL: sh_jena_shacl_validate(shapes="out/example/pumping/types.stottr.ttl", data="out/example/pumping/data.stottr.ttl")

#+RESULTS:
#+BEGIN_src ttl
@prefix ex:         <http://example.com#> .
@prefix imf:        <http://ns.imfid.org/imf#> .
@prefix o-imf:      <http://ns.imfid.org/templates/> .
@prefix o-owl-ax:   <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:   <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-rdf:      <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix ottr:       <http://ns.ottr.xyz/0.4/> .
@prefix owl:        <http://www.w3.org/2002/07/owl#> .
@prefix p14:        <http://example.com/P14#> .
@prefix pav:        <http://purl.org/pav/> .
@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:         <http://www.w3.org/ns/shacl#> .
@prefix shsh:       <http://www.w3.org/ns/shacl-shacl#> .
@prefix skos:       <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd:        <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  false ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  ex:myPumpingOutTerminal ;
                 sh:resultMessage              "HasValueConstraint[http://example.com/P14#cm] : No value <http://example.com/P14#cm> in [http://example.com/P14#mm]" ;
                 sh:resultPath                 ( ( imf:hasAttribute p14:hasDatum ) p14:datumUOM ) ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:HasValueConstraintComponent ;
                 sh:sourceShape                [] 
               ] ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  ex:myPumpingOutTerminal ;
                 sh:resultMessage              "HasValueConstraint[http://example.com/P14#cm] : No value <http://example.com/P14#cm> in [http://example.com/P14#mm]" ;
                 sh:resultPath                 ( ( imf:hasAttribute p14:hasDatum ) p14:datumUOM ) ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:HasValueConstraintComponent ;
                 sh:sourceShape                [] 
               ]
] .
#+END_src

* Prefixes

This section contains the prefixes used throughout this document.

** Standard vocabulary prefixes

#+NAME: prefixes-std
#+BEGIN_SRC ttl :tangle out/.std-prefixes.ttl
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix pav:	<http://purl.org/pav/> .
@prefix sh: 	<http://www.w3.org/ns/shacl#> . 
@prefix shsh:   <http://www.w3.org/ns/shacl-shacl#> .
@prefix ex:	<http://example.com#> .
#+END_SRC

** IMF prefixes

#+NAME: prefixes-imf
#+BEGIN_SRC ttl
@prefix imf:	<http://ns.imfid.org/imf#> .

@prefix p14:    <http://example.com/P14#> .
#+END_SRC

** OTTR template prefixes

#+NAME: prefixes-ottr
#+BEGIN_SRC ttl
@prefix ottr:        <http://ns.ottr.xyz/0.4/> .
@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-imf:	     <http://ns.imfid.org/templates/> .
#+END_SRC

** All prefixes combined                                           :noexport:

#+NAME: prefixes
#+BEGIN_SRC ttl :noweb yes
<<prefixes-std>>
<<prefixes-imf>>
<<prefixes-ottr>>
#+END_SRC

* Discussion
** IMF Type representation formats: Pros and Cons

*** Requirements

Informally, the high-level requirement of an IMF type is that is
should define a small typical IMF data building block that may be used
for creating multiple instances of the type. The type states some
requirements of what attributes and values that need to be set by each
of the instances of the type, some of there requirements are
optional. A type may also state attributes and values about itself,
i.e., that do not state requirements about its instances, such as
metadata about the type.

A type should essentially specify three things:
 - its own data, e.g., metadata, like its own name
 - requirements to its instances' data in the form of
   - concrete values (e.g., aspect: function)
   - ranges of permissible values (e.g., permissible operating
     temperature between 0--10 C)

Example: the image below contains an informal specification of a type
with the purpose Pumping, in this text we call it the "Pumping
type". This type has references to types that specify different
terminal types, named T1, T2, T3. In its yellow box, the Pumping type
contains attributes that are metadata, like its name, and attibute
that should hold for all its instances, e.g., all instances of the
type should have the aspect Function. Additionally, the type specifies
/Purpose attributes/---these are mandatory attributes. One such
attribute is here called "Pressure, UoM". This indicates that
instances of the type need to specify an attibute "Pressure" and
assign a value to it which is specified with a unit of measure. The
text in blue that is linked to this attribute illustrates one possible
instantiation of this attribute: "120, barg,
Calculated/Operating/Maximum/Absolute". Although this example does not
illustrate it, it is reasonable to expect types to also specify a
range of possible values for an attribute, e.g, that the permissible
values for the Pressure attribute should be within the range [0, 120]
and/or a list of permissible unit of measures.

[[./img/pumpingFunction.png]]

*** Implementation possibilities

An IMF type may be implemented using different semantic
technologies. Here we explore different options and discuss their pros
and cons.

A type should be able to express three things:
 1. Data about the type, metadata
 2. Required attribute with specific values, here called "blueprint"
 3. Mandatory and optional attributes with a range of permissible
    values

Note that point 2 can be considered a special case of point 3, where
the attribute is mandatory and the range of permissible values is a
single value. Therefore we these two points at the same time, under
the heading "Attributes" below.

**** Metadata = RDF

Type metadata is expressed using RDF following the IMF grammar. This
is the only natural option.

**** Attributes

We exemplify the different approches by representing the following
small example type data:

 - Purpose: Pumping
 - Fluid: Water
 - Pressure: [0, 120] UoM

*** RDF

Attribute values can be written in RDF using the grammar for IMF data
elements. The intended semantics can be implemented in (at least) two
ways:

1. Instances must contain a copy of all attrbutes and values.
2. Instances do not contain a copy of the attritbutes and values, but
   the instance contains a reference to the type, e.g.,
   ~imf:instanceOf~ that indicates a "virtual" copy of the attributes
   and values

However, RDF cannot also support expressing ranges of permissible
values (unless the IMF grammar is extended).

Pros: 
 - The format of the blueprint is identical to the IMF data format,
   and should therefore be easy to read and write.
 - The representation format is simple and "direct" in that it is
   specified using data.

Cons:
 - This approach is nonstandard. Tools would need to make sure that
   either (1) a copy is made or (2) that the reference to the type is
   considered whenever the instance is used/transformed. When the
   instance is updated, one needs to make sure that the type
   information is respected.
 - Does not support attributes with ranges. This must be implemented
   with a different language or by extending the IMF RDF grammer and
   implementing.

Example:

#+BEGIN_SRC ttl
# Type
:PumpingType a :Type ;
  :purpose :Pumping ;
  :fluid :Water ;
  # cannot represent pressure accurately
  :pressure [ ] . # use a blank node to indicate that *some* value is required. 

# Instance, approach 1: copy of type data:
:MyPumping a :AspectElement ;
  :instanceOf :PumpingType ; # keep a reference to type object.
  :purpose :Pumping ;
  :fluid :Water ;
  :pressure [ :datumValue 99; :datumUoM :Uom1 ]. # give a concrete value

# Instance, approach 2: reference to type:
:MyPumping a :AspectElement ;
  :instanceOf :PumpingType ;
  :pressure [ :datumValue 99; :datumUoM :Uom1 ] . # give a concrete value only unspecified type attributes.
#+END_SRC

*** SHACL

Attributes can be implemented using SHACL Shape expressions that
specify that the instances must contain the attributes and values,
including ranges of allowable values.


Pros: 
 - Standard approach. Validation is available by existing SHACL
   validators.
 - Supports both 2) and 3) expressions.

Cons: 
 - SHACL shape expressions are more difficult to read than the RDF
   blueprint approach. This can be remedied using OTTR templates to
   create the SHACL shapes.

Notes: 
 - The SHACL shape can be "triggered" for instances of the type by
   adding a reference to the type (as a SHACL shape) from each
   instance using ~rdf:type~ and ~sh:targetClass~. If one uses a
   different property than ~rdf:type~ then it seems the target must be
   expressed using SPARQL targets which is outside the core SHACL
   standards. Not all tools, e.g,. Jena, implement this extension.

Example:
#+BEGIN_SRC ttl
# Type
:PumpingType
    a :Type, sh:NodeShape ;
    sh:targetClass ex:PumpingType ;

    sh:property       
      [
        # purpose must have the value Pumping
        sh:path :purpose ;
        sh:hasValue :Pumping
      ] ,
      [
        # fluid must have the value Water
        sh:path :fluid ;
        sh:hasValue :Water
      ] ,
      [
        # pressure -> datumValue must between 0--120
        sh:path ( :pressure :datumValue ) ;
        sh:minInclusive 0 ;
	sh:maxInclusive 120 
      ] ,
      [
        # pressure -> datumUoM must be one of the given values (this
        # is not part of the original example)
        sh:path ( :pressure :datumUoM ) ;
        sh:in ( :Uom1 :UoM2 ) ;
      ] .

# Instance
:MyPumping a :AspectElement ;
  rdf:type :PumpingType ;
  :pressure [ :datumValue 99; :datumUoM :Uom1 ] .
#+END_SRC


*** OWL

Attributes can be implemented in OWL by representing the type as an
OWL class and using constructions like functional properies to closed
classes, and referring to the OWL class from the instance using
~rdf:type~.

Pros: 
 - Standard approach.
 - OWL can be used for both 2) and 3)

Cons:
 - The open world semantics of OWL require that tools need to
   understand the OWL semantics. (This case is similar to the RDF
   blueprint approach with a reference to the type).

Example:



*** OTTR

Attributes can be implemented by OTTR so that it creates a copy of the
fixed attribute values and the unspecified values become input
parameters to the OTTR template.

Pros: 
 - OTTR closely represents the intended semantics of a type.
 - Can be used for both 2) and 3).

Cons:
 - OTTR is not a standard yet, and has limited tool support.
 - OTTR cannot express the constraints, like pressure value in the
   range [0, 120]

Example: 

#+BEGIN_SRC ttl
# Type
:PumpingTypeInstance[ ottr:IRI ?id, xsd:integer ?pressureValue, ottr:IRI ?pressureUom ] :: {
  o-rdf:Type(?id, AspectElement),
  o-rdf:Type(?id, :PumpingType),
  ottr:Triple(?id, ?pressure, _:datum),
  ottr:Triple(_:datum, :datumValue, ?pressureValue),
  ottr:Triple(_:datum, :datumUoM, ?pressureUom)
} .

# Instance
:PumpingTypeInstance(:MyPumping, 99, :Uom1) .
#+END_SRC
* Software                                                         :noexport:
** Apache Jena

https://jena.apache.org/:

"A free and open source Java framework for building Semantic Web and
Linked Data applications", including reading and writing RDF, SHACL
validation and SPARQL query processing.

This section contains the script calls used for processing the RDF
code snippets in this document.

*** Download

#+BEGIN_SRC sh :results raw
cd bin
wget -O apache-jena.zip -nc -x https://dlcdn.apache.org/jena/binaries/apache-jena-4.4.0.zip
unzip apache-jena.zip
mv apache-jena-4.4.0 apache-jena
#+END_SRC

#+RESULTS:
File ‘apache-jena.zip’ already there; not retrieving.
Archive:  apache-jena.zip
   creating: apache-jena-4.4.0/
   creating: apache-jena-4.4.0/bin/
   creating: apache-jena-4.4.0/bat/
   creating: apache-jena-4.4.0/src-examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/bin/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/aggregates/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/constructquads/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/engine/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/filter/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/helloworld/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/pizza/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/streaming/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/ontologies/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/
   creating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/jena_examples/
   creating: apache-jena-4.4.0/src-examples/data/
   creating: apache-jena-4.4.0/src-examples/jena/
   creating: apache-jena-4.4.0/src-examples/jena/examples/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/
   creating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/
   creating: apache-jena-4.4.0/src-examples/jena/examples/rdf/
   creating: apache-jena-4.4.0/lib/
   creating: apache-jena-4.4.0/lib-src/
  inflating: apache-jena-4.4.0/README  
  inflating: apache-jena-4.4.0/LICENSE  
  inflating: apache-jena-4.4.0/NOTICE  
  inflating: apache-jena-4.4.0/bin/arq  
  inflating: apache-jena-4.4.0/bin/infer  
  inflating: apache-jena-4.4.0/bin/iri  
  inflating: apache-jena-4.4.0/bin/jena  
  inflating: apache-jena-4.4.0/bin/jena.version  
  inflating: apache-jena-4.4.0/bin/juuid  
  inflating: apache-jena-4.4.0/bin/nquads  
  inflating: apache-jena-4.4.0/bin/ntriples  
  inflating: apache-jena-4.4.0/bin/qparse  
  inflating: apache-jena-4.4.0/bin/rdfcat  
  inflating: apache-jena-4.4.0/bin/rdfcompare  
  inflating: apache-jena-4.4.0/bin/rdfcopy  
  inflating: apache-jena-4.4.0/bin/rdfdiff  
  inflating: apache-jena-4.4.0/bin/rdfparse  
  inflating: apache-jena-4.4.0/bin/rdfxml  
  inflating: apache-jena-4.4.0/bin/riot  
  inflating: apache-jena-4.4.0/bin/rset  
  inflating: apache-jena-4.4.0/bin/rsparql  
  inflating: apache-jena-4.4.0/bin/rupdate  
  inflating: apache-jena-4.4.0/bin/schemagen  
  inflating: apache-jena-4.4.0/bin/shacl  
  inflating: apache-jena-4.4.0/bin/shex  
  inflating: apache-jena-4.4.0/bin/sparql  
  inflating: apache-jena-4.4.0/bin/tdb1.xloader  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbbackup  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbcompact  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbdump  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbloader  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbquery  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbstats  
  inflating: apache-jena-4.4.0/bin/tdb2.tdbupdate  
  inflating: apache-jena-4.4.0/bin/tdb2.xloader  
  inflating: apache-jena-4.4.0/bin/tdbbackup  
  inflating: apache-jena-4.4.0/bin/tdbdump  
  inflating: apache-jena-4.4.0/bin/tdbloader  
  inflating: apache-jena-4.4.0/bin/tdbloader2  
  inflating: apache-jena-4.4.0/bin/tdbquery  
  inflating: apache-jena-4.4.0/bin/tdbstats  
  inflating: apache-jena-4.4.0/bin/tdbupdate  
  inflating: apache-jena-4.4.0/bin/trig  
  inflating: apache-jena-4.4.0/bin/turtle  
  inflating: apache-jena-4.4.0/bin/uparse  
  inflating: apache-jena-4.4.0/bin/update  
  inflating: apache-jena-4.4.0/bin/utf8  
  inflating: apache-jena-4.4.0/bin/wwwdec  
  inflating: apache-jena-4.4.0/bin/wwwenc  
  inflating: apache-jena-4.4.0/bin/xload-common  
  inflating: apache-jena-4.4.0/bin/xload-data  
  inflating: apache-jena-4.4.0/bin/xload-index  
  inflating: apache-jena-4.4.0/bin/xload-main  
  inflating: apache-jena-4.4.0/log4j2.properties  
  inflating: apache-jena-4.4.0/bat/arq.bat  
  inflating: apache-jena-4.4.0/bat/infer.bat  
  inflating: apache-jena-4.4.0/bat/iri.bat  
  inflating: apache-jena-4.4.0/bat/jena_version.bat  
  inflating: apache-jena-4.4.0/bat/juuid.bat  
  inflating: apache-jena-4.4.0/bat/nquads.bat  
  inflating: apache-jena-4.4.0/bat/ntriples.bat  
  inflating: apache-jena-4.4.0/bat/qparse.bat  
  inflating: apache-jena-4.4.0/bat/rdfcat.bat  
  inflating: apache-jena-4.4.0/bat/rdfcompare.bat  
  inflating: apache-jena-4.4.0/bat/rdfcopy.bat  
  inflating: apache-jena-4.4.0/bat/rdfdiff.bat  
  inflating: apache-jena-4.4.0/bat/rdfparse.bat  
  inflating: apache-jena-4.4.0/bat/rdfxml.bat  
  inflating: apache-jena-4.4.0/bat/riot.bat  
  inflating: apache-jena-4.4.0/bat/rset.bat  
  inflating: apache-jena-4.4.0/bat/rsparql.bat  
  inflating: apache-jena-4.4.0/bat/rupdate.bat  
  inflating: apache-jena-4.4.0/bat/schemagen.bat  
  inflating: apache-jena-4.4.0/bat/shacl.bat  
  inflating: apache-jena-4.4.0/bat/shex.bat  
  inflating: apache-jena-4.4.0/bat/sparql.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbbackup.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbcompact.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbdump.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbloader.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbquery.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbstats.bat  
  inflating: apache-jena-4.4.0/bat/tdb2_tdbupdate.bat  
  inflating: apache-jena-4.4.0/bat/tdbbackup.bat  
  inflating: apache-jena-4.4.0/bat/tdbdump.bat  
  inflating: apache-jena-4.4.0/bat/tdbloader.bat  
  inflating: apache-jena-4.4.0/bat/tdbquery.bat  
  inflating: apache-jena-4.4.0/bat/tdbstats.bat  
  inflating: apache-jena-4.4.0/bat/tdbupdate.bat  
  inflating: apache-jena-4.4.0/bat/trig.bat  
  inflating: apache-jena-4.4.0/bat/turtle.bat  
  inflating: apache-jena-4.4.0/bat/uparse.bat  
  inflating: apache-jena-4.4.0/bat/update.bat  
  inflating: apache-jena-4.4.0/bat/utf8.bat  
  inflating: apache-jena-4.4.0/bat/wwwdec.bat  
  inflating: apache-jena-4.4.0/bat/wwwenc.bat  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/README.md  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/bin/get-data  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/pom.xml  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExModelStore01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExModification01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExProg1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExProg2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySelect1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySelect2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExQuerySubstitute_01.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExampleDBpedia3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/ExamplesServer.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/aggregates/CustomAggregate.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/AlgebraEx.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/algebra/AlgebraExec.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth00_Setup.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth01_RDFConnectionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth02_QueryExecutionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth03_UpdateExecutionPW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/auth/ExAuth04_ServicePW.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/OpExecutorAlt.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/StageAltMain.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/bgpmatching/StageGeneratorAlt.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/constructquads/ExampleConstructQuads.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/filter/classify.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/labelSearch.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/localname.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/propertyfunction/uppercase.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT1_ReadModel.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT2_ReadDataset.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT3_RDFParser.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT4_StreamRDF_Filter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT5_StreamRDFCollect.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT6_AddNewReader.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT7_AddNewWriter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT8_RelativeURIs.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT9_AsyncParser.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_RDFXML_ReaderProperties.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_RDFXML_WriteProperties.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_writeModel.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/ExRIOT_writeRDF.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/riot/Ex_WriteJsonLD.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateExecuteOperations.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateProgrammatic.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/arq/examples/update/UpdateReadFromFile.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/Base.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/CheeseBase.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/helloworld/HelloWorld.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/pizza/PizzaSparqlNoInf.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/org/apache/jena/example/streaming/StreamRDFToConnection.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample4.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample5.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/rdfconnection/examples/RDFConnectionExample6.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/Shacl01_validateGraph.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shacl/examples/Shacl02_validateTransaction.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex01_validateGraph.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex02_validateNode.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/shex/examples/Shex03_validate.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExQuadFilter.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB4.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB5.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB6.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn1.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn2.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/java/tdb1/examples/ExTDB_Txn3.java  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/cheeses-0.1.ttl  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/data/pizza.owl.rdf  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/main/resources/ontologies/cheese.ttl  
  inflating: apache-jena-4.4.0/src-examples/jena-examples/src/test/java/org/apache/jena_examples/AppTest.java  
  inflating: apache-jena-4.4.0/src-examples/data/camera.owl  
  inflating: apache-jena-4.4.0/src-examples/data/eswc-2006-09-21.rdf  
  inflating: apache-jena-4.4.0/src-examples/data/test1.owl  
  inflating: apache-jena-4.4.0/src-examples/data/test2.owl  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/ClassHierarchy.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/classHierarchy/Main.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/DescribeClass.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/ontology/describeClass/Main.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial01.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial02.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial03.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial04.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial05.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial06.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial07.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial08.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial09.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial10.java  
  inflating: apache-jena-4.4.0/src-examples/jena/examples/rdf/Tutorial11.java  
  inflating: apache-jena-4.4.0/lib/jena-arq-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jsonld-java-0.13.4.jar  
  inflating: apache-jena-4.4.0/lib/commons-io-2.11.0.jar  
  inflating: apache-jena-4.4.0/lib/httpclient-cache-4.5.13.jar  
  inflating: apache-jena-4.4.0/lib/httpclient-4.5.13.jar  
  inflating: apache-jena-4.4.0/lib/httpcore-4.4.15.jar  
  inflating: apache-jena-4.4.0/lib/jcl-over-slf4j-1.7.35.jar  
  inflating: apache-jena-4.4.0/lib/jackson-core-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/jackson-databind-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/jackson-annotations-2.13.1.jar  
  inflating: apache-jena-4.4.0/lib/titanium-json-ld-1.2.0.jar  
  inflating: apache-jena-4.4.0/lib/jakarta.json-2.0.1.jar  
  inflating: apache-jena-4.4.0/lib/protobuf-java-3.19.3.jar  
  inflating: apache-jena-4.4.0/lib/libthrift-0.15.0.jar  
  inflating: apache-jena-4.4.0/lib/javax.annotation-api-1.3.2.jar  
  inflating: apache-jena-4.4.0/lib/commons-lang3-3.12.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-core-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-base-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shaded-guava-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-csv-1.9.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-codec-1.15.jar  
  inflating: apache-jena-4.4.0/lib/commons-compress-1.21.jar  
  inflating: apache-jena-4.4.0/lib/collection-0.7.jar  
  inflating: apache-jena-4.4.0/lib/jena-iri-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/commons-cli-1.5.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-tdb-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-rdfconnection-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shacl-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-shex-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-cmds-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-tdb2-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-storage-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-trans-data-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-transaction-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-base-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/jena-dboe-index-4.4.0.jar  
  inflating: apache-jena-4.4.0/lib/slf4j-api-1.7.35.jar  
  inflating: apache-jena-4.4.0/lib/log4j-slf4j-impl-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib/log4j-api-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib/log4j-core-2.17.1.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-arq-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-core-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-tdb-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-rdfconnection-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-shacl-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-shex-4.4.0-sources.jar  
  inflating: apache-jena-4.4.0/lib-src/jena-cmds-4.4.0-sources.jar  

*** RIOT

Reading, writing and validating RDF.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/riot --help
#+END_SRC

#+RESULTS:
#+begin_example
riot [--help] [--time] [--base=IRI] [-syntax=FORMAT] [--out=FORMAT] [--count] file ...
  Parser control
      --sink                 Parse but throw away output
      --syntax=NAME          Set syntax (otherwise syntax guessed from file extension)
      --base=URI             Set the base URI (does not apply to N-triples and N-Quads)
      --check                Additional checking of RDF terms
      --strict               Run with in strict mode
      --validate             Same as --sink --check --strict
      --count                Count triples/quads parsed, not output them
      --rdfs=file            Apply some RDFS inference using the vocabulary in the file
      --nocheck              Turn off checking of RDF terms
  Output control
      --output=FMT           Output in the given format, streaming if possible.
      --formatted=FMT        Output, using pretty printing (consumes memory)
      --stream=FMT           Output, using a streaming format
      --compress             Compress the output with gzip
  Time
      --time                 Time the operation
  Symbol definition
      --set                  Set a configuration symbol to a value
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
#+end_example

#+NAME: sh_jena_validate_rdf
#+BEGIN_SRC sh :results output verbatim :var syntax="TTL" :var files="out/owl/imf-top.owl.ttl"
bin/apache-jena/bin/riot --verbose --syntax=$syntax --validate --time $files 
#+END_SRC

#+RESULTS: sh_jena_validate_rdf
: imf-top.owl     : 0.21 sec : 78 Triples : 373.21 per second

#+NAME: sh_jena_merge
#+BEGIN_SRC sh :results output verbatim :var syntax="TTL" :var files="out/owl/imf-top.owl.ttl owl/imf-aspects.owl.ttl" :var out="out/owl/imf-all.owl.ttl"
bin/apache-jena/bin/riot --verbose --syntax=$syntax --check --time $files > $out
#+END_SRC

#+RESULTS: sh_jena_merge
: java.lang.RuntimeException: Can't split 'asdf' -- looking for '=' to separate name and value
: 	at arq.cmdline.ModContext.processArgs(ModContext.java:61)
: 	at org.apache.jena.cmd.CmdArgModule.lambda$process$0(CmdArgModule.java:39)
: 	at org.apache.jena.cmd.CmdArgModule.forEach(CmdArgModule.java:48)
: 	at org.apache.jena.cmd.CmdArgModule.process(CmdArgModule.java:39)
: 	at org.apache.jena.cmd.CmdMain.mainMethod(CmdMain.java:91)
: 	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:58)
: 	at org.apache.jena.cmd.CmdMain.mainRun(CmdMain.java:45)
: 	at riotcmd.riot.main(riot.java:29)

*** SHACL

Validate RDF wrt. SHACL shapes.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/shacl v --help
#+END_SRC

#+RESULTS:
#+begin_example
shacl_validate [--target URI] --shapes shapesFile --data dataFile
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
      --shapes               Shapes file
      --data                 Data file
      --target               Validate specific node [may use prefixes from the data]
      --text                 Output in concise text format
#+end_example

#+NAME: sh_jena_shacl_validate
#+BEGIN_SRC sh :results output raw :var shapes="shapefile" :var data="rdf-examples/coffee-machine.ttl" :wrap src ttl
bin/apache-jena/bin/shacl v --shapes $shapes --data $data
#+END_SRC


#+NAME: sh_jena_shacl_imf_validate
#+BEGIN_SRC sh :results output raw :var data="rdf-examples/coffee-machine.ttl" :wrap src ttl
bin/apache-jena/bin/shacl v --shapes shacl/imf-all.shacl.ttl --data $data
#+END_SRC

#+RESULTS: sh_jena_shacl_imf_validate
#+BEGIN_src ttl
@prefix ex:         <http://example.com#> .
@prefix imf:        <http://ns.imfid.org/imf#> .
@prefix o-imf:      <http://ns.imfid.org/templates/> .
@prefix o-owl-ax:   <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:   <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr: <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-rdf:      <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix ottr:       <http://ns.ottr.xyz/0.4/> .
@prefix owl:        <http://www.w3.org/2002/07/owl#> .
@prefix pav:        <http://purl.org/pav/> .
@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:         <http://www.w3.org/ns/shacl#> .
@prefix shsh:       <http://www.w3.org/ns/shacl-shacl#> .
@prefix skos:       <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd:        <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  false ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  ex:MilkInput ;
                 sh:resultMessage              "ClassConstraint[<http://ns.imfid.org/imf#OutputTerminal>]: Expected class :<http://ns.imfid.org/imf#OutputTerminal> for <http://example.com#CupTray>" ;
                 sh:resultPath                 imf:directlyPrecedes ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:ClassConstraintComponent ;
                 sh:sourceShape                _:b0 ;
                 sh:value                      ex:CupTray
               ] ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  ex:WaterInput ;
                 sh:resultMessage              "ClassConstraint[<http://ns.imfid.org/imf#OutputTerminal>]: Expected class :<http://ns.imfid.org/imf#OutputTerminal> for <http://example.com#CupTray>" ;
                 sh:resultPath                 imf:directlyPrecedes ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:ClassConstraintComponent ;
                 sh:sourceShape                _:b0 ;
                 sh:value                      ex:CupTray
               ] ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  ex:CoffeeInput ;
                 sh:resultMessage              "ClassConstraint[<http://ns.imfid.org/imf#OutputTerminal>]: Expected class :<http://ns.imfid.org/imf#OutputTerminal> for <http://example.com#CupTray>" ;
                 sh:resultPath                 imf:directlyPrecedes ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:ClassConstraintComponent ;
                 sh:sourceShape                _:b0 ;
                 sh:value                      ex:CupTray
               ]
] .
#+END_src


#+NAME: sh_jena_shacl_std_validate
#+BEGIN_SRC sh :results output raw :var data="out/owl/imf-top.owl.ttl" :wrap src ttl
bin/apache-jena/bin/shacl v --shapes http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl --shapes https://spec.ottr.xyz/wOTTR/0.4.3/core-grammar.shacl.ttl --data $data
#+END_SRC

#+RESULTS: sh_jena_shacl_std_validate
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src


*** SPARQL

Query RDF.

#+BEGIN_SRC sh :results output verbatim
bin/apache-jena/bin/sparql --help
#+END_SRC

#+RESULTS:
#+begin_example
sparql --data=<file> --query=<query>
  Control
      --explain              Explain and log query execution
      --repeat=N or N,M      Do N times or N warmup and then M times (use for timing to overcome start up costs of Java)
      --optimize=            Turn the query optimizer on or off (default: on)
  Time
      --time                 Time the operation
  Query Engine
      --engine=EngineName    Register another engine factory[ref]
      --unengine=EngineName   Unregister an engine factory
  Dataset
      --data=FILE            Data for the dataset - triple or quad formats
      --graph=FILE           Graph for default graph of the datset
      --namedGraph=FILE      Add a graph into the dataset as a named graph
  Results
      --results=             Results format (Result set: text, XML, JSON, CSV, TSV; Graph: RDF serialization)
      --desc=                Assembler description file
  Query
      --query, --file        File containing a query
      --syntax, --in         Syntax of the query
      --base                 Base URI for the query
  Symbol definition
      --set                  Set a configuration symbol to a value
  General
      -v   --verbose         Verbose
      -q   --quiet           Run with minimal output
      --debug                Output information for debugging
      --help
      --version              Version information
      --strict               Operate in strict SPARQL mode (no extensions of any kind)
#+end_example


#+NAME: sh_jena_sparql
#+BEGIN_SRC sh :results output :var query="PREFIX imf: <http://ns.imfid.org/imf#> SELECT * {?s ?p ?o} LIMIT 1" :var files="out/owl/imf-top.owl.ttl" :hlines yes :exports both
echo "$query" > out/temp/.temp-sh_jena_sparql
bin/apache-jena/bin/sparql --results=text --data=$files --query out/temp/.temp-sh_jena_sparql
#+END_SRC

#+RESULTS: sh_jena_sparql
: -----------------------------------------------------------------------------------------------
: | s                        | p                                             | o                |
: ===============================================================================================
: | imf:hierarchicalRelation | <http://www.w3.org/2000/01/rdf-schema#domain> | imf:AspectElement |
: -----------------------------------------------------------------------------------------------



** Lutra

Lutra is the reference implementation for working with OTTR templates
and instances.

This section contains the scripts that are used to expand the OTTR
instances found in this document.

#+BEGIN_SRC sh 
cd bin
wget -O lutra.jar -nc -x http://ottr.xyz/downloads/lutra/lutra-master.jar
#+END_SRC

#+RESULTS:

#+NAME: lutra-help
#+BEGIN_SRC sh :results output verbatim
java -jar bin/lutra.jar --help
#+END_SRC

#+RESULTS: lutra-help
#+begin_example
Usage: lutra [-fhV] [--debugFullTrace] [--debugStackTrace] [--quiet] [--stdout]
             [-F=<fetchFormat>] [--haltOn=<haltOn>] [-I=<inputFormat>]
             [-L=<libraryFormat>] [-m=<mode>] [-o=<out>] [-O=<outputFormat>]
             [-p=<prefixes>] [-e=<extensions>[,<extensions>...]]...
             [-E=<ignoreExtensions>[,<ignoreExtensions>...]]...
             [-l=<library>]... [<inputs>...]

DESCRIPTION:
Reference implementation for OTTR Templates. Use for expanding template
instances and template definitions, translating between different formats and
for checking the integrity of template libraries.

PARAMETERS:
      [<inputs>...]         Files of instances to which operations are to be
                              applied.

OPTIONS:
      --debugFullTrace      This enables tracing such that printed messages get
                              a stack trace giving more information on the
                              location of the concerned objects. NB! Enabling
                              this flag will deteriorate performance.
                            default: false)
      --debugStackTrace     This enables printing a regular java stack trace
                              for error messages.Enabling this flag will not
                              deteriorate performance.
                            default: false)
  -e, --extension=<extensions>[,<extensions>...]
                            File extension of files to use as input to template
                              library.
                            (default: [])
  -E, --ignoreExtension=<ignoreExtensions>[,<ignoreExtensions>...]
                            File extensions of files to ignore as input to
                              template library.
                            (default: [])
  -f, --fetchMissing        Fetch missing template dependencies. It is here
                              assumed that templates' definitions are
                              accessible via their IRI, that is, the IRI is
                              either a path to a file, a URL, or similar.
                            (default: false)
  -F, --fetchFormat=<fetchFormat>
                            The input format of the templates fetched via the
                              -f flag.
  -h, --help                Show this help message and exit.
      --haltOn=<haltOn>     Halt execution upon receiving messages with a
                              severity equal to or greater than this value.
                            (legal values: INFO, WARNING, ERROR, FATAL;
                              default: ERROR)
  -I, --inputFormat=<inputFormat>
                            Input format of instances.
                            (legal values: wottr, stottr, tabottr, bottr
                              default: wottr)
  -l, --library=<library>   Folder containing templates to use as library. Can
                              be used multiple times for multiple libraries.
  -L, --libraryFormat=<libraryFormat>
                            The input format of the libraries. If omitted, all
                              available formats are attempted.
                            (legal values: wottr, stottr)
  -m, --mode=<mode>         The mode of operation to be applied to input.
                            (legal values: expand, expandLibrary, format,
                              formatLibrary, lint, checkSyntax, docttrLibrary;
                              default: expand)
  -o, --output=<out>        Path for writing output.
  -O, --outputFormat=<outputFormat>
                            Output format of output of operation defined by the
                              mode.
                            (legal values: wottr, stottr; default: wottr)
  -p, --prefixes=<prefixes> Path to RDF file containing prefix declarations to
                              be used when rendering output.    Any other data
                              in the file is read, but ignored.
      --quiet               Suppress all messages, including errors and
                              warnings.
                            (default: false)
      --stdout              Print system of operations to standard out.
                            (default: false)
  -V, --version             Print version information and exit.

LINKS:
Website:  https://ottr.xyz
Primers:  https://primer.ottr.xyz
Git repo: https://gitlab.com/ottr/lutra/lutra
#+end_example

#+NAME: lutra-expand
#+BEGIN_SRC sh :results output verbatim :var in="out/owl/.imf-aspects.owl.wottr.ttl" :var inFormat="wottr" :var out="out/owl/imf-aspects.owl.ttl"
java -jar bin/lutra.jar -l out/ottr -L stottr -f -p out/.std-prefixes.ttl -I $inFormat -o $in.temp $in 
rapper -i turtle -o turtle $in.temp > $out
cat $out
#+END_SRC

#+RESULTS: lutra-expand
** RDFVizler with rules

https://rdfvizler.dyreriket.xyz/:

#+BEGIN_QUOTE
RDFVizler is a simple RDF visualisation software built with the Apache
Jena Java API and Graphviz visualisation software. It requires Java 8
and Graphviz to be installed on the system.

RDFVizler visualises RDF graphs by parsing a designated RDFVizler OWL
vocabulary into Graphviz's DOT language and then straight-forwardly to
images using the Graphviz software. The RDFVizler vocabulary acts as a
mere "RDF wrapper language" for the DOT language, all graph, edge and
node attributes are taken directly from DOT."
#+END_QUOTE

*** TODO Script calls

TODO: setup download

#+BEGIN_SRC sh :results output verbatim
java -jar bin/rdfvizler.jar --help
#+END_SRC

#+RESULTS:
#+begin_example

RDFVizler: RDF visualisation

Usage:
java -jar rdfvizler-[version].jar [--help] [--mergeInput] [--skipRules]
                                  [--version]
                                  [--inputFormatRDF=<inputFormatRDF>]
                                  [--outputFormatRDF=<outputFormatRDF>]
                                  [-i=<outputFormatImage>] [-r=<rules>]
                                  [-x=<mode>] RDF_FILES...

Description:
RDFVizler visualises RDF by parsing a designated RDF RDFVizler vocabulary into
Graphviz syntax and processing this to a graph using Graphviz' dot software.
For more details, see http://rdfvizler.dyreriket.xyz.

Parameters:
      RDF_FILES...      Input RDF: URIs or file paths

Options:
  -x, --executionMode=<mode>
                        What output to produce. (legal values: rdf, dot, image;
                          default: image)
  -r, --rules=<rules>   Input rules: URI or file path (default: http://rdfvizler.
                          dyreriket.xyz/rules/rdf.jrule)
      --skipRules       Skip rule application to input? (default: false)
      --inputFormatRDF=<inputFormatRDF>
                        Format of RDF input (legal values: rdf, ttl, nt, guess;
                          default: guess -- by file extension as per jena.util.
                          FileUtils, then Turtle)
      --mergeInput      Merge input files to a single model to visualise?
      --outputFormatRDF=<outputFormatRDF>
                        Format of RDF output (legal values: rdf, ttl, nt, guess;
                          default: rdf)
  -i, --outputFormatImage=<outputFormatImage>
                        Format of image output (legal values: PNG, SVG,
                          SVG_STANDALONE, DOT, XDOT, PLAIN, PLAIN_EXT, PS, PS2,
                          JSON, JSON0, IMAP, CMAPX; default: SVG_STANDALONE)
      --version         Display version info
      --help            Display this help message
#+end_example


#+NAME: rdfvizler
#+BEGIN_SRC sh :results output verbatim :var rules="out/rdfvizler/import-hierarchy.rule" :var data="out/owl/imf-all.owl.ttl" :var output="out/.output-rdfvizler.svg"
java -jar bin/rdfvizler.jar --rules=$rules $data > $output
#+END_SRC

#+RESULTS: rdfvizler
#+begin_example
Exception in thread "main" picocli.CommandLine$ExecutionException: Error while running command (xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI@66498326): org.apache.jena.shared.RulesetNotFoundException: out/rdfvizler/import-hierarchy.rule
	at picocli.CommandLine.execute(CommandLine.java:1056)
	at picocli.CommandLine.access$900(CommandLine.java:142)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1255)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1223)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1131)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1414)
	at picocli.CommandLine.run(CommandLine.java:1878)
	at picocli.CommandLine.run(CommandLine.java:1808)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.main(RDFVizlerCLI.java:133)
Caused by: org.apache.jena.shared.RulesetNotFoundException: out/rdfvizler/import-hierarchy.rule
	at org.apache.jena.reasoner.rulesys.Rule.rulesFromURL(Rule.java:511)
	at org.apache.jena.reasoner.rulesys.Rule.rulesFromURL(Rule.java:524)
	at xyz.dyreriket.rdfvizler.RDFVizler.getRules(RDFVizler.java:39)
	at xyz.dyreriket.rdfvizler.RDFVizler.getRDFDotModel(RDFVizler.java:72)
	at xyz.dyreriket.rdfvizler.RDFVizler.writeDotGraph(RDFVizler.java:105)
	at xyz.dyreriket.rdfvizler.RDFVizler.writeDotGraph(RDFVizler.java:111)
	at xyz.dyreriket.rdfvizler.RDFVizler.write(RDFVizler.java:99)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.processFile(RDFVizlerCLI.java:156)
	at xyz.dyreriket.rdfvizler.cli.RDFVizlerCLI.run(RDFVizlerCLI.java:166)
	at picocli.CommandLine.execute(CommandLine.java:1048)
	... 8 more
#+end_example

*** Prefixes                                                       :noexport:

#+NAME: prefixes-rdfvizler
#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/imf-data.rule :mkdirp yes
<<prefixes>>
@prefix rvz:  <http://rdfvizler.dyreriket.xyz/vocabulary/core#> .
@prefix rvz-a: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute#> .
@prefix rvz-n: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute-default-node#> .
@prefix rvz-e: <http://rdfvizler.dyreriket.xyz/vocabulary/attribute-default-edge#> .
@prefix :      <urn:temp#>
#+END_SRC

*** IMF data, old                                                  :noexport:

#+BEGIN_SRC ttl :noweb yes :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:nodesep "1")
        (:graph rvz-a:ranksep "1")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")
        (:graph rvz-a:splines "ortho")
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        (:graph rvz-n:height ".3")
        (:graph rvz-n:width ".3")
        (:graph rvz-n:fixedsize "true")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

### SELECTION: This rule selects the triples to be drawn. Selection is
### done on the basis of predicates. ONLY the nodes and edges selected
### here appear in the diagram.

    [triples:
        (?s ?p ?o)
        equalssome(?p, imf:hasPart, imf:hasTerminal, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs) 
        makeSkolem(?edge, ?s, ?p, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

### EDGE FORMATTING

# constraint=false, see https://graphviz.org/docs/attrs/constraint/
    [imf:no-constraint:
        (?edge :predicate ?p)
        equalssome(?p, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs)
        ->
        (?edge rvz-a:constraint "false")
        ]

    [imf:hasPart:
        (?edge :predicate imf:hasPart)
        ->
        (?edge rvz-a:arrowtail "empty")
        (?edge rvz-a:dir "back")
        ]
        
    [imf:connectedTo:
        (?edge :predicate imf:connectedTo)
        ->
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:color "gray50")
        (?edge rvz-a:style "dashed")
        ]
    [imf:hasTerminal:
        (?edge :predicate imf:hasTerminal)
        ->
        (?edge rvz-a:arrowhead "none")
        ]


    [imf:hasLocation:
        (?edge :predicate imf:hasLocation)
        ->
        (?edge rvz-a:color "magenta")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

    [imf:fullfilledBy:
        (?edge :predicate imf:fulfilledBy)
        ->
        (?edge rvz-a:color "cyan")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

    [imf:installedAs:
        (?edge :predicate imf:installedAs)
        ->
        (?edge rvz-a:color "skyblue2")
        (?edge rvz-a:arrowhead "none")
        (?edge rvz-a:style "dashed")
        ]

### NODE FORMATTING
### labels and URIs

    [Nodes:
        (:graph rvz:hasNode ?node)
        shortvalue(?node, ?name)
        ->
        //(?node rvz-a:label "")
        (?node rvz-a:label ?name)
        (?node rvz-a:style "filled")
        (?node rvz-a:URL ?node)
        ]

### Shapes: move these to ontology

    [Transport-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Transport)
        ->
        (?node rvz-a:shape "hexagon")
        ]

    [Interface-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Interface)
        ->
        (?node rvz-a:shape "triangle")
        (?node rvz-a:orientation "90")
        ]

    [Terminal-block-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:Terminal)
        -> (?node rvz-a:shape "doublecircle")
        ]

    [System-block-shape:
        (:graph rvz:hasNode ?node)(?node rdf:type imf:FunctionalBlock)
        -> (?node rvz-a:shape "square")
        ]


### Colours

    [Aspect-colour:
        (:graph rvz:hasNode ?node)
        (?node imf:hasAspect ?aspect)(?aspect imf:color ?color)
        ->
        (?node rvz-a:fillcolor ?color)
        ]

#+END_SRC

*** Ontology import hierarchy

This rule set visualises the owl:imports hierarchy.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/ontology-import-hierarchy.rule :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")       
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

    [imports:
        (?ont owl:versionIRI ?iri)
        (?ont owl:imports ?import)
        makeSkolem(?_edge, ?iri, ?import)
        ->
        (:graph rvz:hasEdge ?_edge)
        (:graph rvz:hasNode ?iri)
        (:graph rvz:hasNode ?import)
        (?_edge rvz:hasSource ?iri)
        (?_edge rvz:hasTarget ?import)
        ]
#+END_SRC

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-import-hierarchy.rule", output="out/temp/.ontology-import-hierarchy.svg")

#+RESULTS:

*** Ontology overview

This rule set creates a overview visualisation of an ontology taking
only the "easy to visualise" structures like classes, subclass
relations, properties with their domain and range, and instances.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/ontology-overview.rule :mkdirp yes
<<prefixes-rdfvizler>>

    [init-graph:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "BT")
        (:graph rvz-a:center "true")
        // node defaults
	(:graph rvz-n:shape "box")
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

    [class:
        (?s rdf:type owl:Class)
	notBNode(?s)
        ->
        (:graph rvz:hasNode ?s)
        ]

    [individual:
        (:graph rvz:hasNode ?s)
        (?i rdf:type ?s)
        makeSkolem(?edge, ?i, rdf:type, ?s)
        ->
        (:graph rvz:hasNode ?i)
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate rdf:type)
        (?edge rvz-a:style "dotted")
        (?edge rvz:hasSource ?i)
        (?edge rvz:hasTarget ?s)
        ]

    [label-node:
        (:graph rvz:hasNode ?node)
        shortvalue(?node ?label)
        ->
	(?node rvz-a:label ?label)
        ]

    [subclass:
        (?s rdfs:subClassOf ?o)
        makeSkolem(?edge, ?s, rdfs:subClassOf, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (?edge rvz-a:arrowhead "empty")
        (?edge rvz-a:dir "forward")
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

    [property:
        (?p rdfs:domain ?domain)
        (?p rdfs:range ?range)
        shortvalue(?p ?label)
        makeSkolem(?edge, ?domain, ?p, ?range)
        ->
        (:graph rvz:hasEdge ?edge)
        (:graph rvz:hasNode ?domain)
        (:graph rvz:hasNode ?range)
        (?edge :predicate ?p)
	(?edge rvz-a:label ?label)
        (?edge rvz:hasSource ?domain)
        (?edge rvz:hasTarget ?range)
        ]

    [SubObjectExactCardinality:
        (?i ottr:of o-owl-ax:SubObjectExactCardinality)
        (?i ottr:values ?arg1)
	(?arg1 rdf:first ?domain)
	(?arg1 rdf:rest ?arg2)
	(?arg2 rdf:first ?card)
	(?arg2 rdf:rest ?arg3)
	(?arg3 rdf:first ?property)
	(?arg3 rdf:rest ?arg4)
	(?arg4 rdf:first ?range)
	shortvalue(?property ?plabel)
	strConcat(?plabel, " ", ?card, ?label)
        makeSkolem(?edge, ?domain, ?card, ?property, ?range)
	->
        (:graph rvz:hasEdge ?edge)
        (:graph rvz:hasNode ?domain)
        (:graph rvz:hasNode ?range)
        (?edge :predicate ?property)
	(?edge rvz-a:label ?label)
        (?edge rvz-a:constraint "false")
        (?edge rvz-a:dir "forward")
        (?edge rvz-a:arrowhead "teetee")
        (?edge rvz:hasSource ?domain)
        (?edge rvz:hasTarget ?range)
        ]

    [Blanks:
	(:graph rvz:hasNode ?node)
	isBNode(?node)
	typedvalue(?node, ?label)
	->
	(?node rvz-a:label ?label)
	(?node rvz-a:shape "box")
	(?node rvz-a:style "filled,dashed")
	(?node rvz-a:fillcolor "gray90")
	(?node rvz-a:height ".3")
	(?node rvz-a:width ".3")
	]
#+END_SRC

#+CALL: rdfvizler(rules="out/rdfvizler/ontology-overview.rule", output="out/temp/.ontology-overview.svg")

#+RESULTS:

*** TODO IMF data

Work in process. Rule set for visualising IMF data.

#+BEGIN_SRC ttl :noweb yes :tangle out/rdfvizler/imf-data.rule :mkdirp yes
<<prefixes-rdfvizler>>

### GRAPH default settings
    [init:
        ->
        (:graph rdf:type rvz:RootGraph)
        (:graph rdf:type rvz:DiGraph)
        (:graph rvz-a:rankdir "LR")
        (:graph rvz-a:nodesep "1")
        (:graph rvz-a:ranksep "1")
        (:graph rvz-a:center "true")
        (:graph rvz-a:overlap "true")
        (:graph rvz-a:splines "ortho")
        // node defaults
        (:graph rvz-n:fontname "Arial")
        (:graph rvz-n:fontsize "8px")
        (:graph rvz-n:height ".3")
        (:graph rvz-n:width ".3")
        (:graph rvz-n:fixedsize "true")
        // edge defaults
        (:graph rvz-e:fontname "Arial")
        (:graph rvz-e:fontsize "8px")
        ]

### SELECTION: This rule selects the triples to be drawn. Selection is
### done on the basis of predicates. ONLY the nodes and edges selected
### here appear in the diagram.

    [triples:
        (?s ?p ?o)
        equalssome(?p, imf:hasPart, imf:hasTerminal, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs) 
        makeSkolem(?edge, ?s, ?p, ?o)
        ->
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (:graph rvz:hasNode ?s)
        (:graph rvz:hasNode ?o)
        (?edge rvz:hasSource ?s)
        (?edge rvz:hasTarget ?o)
        ]

### EDGE FORMATTING

# constraint=false, see https://graphviz.org/docs/attrs/constraint/
    [imf:no-constraint:
        (?edge :predicate ?p)
        equalssome(?p, imf:connectedTo, imf:hasLocation, imf:fulfilledBy, imf:installedAs)
        ->
        (?edge rvz-a:constraint "false")
        ]

    [edge-attribute
        (:graph rvz:hasEdge ?edge)
        (?edge :predicate ?p)
        (?p ?rvza ?value)
        namespace(?rvza, "http://rdfvizler.dyreriket.xyz/vocabulary/attribute#")
        ->
        (?edge ?rvza ?value)
        ]

    [node-attribute
        (:graph rvz:hasNode ?node)
        (?node rdf:type ?class)
        (?class ?rvza ?value)
        namespace(?rvza, "http://rdfvizler.dyreriket.xyz/vocabulary/attribute#")
        ->
        (?node ?rvza ?value)
        ]
#+END_SRC

** Python code snippets                                            :noexport:
*** py_ottr_instances

Convert tables to OTTR instances.

#+NAME: py_ottr_instances
#+BEGIN_SRC python :results raw :wrap src ttl :var template="ex:template" :var table=tbl-aspects :exports none
output = ""

instance = "[] ottr:of {} ;\n   ottr:values ( {} ) . \n"

## aspects
for row in table[0:]:
  args = map(lambda x: 'ottr:none' if not str(x).strip() else x, row)
  output += instance.format(template, " ".join(f'{w}' for w in args))

return output
#+END_SRC

#+RESULTS: py_ottr_instances
#+BEGIN_src ttl
[] ottr:of ex:template ;
   ottr:values( imf:FunctionAspect '=' '#FFFF00' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:LocationAspect '+' '#FF00FF' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:ProductAspect '-' '#00FFFF' ) . 
[] ottr:of ex:template ;
   ottr:values( imf:ActivityAspect '>' '#000000' ) . 
#+END_src

*** py_run_sparql

Run SPARQL queries on RDF data files.

#+NAME: py_run_sparql
#+BEGIN_SRC python :var query="SELECT ?s ?p ?o {?s ?p ?o} LIMIT 10" :var prefixes="" :var data="out/owl/imf-all.owl.ttl" :results raw

# input: 'query': SPARQL query string
# input: 'prefixes': a string of prefixes for conveniently appending to the query
# input: 'data': the RDF dataset to query

import rdflib
import csv

graph = rdflib.Graph()

# read RDF turtle file:
graph.parse(data, format="ttl")

# query graph:
qResult = graph.query(prefixes + query)

output = ""

# handle the results according to the query type

if qResult.type == "SELECT":

  # serialise results to string
  sResult = qResult.serialize(format="csv").decode('utf-8')

  lines = sResult.splitlines() # split on each new line
  reader = csv.reader(lines, delimiter=',')

  ## here I format the results into a table in format I use for my
  ## slides.  Format according to your own needs.
  line = 1;
  for row in reader: # split on each new line
    output += "|"
    for value in row:
      if value.startswith("http://"):
        value = ", ".join(map(graph.namespace_manager.qname, value.split(", ")))
        #value = graph.namespace_manager.qname(value) # convert urls to qnames
      if len(value) > 0:
        output += "~" + ' '.join(value.split()) + "~" # monospace formatting
      output += "|"
    output += "\n"
    if line == 1:
      output += "|-\n" # hline
    line += 1

elif qResult.type == "ASK":
  output = str(bool(qResult))

elif qResult.type == "CONSTRUCT":
  gResult = rdflib.Graph()
  gResult.namespace_manager = graph.namespace_manager # copy prefixes from data source
  for row in qResult:
    gResult.add(row);
  output = gResult.serialize(format='turtle').decode('utf-8')

return output
#+END_SRC

#+RESULTS: py_run_sparql
| ~s~                                    | ~p~                  | ~o~                                         |
|----------------------------------------+----------------------+---------------------------------------------|
| ~ub1bL280C25~                          | ~rdf:type~           | ~owl:Class~                                 |
| ~imf:hasAspect~                        | ~skos:definition~    | ~Relates an aspect object with its aspect.~ |
| ~ns1:imf-top~                          | ~skos:altLabel~      | ~IMF top ontology~                          |
| ~ub1bL305C9~                           | ~owl:onProperty~     | ~imf:hasAspect~                             |
| ~ns1:imf~                              | ~owl:imports~        | ~ns2:imf-top~                               |
| ~f72435ec3bb9048bdbed94ab20fc43eb2b19~ | ~rdf:rest~           | ~f72435ec3bb9048bdbed94ab20fc43eb2b20~      |
| ~imf:isPartOf~                        | ~rdfs:subPropertyOf~ | ~imf:hierarchicalRelation~                  |
| ~imf:associativeRelation~              | ~rdf:type~           | ~owl:ObjectProperty~                        |
| ~ns1:imf~                              | ~owl:imports~        | ~ns2:imf-aspects~                           |
| ~imf:isPartOf~                        | ~rdfs:subPropertyOf~ | ~skos:broader~                              |



*** py_parse-ttl-file: Parse source block

Parses an ttl file and outputs a turtle source block.

#+NAME: py_parse-ttl-file
#+BEGIN_SRC python :var file="out/owl/imf-top.owl.ttl"
from rdflib import Graph

g = Graph()
g.parse(file, format="text/turtle")

return g.serialize(format='turtle').decode('utf-8')
#+END_SRC

#+RESULTS: py_parse-ttl-file

*** py_parse-ttl-block: Parse source block

Parses and outputs a turtle source block. Prefixes are given as input.

#+NAME: py_parse-ttl-block
#+BEGIN_SRC python :var prefixes=prefixes :var block=owl-top-ontology
from rdflib import Graph

g = Graph()
rdf = prefixes + "\n" + block
g.parse(data=rdf, format="text/turtle")

return g.serialize(format='turtle').decode('utf-8')
#+END_SRC

*** Output

#+NAME: py_output
#+BEGIN_SRC python :var file="out/owl/imf-top.owl.ttl" :var s="None" :var p="RDF.type"
from rdflib import Graph, RDF

g = Graph()
g.parse(file, format="text/turtle")

output = ""

for s, p, o in g.triples((s,  p, None)):
    output += f"{o}"

return output
#+END_SRC

#+RESULTS: py_output


*** Lists                                                          :noexport:

#+NAME: prefixlist
 - xsd :: http://www.w3.org/2001/XMLSchema#
 - rdf :: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 - rdfs :: http://www.w3.org/2000/01/rdf-schema#
 - owl :: http://www.w3.org/2002/07/owl#
 - skos :: http://www.w3.org/2004/02/skos/core#
 - imf :: http://ns.imfid.org/imf#

#+NAME: py_functions
#+BEGIN_SRC python

## converts a org-mode definition list into a python dict
def deflist2dict(list):
  newlist={}
  for row in list:
    newrow = row[0].split(' :: ')
    newlist[newrow[0]] = newrow[1]

  return newlist

from rdflib import Graph, Namespace, URIRef

def getURIRef(prefixdict, qname):
  prefix, localname = qname.split(':')
  return URIRef(prefixdict[prefix] + localname)

def getGraph(prefixdict):
  graph = Graph()
  for key, value in prefixdict.items():
    ns = Namespace(value)
    graph.bind(key, ns)
  return graph
#+END_SRC

#+RESULTS: py_functions
: None

#+NAME: py_prefixlist2ttl
#+BEGIN_SRC python :noweb yes :var list=prefixlist 
<<py_functions>>

output = ""
for key, value in deflist2dict(list).items():
  output += '@prefix ' + key + ':\t<' + value + '> .\n'
return output
#+END_SRC

#+RESULTS: py_prefixlist2ttl
: @prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
: @prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
: @prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
: @prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
: @prefix imf:	<http://ns.imfid.org/imf#> .

#+CALL: py_prefixlist2ttl[:wrap src ttl](list=prefixlist)
* Setup                                                            :noexport:


Include stderr:

#+PROPERTY: header-args:sh :prologue "exec 2>&1" :epilogue ":"

** Folders

#+BEGIN_SRC ttl :tangle out/temp/.folder :mkdirp yes
#+END_SRC

#+BEGIN_SRC ttl :tangle bin/.folder :mkdirp yes
#+END_SRC

#+BEGIN_SRC ttl :tangle out/img/.folder :mkdirp yes

#+END_SRC

** Global tangle includes

#+NAME: graphviz-style
#+BEGIN_SRC dot :file out/img/.dummy-graphiz
 node [shape=box, fontname="Arial", style="filled"];
 edge [fontname="Arial"];
#+END_SRC


#+NAME: plantuml-style
#+BEGIN_SRC plantuml :file out/img/.dummy-plantuml
hide empty members

skinparam class {
 BackgroundColor White
}
#+END_SRC
