@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix sh:	<http://www.w3.org/ns/shacl#> .

@prefix dc:	<http://purl.org/dc/elements/1.1/> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .
@prefix pav:	<http://purl.org/pav/> .
@prefix skos:	<http://www.w3.org/2004/02/skos/core#> .
@prefix vann:   <http://purl.org/vocab/vann/> .
@prefix vs:     <http://www.w3.org/2003/06/sw-vocab-status/ns#> .

@prefix ex:	<http://example.com#> .

@prefix imf:	   <http://ns.imfid.org/imf#> .
@prefix pca-plm:   <http://rds.posccaesar.org/ontology/plm/rdl/> .

@prefix ottr:        <http://ns.ottr.xyz/0.4/> .

@prefix o-rdf:       <http://tpl.ottr.xyz/rdf/0.1/> .
@prefix o-rdfs:      <http://tpl.ottr.xyz/rdfs/0.2/> .
@prefix o-owl-ax:    <http://tpl.ottr.xyz/owl/axiom/0.1/> .
@prefix o-owl-ma:    <http://tpl.ottr.xyz/owl/macro/0.1/> .
@prefix o-owl-rstr:  <http://tpl.ottr.xyz/owl/restriction/0.1/> .
@prefix o-owl-dec:   <http://tpl.ottr.xyz/owl/declaration/0.1/> .

@prefix o-imf:	     <http://ns.imfid.org/templates/> .
@prefix o-imf-t-s:   <http://ns.imfid.org/templates/type/shacl/> .
@prefix o-imf-t-o:   <http://ns.imfid.org/templates/type/owl/> .
@prefix o-imf-d:     <http://ns.imfid.org/templates/data/> .

o-imf:ShaclNodeShape[
  ottr:IRI ?id,
  ? owl:Class ?targetClass,
  ? xsd:string ?name,
  ? xsd:string ?description
] :: {
  o-rdf:Type(?id, sh:NodeShape),
  ottr:Triple(?id, sh:targetClass, ?targetClass)
} .

o-imf:ShaclPropertyShape[
    ottr:IRI ?id,
    ottr:IRI ?nodeShape, ## the node shape to which this property belongs.
    ottr:IRI ?path,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? ottr:IRI ?severity,
  ? xsd:string ?message
] :: {
  ottr:Triple(?id, sh:name, ?name),
  ottr:Triple(?id, sh:description, ?description)
  ottr:Triple(?nodeShape, sh:property, ?id),
  ottr:Triple(?id, sh:path, ?path),
  ottr:Triple(?id, sh:severity, ?severity),
  ottr:Triple(?id, sh:message, ?message)
} .

o-imf-t-s:Type[
  owl:Class ?id,        # id of the type
  owl:Class ?IMFClass,  # the IMF superclass of this type, e.g., imf:Block
  owl:Class ?typeClass, # the IMF type class, e.g., imf:BlockType
  ? List<owl:Class> ?superclass,
  ? xsd:string ?name,
  ? xsd:string ?description
] :: {
  o-imf:ShaclNodeShape(?id, ?id, none, none),
  ottr:Triple(?id, skos:prefLabel, ?name),
  ottr:Triple(?id, dc:description, ?description),
  o-rdf:Type(?id, rdfs:Class),
  o-rdfs:SubClassOf(?id, ?IMFClass)
  o-rdf:Type(?id, ?typeClass)
  cross | o-rdfs:SubClassOf(?id, ++?superclass)
} .

o-imf-t-s:TypeReference[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeSource,
    ottr:IRI ?path,
    ottr:IRI ?typeTarget,
    xsd:integer ?minCount = 0,
  ? xsd:integer ?maxCount,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? ottr:IRI ?severity,
  ? xsd:string ?message
] :: {
  o-imf:ShaclPropertyShape(?id, ?typeSource, ?path, ?name, ?description, ?severity, ?message),
  ottr:Triple(?id, sh:node, ?typeTarget),
  ottr:Triple(?id, sh:minCount, ?minCount),
  ottr:Triple(?id, sh:maxCount, ?maxCount)
} .

o-imf-t-s:PropertyConstraint[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeSource,
    ottr:IRI ?path,
  ? rdfs:Resource ?value,
  ? List<rdfs:Resource> ?in,
  ? owl:Class ?class,
  ? ottr:IRI ?datatype,
  ? xsd:integer ?minCount,
  ? xsd:integer ?maxCount,
  ? rdfs:Literal ?minInclusive,
  ? rdfs:Literal ?minExclusive,
  ? rdfs:Literal ?maxInclusive,
  ? rdfs:Literal ?maxExclusive,
  ? xsd:string ?pattern,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? ottr:IRI ?severity,
  ? xsd:string ?message
] :: {
  o-imf:ShaclPropertyShape(?id, ?typeSource, ?path, ?name, ?description, ?severity, ?message),
  ottr:Triple(?id, sh:hasValue, ?value),
  ottr:Triple(?id, sh:in, ?in),
  ottr:Triple(?id, sh:class, ?class),
  ottr:Triple(?id, sh:datatype, ?datatype),
  ottr:Triple(?id, sh:minCount, ?minCount),
  ottr:Triple(?id, sh:maxCount, ?maxCount),
  ottr:Triple(?id, sh:minInclusive, ?minInclusive),
  ottr:Triple(?id, sh:minExclusive, ?minExclusive),
  ottr:Triple(?id, sh:maxInclusive, ?maxInclusive),
  ottr:Triple(?id, sh:maxExclusive, ?maxExclusive),
  #ottr:Triple(?id, sh:minLength, ?minLength),
  #ottr:Triple(?id, sh:maxLength, ?maxLength),
  ottr:Triple(?id, sh:pattern, ?pattern)
  #ottr:Triple(?id, sh:flags, ?flags)
} .

o-imf-t-s:PropertyConstraintSingleValue[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeSource,
    ottr:IRI ?path,
    rdfs:Resource ?value
] :: {
o-imf-t-s:PropertyConstraint(?id, ?typeSource, ?path, ?value,
  none, none, none, none, none, none, none, none, none, none, none, none, none, none)
} .

o-imf-t-s:PropertyConstraintCardinality[
    ottr:IRI ?id = _:P,
    ottr:IRI ?typeSource,
    ottr:IRI ?path,
    xsd:integer ?minCount,
  ? xsd:integer ?maxCount
] :: {
o-imf-t-s:PropertyConstraint(?id, ?typeSource, ?path, none,
  none, none, none, ?minCount, ?maxCount, none, none, none, none, none, none, none, none, none)
} .

o-imf-t-s:ElementType[
  owl:Class ?id,
  owl:Class ?IMFClass,
  owl:Class ?typeClass,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? List<owl:Class> ?superclass,
  ? ottr:IRI ?aspect,
  ? ottr:IRI ?purpose,
  ? List<ottr:IRI> ?classifiers
] :: {
  o-imf-t-s:Type(?id, ?IMFClass, ?typeClass, ?superclass, ?name, ?description),
  o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:hasAspect, ?aspect),
  o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:purpose, ?purpose),
  cross | o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:classifier, ++?classifiers)
} .

o-imf-t-s:BlockType[
  owl:Class ?id,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? List<owl:Class> ?superclass,
  ? ottr:IRI ?aspect,
  ? ottr:IRI ?purpose,
  ? List<ottr:IRI> ?classifiers,
  ? ottr:IRI ?symbol
] :: {
  o-imf-t-s:ElementType(?id, imf:Block, imf:BlockType, ?name, ?description, ?superclass, ?aspect, ?purpose, ?classifiers),
  o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:symbol, ?symbol)
} .

o-imf-t-s:TerminalType[
  owl:Class ?id,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? List<owl:Class> ?superclass,
  ? ottr:IRI ?aspect,
  ? ottr:IRI ?purpose,
  ? List<ottr:IRI> ?classifiers,
  ? ottr:IRI ?medium
] :: {
  o-imf-t-s:ElementType(?id, imf:Terminal, imf:TerminalType, ?name, ?description, ?superclass, ?aspect, ?purpose, ?classifiers),
  o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:medium, ?medium)
} .

o-imf-t-s:AttributeType[
  owl:Class ?id,
  ? xsd:string ?name,
  ? xsd:string ?description,
  ? List<owl:Class> ?superclass,
  ottr:IRI ?predicate,
  ? xsd:integer ?minCountUoM, # does the attribute have a uom or not?
  ? xsd:integer ?maxCountUoM
  #? rdfs:Datatype ?datatype,
  #? rdfs:Literal ?minInclusive, # lower range of attribute value
  #? rdfs:Literal ?maxInclusive # upper range of attribute value
] :: {
  o-imf-t-s:Type(?id, imf:Attribute, imf:AttributeType, ?superclass, ?name, ?description)
  o-imf-t-s:PropertyConstraintSingleValue(none, ?id, imf:predicate, ?predicate)
  o-imf-t-s:PropertyConstraintCardinality(none, ?id, imf:uom, ?minCountUoM, ?maxCountUoM)
  # o-imf-t-s:PropertyConstraint(none, ?id, imf:value,
  # none, #?value
  # none, #?in
  # none, #?class
  # ?datatype,
  # none, #?minCount,
  # none, #?maxCount,
  # ?minInclusive,
  # none, #?minExclusive,
  # ?maxInclusive,
  # none, #?maxExclusive,
  # none, #?pattern,
  # none,
  # none,
  # none, #?severity,
  # none #?message
  # )
} .
